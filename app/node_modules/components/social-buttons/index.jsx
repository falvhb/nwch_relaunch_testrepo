import React from 'react';
import bem from 'react-bem-helper';

import Button from 'components/button';

const classes = new bem({
  name: 'az-share-buttons',
  prefix: ''
});

export default React.createClass({

  displayName: 'SocialButtons',

  url: null,

  // Breakpoint under which we consider the device a mobile
  breakpoint: 640,

  propTypes: {
    title: React.PropTypes.string,
    description: React.PropTypes.string,
    orientation: React.PropTypes.string,
    modifier: React.PropTypes.string
  },

  getDefaultProps() {
    return {
      orientation: 'horizontal'
    };
  },

  getViewportWidth() {
    return Math.max(document.documentElement.clientWidth, window.innerWidth);
  },

  isMobile() {
    return this.getViewportWidth() < this.breakpoint
      && (
        ('ontouchstart' in window)
        || (navigator.msMaxTouchPoints > 0)
        || (navigator.maxTouchPoints > 0)
      );
  },

  componentDidMount() {
    this.url = window.location.href;
    this.setState({
      support: true,
      mobile: this.isMobile()
    });
  },

  getInitialState() {
    return {
      support: false
    };
  },

  print() {
    window.print();
  },

  openPopup(event) {
    if (event && event.preventDefault) {
      event.preventDefault();
    }

    var target = event.target;

    // target can be SVG <use> element which returns `object SVGAnimatedString`
    var url = target.href === 'string'
      ? target.href
      : target.parentNode.href || target.parentNode.parentNode.href;

    var w = 550, h = 420;
    var top  = (screen.height / 2) - (h / 2);
    var left = (screen.width / 2) - (w / 2);

    window.open(url, 'Artikel teilen', 'width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
  },

  getTwitterTarget() {
    return encodeURI('http://www.twitter.com/share'
      + '?url=' + this.url
      + '&text=' + this.props.title);
  },

  getFacebookTarget() {
    return encodeURI('http://www.facebook.com/sharer/sharer.php'
      + '?u=' + this.url);
  },

  getWhatsappTarget() {
    return encodeURI('whatsapp://send'
      + '?text=' + this.url);
  },

  getMailTarget() {
    var target = 'mailto:?subject=__SUBJECT__&body=__BODY__'
      .replace('__SUBJECT__', this.props.title)
      .replace('__BODY__', this.props.description);

    return encodeURI(target + '\r\n\r\n' + this.url);
  },

  render() {

    var { title, description, orientation, modifier } = this.props;

    var url = this.url;

    return (
      <ul {...classes(null, [orientation, (modifier ? modifier : null)])}>
        <li {...classes('item', 'facebook')}>
          {url
            ? <Button icon='facebook' url={this.getFacebookTarget()} _event={this.openPopup} attributes={{'title': 'Teilen auf Facebook'}} />
          :null}
        </li>
        <li {...classes('item', 'twitter')}>
          {url
            ? <Button icon='twitter' url={this.getTwitterTarget()} _event={this.openPopup} attributes={{'title': 'Teilen auf Twitter'}} />
          :null}
        </li>
        <li {...classes('item', 'mail')}>
          {title && description
            ? <Button icon='mail' url={this.getMailTarget()} attributes={{'title': 'E-mail diesen Artikel'}} />
          :null}
        </li>
        <li {...classes('item', 'print')}>
          {this.state.support
            ? <Button icon='print' _event={this.print} attributes={{'title': 'Drucken'}} />
          :null}
        </li>
        <li {...classes('item', 'whatsapp')}>
          {url && this.state.mobile
            ? <Button icon='whatsapp' url={this.getWhatsappTarget()} attributes={{'data-action': 'share/whatsapp/share', 'title': 'Teilen auf Whatsapp'}} />
          :null}
        </li>
      </ul>
    );

  }

});
