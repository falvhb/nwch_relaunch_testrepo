import React from 'react';
import bem from 'react-bem-helper';
var DOMParser = require('xmldom').DOMParser;
var XMLSerializer = require('xmldom').XMLSerializer;

import { getAssetMeta, getEnrichmentPlacement } from 'helpers';
import Caption from 'components/caption';

const classes = new bem({
  name: 'enrichment-snippet',
  prefix: ''
});

export default React.createClass({

  displayName: 'EnrichmentSnippet',

  propTypes: {
    asset: React.PropTypes.object,
    title: React.PropTypes.string,
    description: React.PropTypes.string,
    placement: React.PropTypes.string
  },

  componentDidMount() {
    // DON'T re-render on the client
    // snippets might contain <script> tags which do their own thing
    return false;
  },

  filterHtmlNodes(html) {

    const videoRegex = /youtube\.com|vimeo\.com/;
    var replaceableNodes = [];
    var doc = new DOMParser().parseFromString(html, 'text/html');

    // Wrap any text nodes
    for (let i = 0; i < doc.childNodes.length; i++) {
      if (doc.childNodes.item(i).nodeType === 3) {
        let wrapper = doc.createElement('p');
        wrapper.setAttribute('class', 'enrichment-snippet__text');
        wrapper.appendChild(doc.childNodes.item(i).cloneNode());
        replaceableNodes.push({new: wrapper, old: doc.childNodes.item(i)});
      }
    }

    // Wrap any Youtube or Vimeo iframes
    var iframeNodes = doc.getElementsByTagName('iframe');
    for (let i = 0; i < iframeNodes.length; i++) {
      let src = iframeNodes.item(i).getAttribute('src');
      if (videoRegex.test(src)) {
        let wrapper = doc.createElement('div');
        wrapper.setAttribute('class', 'enrichment-snippet__video');
        wrapper.appendChild(iframeNodes.item(i).cloneNode());
        replaceableNodes.push({new: wrapper, old: iframeNodes.item(i)});
      }
    }

    // Now replace nodes
    replaceableNodes.forEach(nodes => {
      doc.replaceChild(nodes.new, nodes.old);
    });

    return new XMLSerializer().serializeToString(doc);
  },

  render() {
    const { asset } = this.props;

    return (
      <div {...classes(null, getEnrichmentPlacement(this.props.placement))}>
        <div {...classes('pandoras-box')} dangerouslySetInnerHTML={{ __html: this.filterHtmlNodes(asset.html) }} />
        {asset.source
         ? <Caption {...getAssetMeta(this.props)} />
        :null}
      </div>
    );
  }

});
