import React from 'react';
import bem from 'react-bem-helper';

import { getAssetMeta, getEnrichmentPlacement } from 'helpers';
import Caption from 'components/caption';

const classes = new bem({
  name: 'enrichment-snippet',
  prefix: ''
});

let source;

export default React.createClass({

  displayName: 'EnrichmentSnippet',

  propTypes: {
    asset: React.PropTypes.object,
    title: React.PropTypes.string,
    description: React.PropTypes.string,
    placement: React.PropTypes.string
  },

  componentDidMount() {
    // DON'T re-render on the client
    // snippets might contain <script> tags which do their own thing
    return false;
  },

  filterHtmlNodes(html) {

    var filteredHtml = html;

    // Wrap Youtube or Vimeo iframes in a div
    const videoRegex = /(<iframe[^<>]*?src="[\w:/.]*(youtube.com|youtube-nocookie.com|vimeo.com)[^<>]*?>\s*<\/iframe>)/;

    if (videoRegex.test(filteredHtml)) {
      let widthResults = filteredHtml.match(/<iframe[^<>]*?width="(\d+)"[^<>]*?><\/iframe>/);
      let heightResults = filteredHtml.match(/<iframe[^<>]*?height="(\d+)"[^<>]*?><\/iframe>/);

      let videoRatio = widthResults && heightResults
        ? ((parseInt(heightResults[1]) / parseInt(widthResults[1])) * 100) + '%'
        : '56.25%';

      filteredHtml = filteredHtml.replace(videoRegex, '<div class="enrichment-snippet__video" style="padding-bottom: ' + videoRatio + '">$&</div>');
    }

    // Wrap trailing text (a caption) in a span
    const captionRegex = /([^\s<>][^<>\n]*)$/;

    let classname = 'enrichment-snippet__text';

    classname += source
      ? ' enrichment-snippet__text--has-source'
      : ' enrichment-snippet__text--no-source';

    filteredHtml = filteredHtml.replace(captionRegex, '<span class="' + classname + '">$&</span>');

    return filteredHtml;
  },

  render() {
    const { asset } = this.props;

    source = getAssetMeta(this.props);

    return (
      <div {...classes(null, getEnrichmentPlacement(this.props.placement))}>
        <div {...classes('pandoras-box')} dangerouslySetInnerHTML={{ __html: this.filterHtmlNodes(asset.html) }} />
        {source
         ? <Caption {...source} />
        :null}
      </div>
    );
  }

});
