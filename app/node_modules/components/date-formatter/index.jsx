import React from 'react';
import moment from 'moment';
import sprintf from 'sprintf-js';

export default React.createClass({

  displayName: 'DateFormatter',

  propTypes: {
    publicationDate: React.PropTypes.string.isRequired,
    modificationDate: React.PropTypes.string,
    publicationFormat: React.PropTypes.string,
    modificationFormat: React.PropTypes.string,
    format: React.PropTypes.string
  },

  getDefaultProps() {
    return {
      format: 'long',
      publicationFormat: '%s',
      modificationFormat: 'Zuletzt aktualisiert am %s'
    };
  },

  /**
   * Return whether the publication date should be used
   */
  isPublication() {
    return !this.props.modificationDate;
  },

  /**
   * Return whether the modification date (if any) should be used
   */
  isModification() {
    return !this.isPublication();
  },

  /**
   * Format the date (short / long / custom)
   */
  formatDate(date) {
    if (this.props.format.toLowerCase() === 'long') {
      return moment(date).format('D.M.YYYY [um] HH:mm [Uhr]');
    }

    if (this.props.format.toLowerCase() === 'short') {
      return moment(date).format('D.M.YYYY');
    }

    try {
      return moment(date).format(this.props.format);
    } catch(e) {
      throw new Error(e);
    }
  },

  /**
   * Wrap date with string format (if any)
   */
  wrapDate(date) {
    var status = this.isPublication() ? 'publication' : 'modification';
    var property = this.props[status + 'Format'];

    return sprintf.sprintf(property, date);
  },

  /**
   * Get the correct microdata `itemprop`
   */
  getItemprop() {
    return this.isPublication() ? 'dateCreated' : 'dateModified';
  },

  /**
   * Choose the date to display
   */
  chooseDate() {
    return this.isModification()
         ? this.props.modificationDate
         : this.props.publicationDate;
  },

  /**
   * Choose, format, wrap and display date
   */
  displayDate() {
    return this.wrapDate(this.formatDate(this.chooseDate()));
  },

  render() {

    return (
      <span itemProp={this.getItemprop()}>
        {this.displayDate()}
      </span>
    );

  }

});
