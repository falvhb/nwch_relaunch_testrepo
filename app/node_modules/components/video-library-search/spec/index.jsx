/* eslint-disable no-unused-expressions, no-unused-vars */
/* global expect:true, assert:true, chai:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import VideoLibrarySearch from 'components/video-library-search';
import Button from 'components/button';


describe('Video Library Search', function() {
  var reactElement;
  var component;

  describe('renders', function() {
    beforeEach(function() {
      reactElement = <VideoLibrarySearch onSearch={function() {}} />;
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a React Element', function() {
      expect(TestUtils.isElement(reactElement)).to.be.true;
    });

    it('a React Component', function() {
      expect(TestUtils.isCompositeComponentWithType(component, VideoLibrarySearch)).to.be.true;
    });

    it('a DOM Component with a BEM class', function() {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'video-library-search');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a Button', function() {
      expect(TestUtils.isCompositeComponent(TestUtils.findRenderedComponentWithType(component, Button))).to.be.true;
    });

    it('a text field', function() {
      var textField = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
      expect(TestUtils.isDOMComponent(textField)).to.be.true;
    });
  });

  describe('handles', function() {
    it('notification on changing of text in text field', function() {
      var textField,
        callback,
        input,
        event;

      callback = sinon.spy();
      reactElement = <VideoLibrarySearch onChangeSearchText={callback} onSearch={function() {}} />;

      component = TestUtils.renderIntoDocument(reactElement);
      textField = TestUtils.findRenderedDOMComponentWithTag(component, 'input');

      input = 'text input';
      event = {
        target: { value: input }
      };
      TestUtils.Simulate.change(textField, event);

      // use sinon-chai assertions
      callback.should.have.been.calledWithMatch(input);

      // alternatively one could use sinon with chai assertions (without using sinon-chai)
      // assert(callback.called);
      // assert(callback.calledWith(input));
      // assert(callback.calledWithMatch(input));
    });
  });
});
