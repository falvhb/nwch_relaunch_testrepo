/* eslint-disable no-unused-expressions, no-unused-vars */
/* global expect:true, assert:true, chai:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import VideoLibrarySearch from 'components/video-library-search';
import Button from 'components/button';


describe('Video Library Search', () => {
  var reactElement,
    component,
    onChangeSearchText,
    onSearch;

  describe('renders', () => {
    beforeEach(() => {
      reactElement = <VideoLibrarySearch onSearch={function() {}} />;
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a React Element', () => {
      expect(TestUtils.isElement(reactElement)).to.be.true;
    });

    it('a React Component', () => {
      expect(TestUtils.isCompositeComponentWithType(component, VideoLibrarySearch)).to.be.true;
    });

    it('a DOM Component with a BEM class', () => {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'video-library-search');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a Button', () => {
      expect(TestUtils.isCompositeComponent(TestUtils.findRenderedComponentWithType(component, Button))).to.be.true;
    });

    it('a text field', () => {
      var textField = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
      expect(TestUtils.isDOMComponent(textField)).to.be.true;
    });
  });

  // using module legit-tests for cleaner syntax
  describe('handles', () => {
    var props;

    beforeEach(() => {
      props = {
        onChangeSearchText: sinon.spy(),
        onSearch: sinon.spy()
      };
    });

    it('notification on changing of text in text field', () => {
      var text,
        event;

      text = 'text input';
      event = {
        target: { value: text }
      };

      Test(<VideoLibrarySearch {...props} />)
        .find('input')
        .simulate({method: 'change', element: 'input', options: event})
        .element(() => {
          props.onChangeSearchText.should.have.been.calledWithMatch(text);
        });
    });

    it('pressing enter in text field', () => {
      var event;

      event = {
        key: 'Enter',
        keyCode: 13,
        which: 13
      };

      Test(<VideoLibrarySearch {...props} />)
        .find('input')
        .simulate({method: 'keyDown', element: 'input', options: event})
        .element(() => {
          props.onSearch.should.have.been.called;
        });
    });
  });

  // // using TestUtils and Sinon-Chai
  // describe('handles', () => {
  //   var textField,
  //     props;

  //   beforeEach(function() {
  //     textField;
  //     props = {
  //       onChangeSearchText: sinon.spy(),
  //       onSearch: sinon.spy()
  //     };
  //     reactElement = <VideoLibrarySearch {...props} />;
  //     component = TestUtils.renderIntoDocument(reactElement);
  //     textField = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
  //   });

  //   it('notification on changing of text in text field', () => {
  //     var input,
  //       event;

  //     input = 'text input';
  //     event = {
  //       target: { value: input }
  //     };
  //     TestUtils.Simulate.change(textField, event);

  //     // use sinon-chai assertions
  //     props.onChangeSearchText.should.have.been.calledWithMatch(input);

  //     // alternatively one could use sinon with chai assertions (without using sinon-chai)
  //     // assert(props.onChangeSearchText.called);
  //     // assert(props.onChangeSearchText.calledWith(input));
  //     // assert(props.onChangeSearchText.calledWithMatch(input));
  //   });

  //   it('pressing enter in text field', () => {
  //     var event;

  //     event = {
  //       key: 'Enter',
  //       keyCode: 13,
  //       which: 13
  //     };
  //     TestUtils.Simulate.keyDown(textField, event);

  //     // use sinon-chai assertions
  //     props.onSearch.should.have.been.called;
  //   });
  // });

});
