/* eslint-disable no-unused-expressions */
/* global expect:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import chai from 'chai';
import sinon from 'sinon';
// @TODO:@Richard:
// Why can I use `expect(callback).to.have.been.called` without importing sinon-chai (commenting out next 2 lines)?
import sinonChai from 'sinon-chai';
chai.use(sinonChai);

import VideoLibrarySearch from 'components/video-library-search';
import Button from 'components/button';


describe('Video Library Search', function() {
  var reactElement;
  var component;

  describe('renders', function() {
    beforeEach(function() {
      reactElement = <VideoLibrarySearch />;
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a React Element', function() {
      expect(TestUtils.isElement(reactElement)).to.be.true;
    });

    it('a React Component', function() {
      expect(TestUtils.isCompositeComponentWithType(component, VideoLibrarySearch)).to.be.true;
    });

    it('a DOM Component with a BEM class', function() {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'video-library-search');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a Button', function() {
      expect(TestUtils.isCompositeComponent(TestUtils.findRenderedComponentWithType(component, Button))).to.be.true;
    });

    it('a text field', function() {
      var textField = TestUtils.findRenderedDOMComponentWithTag(component, 'input');
      expect(TestUtils.isDOMComponent(textField)).to.be.true;
    });
  });

  describe('handles', function() {
    it('notification on changing of text in text field', function() {
      var callback = sinon.spy();

      reactElement = <VideoLibrarySearch onChangeSearchText={callback} />;
      component = TestUtils.renderIntoDocument(reactElement);

      var input = 'text input';
      var event = {
        target: { value: input}
      };
      component.props.onChangeSearchText(event);

      expect(callback).to.have.been.called;

      // ==true
      // assert(callback.called);

      // @TODO:@Richard: Assertion not existing. Any idea why?
      // error: assertion not defined
      // assert(callback.calledWith(input));

      // error: assertion not defined
      // expect(callback).to.have.been.calledWith(input);
    });
  });
});
