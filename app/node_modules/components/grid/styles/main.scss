@import 'globals';

/**
 * Generic grid element
 */
.grid {
  @include grid-wrap;
  display: flex;
  flex-wrap: wrap;
}

/**
 * Items or cells - use these to lay out components
 * Separate concerns: only add margin and width / position not appearance
 */
.grid__item {
  @include grid-cell;
  display: flex;
  flex-direction: column;

  @include media('<=grid-break-1') {
    margin-bottom: 25px;
  }

  @include media('>grid-break-1', '<=grid-break-2') {
    margin-bottom: 30px;
  }

  @include media('>grid-break-2') {
    margin-bottom: 40px;
  }
}

/**
 * Equal heights across grid cells / teasers
 * Unelegant, because of so many wrapping elements
 * 1. Equalize the heights of this element in the row
 */
.grid__item {
  > div,
  .slotdbg,
  .az-iso,
  .az-iso-component,
  .teaser-switch-view,
  .teaser,
  .cover,
  .cover__link,
  .magic-slot,
  .fill-height {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    flex: 1;
  }

  .teaser__link {
    width: 100%;
    flex: 1; /* 1 */
  }
}

/**
 * Three-up-simple grid
 */
.grid--three-up-simple .grid__item {
  width: 100%;

  @include media('>grid-break-1', '<=grid-break-2') {
    width: (100% / 2);

    &:nth-child(2n + 1) {
      clear: left;
    }
  }

  @include media('>grid-break-2') {
    width: (100% / 3);

    &:nth-child(3n + 1) {
      clear: left;
    }
  }
}

/**
 * Three-up-featured grid
 */
.grid--three-up-featured .grid__item {
  width: 100%;

  @include media('>grid-break-1', '<=grid-break-2') {
    width: (100% / 2);

    &:nth-child(1) {
      width: 100%;
    }

    &:nth-child(2n) {
      clear: left;
    }
  }

  @include media('>grid-break-2') {
    width: (100% / 3);

    &:first-child {
      width: (100% / 3) * 2;
    }

    // &:first-child,
    // &:nth-child(2) {
    //   margin-bottom: 20px;
    // }

    &:nth-child(3n) {
      clear: left;
    }
  }
}


/**
 * Styleguide grid - make grey squares
 */
.grid__placeholder {
  padding-bottom: 20%;
  position: relative;
  background-color: $light-grey;

  &::after {
    content: 'Grid item';
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
}
