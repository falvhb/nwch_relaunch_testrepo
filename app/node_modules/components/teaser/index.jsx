import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import ResponsiveImage from 'components/responsive-image';
import TeaserTitle from 'components/teaser-title';
import TeaserByline from 'components/teaser-byline';
import TeaserMarker from 'components/teaser-marker';
import Schema from 'components/schema';

import { getViewportWidth, getTeaserConfig } from 'helpers';

const classes = new bem({
  name: 'teaser',
  prefix: ''
});

export default React.createClass({

  displayName: 'Teaser',

  responsiveTeasers: [
    'basic-listed'
  ],

  breakpoint: 500,

  resizeEvent: null,

  propTypes: {
    variation: React.PropTypes.string,
    theme: React.PropTypes.object.isRequired,
    catchword: React.PropTypes.string,
    link: React.PropTypes.string,
    title: React.PropTypes.object.isRequired,
    byline: React.PropTypes.object,
    marker: React.PropTypes.object,
    image: React.PropTypes.object,
    imageSize: React.PropTypes.object,
  },

  getInitialState() {
    return {
      view: 'desktop'
    };
  },

  getDefaultProps() {
    return {
      variation: 'basic',
      theme: {
        modifiers: ['theme-article']
      },
      schema: {}
    };
  },

  handleResize() {
    this.setState({
      view: getViewportWidth() <= this.breakpoint
        ? 'mobile'
        : 'desktop'
    });
  },

  componentDidMount() {
    // for teasers with two views e.g. `basic-listed`
    if (_.contains(this.responsiveTeasers, this.props.variation)) {
      this.handleResize();
      this.resizeEvent = _.debounce(this.handleResize, 250);
      window.addEventListener('resize', this.resizeEvent);
    }
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeEvent);
  },

  componentDidUpdate(prevProps, prevState) {
    let { view } = this.state;
    // if the view changes
    if (prevState.view !== view) {
      // update the teaser config for this view
      let teaserConfig = getTeaserConfig(this.props.variation, view);
      this.setState(teaserConfig);
    }
  },

  render() {

    let { theme, marker, title, byline, catchword, link, image, schema } = this.props;

    // props which change depending on `view` state
    // e.g. in the case of `basic-listed` teasers
    let variation = this.state.variation || this.props.variation;
    let imageSize = this.state.imageSize || this.props.imageSize;
    if (this.state.dateFormat) byline.dateFormat = this.state.dateFormat;

    let modifierClasses = [variation].concat(theme.modifiers);

    return (
      <article {...classes(null, modifierClasses)} itemScope itemType='http://schema.org/Article'>
        <a {...classes('link')} href={link} itemProp='url'>
          {image
            ? <div {...classes('image')} itemProp='image' itemScope itemType='http://schema.org/ImageObject'>
                <TeaserMarker {...marker} modifiers={modifierClasses} />
                <ResponsiveImage {...image} {...imageSize} defer={this.state.imageSize ? false : true} fill={true} fitToBox={true}/>
              </div>
          :null}

          <footer {...classes('footer')}>
            {catchword
              ? <p {...classes('catchword')}>{catchword}</p>
            :null}

            <TeaserTitle {...title} modifiers={modifierClasses} />

            <Schema items={schema} />

            <TeaserByline {...byline} modifiers={modifierClasses} />
          </footer>
        </a>
      </article>

    );
  }

});
