import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import ResponsiveImage from 'components/responsive-image';
import DateFormatter from 'components/date-formatter';

import { getViewportWidth, getTeaserConfig } from 'helpers';

const classes = new bem({
  name: 'teaser',
  prefix: ''
});

export default React.createClass({

  displayName: 'Teaser',

  responsiveTeasers: [
    'basic-listed'
  ],

  breakpoint: 500,

  resizeEvent: null,

  propTypes: {
    modifier: React.PropTypes.string,
    theme: React.PropTypes.string,
    title: React.PropTypes.string.isRequired,
    catchword: React.PropTypes.string,
    link: React.PropTypes.string,
    image: React.PropTypes.object,
    imageSize: React.PropTypes.object,
    dateFormat: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.bool
    ]),
    supplementary: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.bool
    ])
  },

  getInitialState() {
    return {
      view: 'desktop'
    };
  },

  getDefaultProps() {
    return {
      modifier: 'basic',
      theme: 'default',
      schema: {}
    };
  },

  handleResize() {
    this.setState({
      view: getViewportWidth() <= this.breakpoint
        ? 'mobile'
        : 'desktop'
    });
  },

  componentDidMount() {
    // for teasers with two views e.g. `basic-listed`
    if (_.contains(this.responsiveTeasers, this.props.modifier)) {
      this.handleResize();
      this.resizeEvent = _.debounce(this.handleResize, 250);
      window.addEventListener('resize', this.resizeEvent);
    }
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeEvent);
  },

  componentDidUpdate(prevProps, prevState) {
    let { view } = this.state;
    // if the view changes
    if (prevState.view !== view) {
      // update the teaser config for this view
      let teaserConfig = getTeaserConfig(this.props.modifier, view);
      this.setState(teaserConfig);
    }
  },

  render() {

    let { theme, title, catchword, link, image, supplementary, schema } = this.props;

    // props which change depending in `view` state
    let modifier = this.state.modifier || this.props.modifier;
    let imageSize = this.state.imageSize || this.props.imageSize;
    let dateFormat = this.state.dateFormat || this.props.dateFormat;

    return (
      <article {...classes(null, [modifier, theme])} itemScope itemType='http://schema.org/Article'>
        <a {...classes('inner')} href={link} itemProp='url'>
          {image
            ? <div {...classes('image')} itemProp='image' itemScope itemType='http://schema.org/ImageObject'>
                <ResponsiveImage {...image} {...imageSize} defer={this.state.imageSize ? false : true} fill={true} fitToBox={true}/>
              </div>
          :null}

          <footer {...classes('footer')}>
            {catchword && modifier !== 'title'
              ? <p {...classes('catchword')}>{catchword}</p>
            :null}
            <h1 {...classes('title')} itemProp='headline'><span>{title}</span></h1>

            {Object.keys(schema).map(function(schemaItem, index) {
              return <meta itemProp={schemaItem} content={schema[schemaItem]} key={index} />;
            })}

            {supplementary
              ? dateFormat
                ? <p {...classes('supplementary')}><DateFormatter publicationDate={supplementary} format={dateFormat} /></p>
                : <p {...classes('supplementary')}>{supplementary}</p>
            :null}
          </footer>
        </a>
      </article>

    );
  }

});
