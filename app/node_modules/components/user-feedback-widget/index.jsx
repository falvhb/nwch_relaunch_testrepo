import React from 'react';
import _ from 'lodash';
import bem from 'react-bem-helper';
import Container from 'components/container';
import Button from 'components/button';
import Alert from 'components/alert';

import { embedWufoo } from 'helpers';

const widgetClassName = 'user-feedback-widget';
const formClassName = 'user-feedback-form';

const widgetClasses = new bem({
  name: widgetClassName,
  prefix: ''
});

const formClasses = new bem({
  name: formClassName,
  prefix: ''
});

export default React.createClass({

  displayName: 'UserFeedbackWidget',

  getInitialState() {
    return {
      elementIsShown: false,
      formActivated: false,
      formHasLoaded: false
    };
  },

  WUFOO_USERNAME: process.env.WUFOO_USERNAME,

  WUFOO_FEEDBACK_FORM: process.env.WUFOO_FEEDBACK_FORM,

  scrollHandler: null,

  checkIfElementShouldShow() {
    var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    var elementTopOffset = this.refs.anchor.getDOMNode().getBoundingClientRect().top;

    if (elementTopOffset - viewportHeight <= 0) {
      if (!this.state.elementIsShown) this.toggleFeedBackBar();
    } else if (this.state.elementIsShown && !this.state.formIsShowing) {
      this.toggleFeedBackBar();
    }
  },

  formElement() {
    return this.containerElement.querySelector('.' + formClassName);
  },

  setDisplayClasses() {
    this.containerElement.className = this.state.elementIsShown
      ? 'user-feedback-widget is-showing'
      : 'user-feedback-widget';
  },

  toggleFeedBackBar() {
    this.setState({
      elementIsShown: this.state.elementIsShown
        ? false
        : true
    });
    this.setDisplayClasses();
  },

  toggleFormShowing() {
    this.formElement().classList.toggle('is-hidden');
  },

  toggleFormLoading() {
    this.formElement().classList.toggle('is-loading');
  },

  formIsLoaded() {
    this.setState({ formHasLoaded: true });
    this.toggleFormLoading();
  },

  positiveFeedback() {
    this.setState({
      feedbackGiven: true,
      formIsShowing: false
    });
  },

  toggleFeedbackForm() {
    this.setState({
      formIsShowing: !this.state.formIsShowing,
      hideFeedbackPrompt: true
    });
    this.toggleFormShowing();
  },

  injectForm() {
    this.renderElement();
    this.toggleFormLoading();
    embedWufoo({
      options: {
        formHash: this.WUFOO_FEEDBACK_FORM,
        userName: this.WUFOO_USERNAME
      },
      callback: this.formIsLoaded
    });
    this.setState({ formActivated: true });
  },

  isSubmitted() {
    this.toggleFormShowing();
    this.formElement().innerHTML = '';
    this.renderElement();
    document.removeEventListener('scroll', this.scrollHandler);
    var self = this;
    setTimeout(function() {
      self.containerElement.classList.remove('is-showing');
    }, 3000);
    setTimeout(function() {
      self.containerElement.innerHTML = '';
    }, 3500);
  },

  componentDidMount() {
    this.scrollHandler = _.throttle(this.checkIfElementShouldShow, 250);
    document.addEventListener('scroll', this.scrollHandler);
    this.containerElement = document.createElement('div');
    this.containerElement.className = widgetClassName;
    document.body.appendChild(this.containerElement);
    this.renderElement();
    this.setDisplayClasses();
  },

  componentDidUpdate() {
    // only inject the form if we haven't activated it yet and the toggle was clicked
    if (!this.state.formActivated && this.state.formIsShowing) {
      this.injectForm();
    }
    // when positive feedback given
    if (this.state.feedbackGiven) {
      this.isSubmitted();
    }
  },

  renderElement() {

    var { formIsShowing, feedbackGiven, hideFeedbackPrompt } = this.state;

    var content = (

      <Container>
        <div {...widgetClasses('layout')}>
          <div {...formClasses(null, null, 'is-hidden')}>
            <div id={'wufoo-' + this.WUFOO_FEEDBACK_FORM} />
            {formIsShowing
              ? <span {...formClasses('close')}>
                  <Button icon='close' _event={this.toggleFeedbackForm} label='Schliessen' modifier='plain' />
                </span>
            :null}
          </div>
          <div {...widgetClasses('prompt', null, { 'is-hidden': feedbackGiven, 'is-gone': hideFeedbackPrompt })}>
            <p {...widgetClasses('text')}><strong>Fühlen Sie sich gut informiert?</strong></p>
            <div {...widgetClasses('buttons')}>
              <Button label='Ja' _event={this.positiveFeedback} attributes={{'title': 'Ja'}} />
              <Button label='Nein' _event={this.toggleFeedbackForm} attributes={{'title': 'Nein'}} modifier='secondary' />
            </div>
          </div>
          <div {...widgetClasses('alert', null, !feedbackGiven ? 'is-hidden' : null)}>
            <Alert text='Vielen Dank für Ihr Feedback!' />
          </div>
        </div>
      </Container>
    );

    React.render(content, this.containerElement);

  },

  render() {
    return <span ref="anchor" />;
  }

});
