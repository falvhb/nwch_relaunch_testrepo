/*global Flickity:true*/
import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import getScript from 'helpers/get-script';

const classes = new bem({
  name: 'related-videos',
  prefix: ''
});

export default React.createClass({

  // Breakpoint under which Flickity should be initialized
  breakpoint: 640,
  // Contains the instance of Flickity once initialized
  flickity: null,
  // The selector on which Flickity should be initialized
  flickityElement: '.recommendation ul',
  // The options with which Flickity should be initialized
  flickityOptions: {
    freeScroll: false,
    prevNextButtons: false,
    pageDots: false,
  },

  getInitialState() {
    return {
      // No JS / server.js
      support: false,
      // Initiale state is not mobile
      mobile: false
    };
  },

  getDefaultProps() {
    return {
      author: ''
    };
  },

  // Return the viewport width
  getViewportWidth() {
    return Math.max(document.documentElement.clientWidth, window.innerWidth);
  },

  // Method called when the window gets resized; redefines the `mobile` state
  handleResize() {
    this.setState({
      mobile: this.getViewportWidth() < this.breakpoint
    });
  },

  componentDidMount() {
    this.loadVeeseo();
  },

  triggerSlider() {
    var self = this;
    setTimeout(function() {
      window.addEventListener('resize', _.debounce(self.handleResize, 250));

      // Redefine the `mobile` state
      self.handleResize();

      // Redefine the `support` state
      self.setState({ support: true });

      // Re-perform the mobile check as `.setState(..)` is asynchronous
      if (self.getViewportWidth() <= self.breakpoint && self.state.support) {
        self.initSlider();
      }
    }, 1500);
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
    this.destroySlider();
  },

  updateHeight(params) {
    var items = params.slider.getCellElements(), i;
    var height = params.destroy ? '' : params.slider.maxCellHeight + 'px';
    for (i = 0; i < items.length; ++i) {
      items[i].style.height = height;
    }
  },

  // Initialize Flickity
  initSlider() {
    this.flickityOptions.initialIndex = 1;
    // Break in case Flickity is not loaded for some reason
    // or if the slider is already initialized
    if (typeof Flickity !== 'undefined' && !this.flickity) {
      this.flickity = new Flickity(this.flickityElement, this.flickityOptions);
      // this.updateHeight({
      //   slider: this.flickity
      // });
    }
  },

  // Remove Flickity
  destroySlider() {
    if (typeof this.flickity.destroy === 'function') {
      this.updateHeight({
        slider: this.flickity,
        destroy: true
      });
      this.flickity.destroy();
      this.flickity = null;
    }
  },

  componentDidUpdate() {
    if (this.state.mobile && this.state.support) {
      this.initSlider();
    } else if (this.flickity !== null) {
      this.destroySlider();
    }
  },

  loadVeeseo() {
    getScript('//rce.veeseo.com/widgets/aargauerzeitung/widget.js', this.triggerSlider);
  },

  render() {
    return (
      <section ref='related' {...classes()}>
        <h2 {...classes('title')}>Verwandte Videos</h2>
        <div className="veeseoRA2VW2"></div>
      </section>
    );
  }
});
