import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';
import PrimaryNav from 'components/primary-nav';
import HeaderLogo from 'components/header-logo';

import { getViewportWidth } from 'helpers';

const classes = new bem({
  name: 'header-nav',
  prefix: ''
});

export default React.createClass({

  displayName: 'HeaderNav',

  propTypes: {
    skin: React.PropTypes.string.isRequired,
    nav: React.PropTypes.object.isRequired
  },

  getInitialState() {
    return {
      open: false,
      mobile: true
    };
  },

  lastScroll: 0,

  breakpoint: 900,

  threshold: 10,

  headerHeight: 110,

  mobileHeaderHeight: 60,

  getHeaderHeight() {
    return this.isMobile() ? this.mobileHeaderHeight : this.headerHeight;
  },

  isMobile() {
    return getViewportWidth() <= this.breakpoint;
  },

  // fixNavigation() {
  //   this.setState({ fixed: true });
  // },

  // unfixNavigation() {
  //   this.setState({ fixed: false });
  // },

  // slimNavigation() {
  //   this.setState({ slim: true });
  // },

  // unslimNavigation() {
  //   this.setState({ slim: false });
  // },

  // openNavigation() {
  //   this.setState({ open: true });
  // },

  // closeNavigation() {
  //   this.setState({ open: false });
  // },



  // getScrollDifference(current) {
  //   return Math.abs(current - this.lastScroll);
  // },

  // mobileScrollBehvaiour() {
  //   // when back at the top
  //   if (window.scrollY <= 0) this.unfixNavigation();

  //   // when scrolling down and the nav isn't open
  //   if (window.scrollY > this.lastScroll && this.state.fixed && !this.state.open) this.unfixNavigation();

  //   // when scrolling up
  //   if (window.scrollY < this.lastScroll && !this.state.fixed) this.fixNavigation();
  // },

  // desktopScrollBehvaiour() {
  //   // when scrolling down
  //   if (window.scrollY > this.lastScroll && this.state.fixed) this.unfixNavigation();

  //   // when scrolling below the header
  //   if (window.scrollY > this.headerHeight) {
  //     this.slimNavigation();
  //     this.closeNavigation();
  //     // scrolling back up
  //     if (window.scrollY < this.lastScroll && !this.state.fixed) this.fixNavigation();
  //   } else {
  //     // otherwise, always show full nav
  //     this.unfixNavigation();
  //     this.unslimNavigation();
  //     this.openNavigation();
  //   }

  //   // when scrolling down
  //   if (window.scrollY > this.lastScroll && this.state.fixed) {
  //     this.unfixNavigation();
  //     this.closeNavigation();
  //   }
  // },

  // checkScrollPosition() {
  //   // only make changes on larger movements
  //   if (this.getScrollDifference(window.scrollY) > this.threshold) {
  //     if (this.isMobile()) {
  //       this.mobileScrollBehvaiour();
  //     } else {
  //       this.desktopScrollBehvaiour();
  //     }
  //   }

  //   // update the last scroll position
  //   this.lastScroll = window.scrollY;
  // },

  handleResize() {
    this.headerHeight = this.getHeaderHeight();
    this.setState({ mobile: this.isMobile()});
  },

  toggleNavigation() {
    this.setState({ open: !this.state.open });
    document.documentElement.classList.toggle('is-menu-open');
  },

  componentDidMount() {
    // this.scrollHandler = _.throttle(this.checkScrollPosition, 150);
    // document.addEventListener('scroll', this.scrollHandler, 150);
    this.resizeHandler = _.throttle(this.handleResize, 150);
    window.addEventListener('resize', this.resizeHandler, 150);
    this.setState({
      mobile: this.isMobile(),
      open: this.isMobile() ? false : true
    });
  },

  componentDidUpdate(prevProps, prevState) {
    if (prevState.mobile !== this.state.mobile) {
      this.getHeaderHeight();
      document.documentElement.classList.remove('is-menu-open');
      if (this.state.mobile) {
        this.setState({ open: false });
      }
    }
  },

  render() {
    const { open, mobile } = this.state;

    const { nav, skin } = this.props;

    // let headerClasses = {
    //   'is-fixed': fixed,
    //   'is-slim': slim,
    //   'is-mobile': mobile,
    // };

    let toggleClasses = {
      'is-open': mobile && open,
      'is-closed': mobile && !open
    };

    return (
      <header {...classes()} ref='headerNav'>
        <div {...classes('brand')}>
          <div {...classes('container', 'brand')}>
            <div {...classes('brand-inner')}>
              <button {...classes('trigger', null, toggleClasses)} onClick={this.toggleNavigation}>
                Menu
              </button>
              <span {...classes('logo')}>
                <HeaderLogo id={skin} />
              </span>
            </div>
          </div>
        </div>
        <div {...classes('toggle', null, toggleClasses)}>
          <div {...classes('container', 'toggle')}>
            {nav && nav.items
              ? <PrimaryNav items={nav.items} active={nav.active} />
            :null}
          </div>
        </div>
      </header>
    );
  }

});
