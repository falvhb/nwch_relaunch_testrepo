import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';
import PrimaryNav from 'components/primary-nav';
import HeaderLogo from 'components/header-logo';
import MetaNav from 'components/meta-nav';

import { getViewportWidth, classList } from 'helpers';

const classes = new bem({
  name: 'header-nav',
  prefix: ''
});

export default React.createClass({

  displayName: 'HeaderNav',

  propTypes: {
    skin: React.PropTypes.string.isRequired,
    nav: React.PropTypes.object.isRequired
  },

  getInitialState() {
    return {
      open: false,
      mobile: true,
      showing: true,
      fixed: false
    };
  },

  lastScroll: 0,

  breakpoint: 900,

  threshold: 10,

  headerHeight: 125,

  mobileHeaderHeight: 75,

  stopFunction: function(e) {
    e.preventDefault();
  },

  disableScrolling() {
    window.addEventListener('touchmove', this.stopFunction);
  },

  enableScrolling() {
    window.removeEventListener('touchmove', this.stopFunction);
  },

  getHeaderHeight() {
    return this.isMobile() ? this.mobileHeaderHeight : this.headerHeight;
  },

  isTouch() {
    return ('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0) || (navigator.maxTouchPoints > 0);
  },

  isMobile() {
    return getViewportWidth() <= this.breakpoint;
  },

  fixNavigation() {
    this.setState({ fixed: true });
  },

  unfixNavigation() {
    this.setState({ fixed: false });
  },

  showNavigation() {
    this.setState({ showing: true });
  },

  hideNavigation() {
    this.setState({ showing: false });
  },

  getScrollDifference(current) {
    return Math.abs(current - this.lastScroll);
  },

  scrollBehvaiour(top) {
    // when we scroll past the header
    if (top > (this.headerHeight)) {
      // when header is not fixed yet
      if (!this.state.fixed) this.fixNavigation();
      // when scrolling down and header is showing
      if (top > this.lastScroll && this.state.showing) this.hideNavigation();
    }

    // when scrolling up and header isn't showing
    if (top < this.lastScroll && !this.state.showing) this.showNavigation();

    // when scrolling back to the top
    if (top <= 0 && this.state.fixed) {
      this.showNavigation();
      this.unfixNavigation();
    }
  },

  checkScrollPosition() {
    var scrollY = (window.scrollY || window.pageYOffset);
    // only make changes on larger movements
    if (this.getScrollDifference(scrollY) > this.threshold) {
      this.scrollBehvaiour(scrollY);
    }

    // update the last scroll position
    this.lastScroll = scrollY;
  },

  handleResize() {
    this.headerHeight = this.getHeaderHeight();
    this.setState({ mobile: this.isMobile()});
  },

  toggleNavigation() {
    this.setState({ open: !this.state.open });
    classList.toggle(document.documentElement, 'is-menu-open');
  },

  componentDidMount() {
    this.scrollHandler = _.throttle(this.checkScrollPosition, 150);
    window.addEventListener('scroll', this.scrollHandler, 150);
    this.resizeHandler = _.throttle(this.handleResize, 150);
    window.addEventListener('resize', this.resizeHandler, 150);
    this.setState({
      mobile: this.isMobile(),
      open: this.isMobile() ? false : true
    });

    // primitive touch detection
    classList.add(document.documentElement, this.isTouch() ? 'touch' : 'no-touch');
  },

  componentDidUpdate(prevProps, prevState) {
    // if changing mobile state
    if (prevState.mobile !== this.state.mobile) {
      this.getHeaderHeight();
      classList.remove(document.documentElement, 'is-menu-open');
      if (this.state.mobile) {
        this.setState({ open: false });
      } else {
        this.enableScrolling();
      }
    }
    // if changing open state
    if (prevState.open !== this.state.open) {
      if (this.state.open) {
        this.disableScrolling();
      } else {
        this.enableScrolling();
      }
    }
  },

  render() {
    const { open, mobile, showing, fixed } = this.state;

    const { nav, skin } = this.props;

    let headerClasses = {
      'is-showing': showing,
      'is-fixed': fixed
    };

    let toggleClasses = {
      'is-open': mobile && open,
      'is-closed': mobile && !open
    };

    return (
      <header {...classes(null, null, headerClasses)} ref='headerNav'>
        <div {...classes('brand')}>
          <div {...classes('container', 'brand')}>
            <div {...classes('brand-inner')}>
              <button {...classes('trigger', null, toggleClasses)} onClick={this.toggleNavigation}>
                Menu
              </button>
              <span {...classes('logo')}>
                <HeaderLogo id={skin} />
              </span>
            </div>

          </div>
        </div>
        <div {...classes('toggle', null, toggleClasses)}>
          <div {...classes('container', 'toggle')}>
            {nav && nav.items
              ? <PrimaryNav items={nav.items} active={nav.active} />
            :null}
            <MetaNav />
          </div>
        </div>
      </header>
    );
  }

});
