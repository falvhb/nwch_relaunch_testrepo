import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';
import Icon from 'components/icon';
import PrimaryNav from 'components/primary-nav';

const classes = new bem({
  name: 'header-nav',
  prefix: ''
});

export default React.createClass({

  displayName: 'HeaderNav',

  propTypes: {
    isClosed: React.PropTypes.bool,
    id: React.PropTypes.number
  },

  getInitialState() {
    return {
      fixed: false,
      slim: false,
      open: true
    };
  },

  lastScroll: 0,

  headerHeight: 150,

  navItems: [
    {
      href: '/',
      label: 'Start'
    },
    {
      href: '/schweiz',
      label: 'Schweiz'
    },
    {
      href: '/ausland',
      label: 'Ausland'
    },
    {
      href: '/wirtschaft',
      label: 'Wirtschaft'
    },
    {
      href: '/sport',
      label: 'Sport'
    },
    {
      href: '/panorama',
      label: 'Panorama'
    },
    {
      href: '/kultur',
      label: 'Kultur'
    },
    {
      href: '/blaulicht',
      label: 'Blaulicht'
    }
  ],

  domainVariations: {
    aaz: {
      href: '/aargau',
      label: 'Aargau',
      logo: 'az_AargauerZeitung.svg',
      logoMobile: 'az_Mobile.svg'
    },
    bz: {
      href: '/basel',
      label: 'Basel',
      logo: 'bz_Basel.svg',
      logoMobile: 'bz_Mobile.svg'
    },
    blz: {
      href: '/basel',
      label: 'Basel',
      logo: 'bz_Basellandschaftliche.svg',
      logoMobile: 'bz_Mobile.svg'
    },
    ot: {
      href: '/solothurn',
      label: 'Solothurn',
      logo: 'ot_OltnerTagblatt.svg',
      logoMobile: 'ot_Mobile.svg'
    },
    gtb: {
      href: '/solothurn',
      label: 'Solothurn',
      logo: 'az_GrenchnerTagblatt.svg',
      logoMobile: 'az_Mobile.svg'
    },
    soz: {
      href: '/solothurn',
      label: 'Solothurn',
      logo: 'az_SolothurnerZeitung.svg',
      logoMobile: 'az_Mobile.svg'
    },
    liz: {
      href: '/limmattal',
      label: 'Limmattal',
      logo: 'az_LimmattalerZeitung.svg',
      logoMobile: 'az_Mobile.svg'
    },
    btb: {
      href: '/aargau',
      label: 'Aargau',
      logo: 'az_BadenerTagblatt.svg',
      logoMobile: 'az_Mobile.svg'
    }
  },

  getHeaderHeight() {
    return React.findDOMNode(this.isMobile() ? this.refs.headerBrand : this.refs.headerNav).offsetHeight;
  },

  isMobile() {
    return this.getViewportWidth() <= this.breakpoint;
  },

  componentDidMount() {
    this.scrollHandler = _.throttle(this.checkScrollPosition, 150);
    document.addEventListener('resize', _.debounce(this.handleResize, 150));
    document.addEventListener('scroll', this.scrollHandler, 150);
    if (this.isMobile()) {
      this.setState({
        mobile: true,
        open: false
      });
    }
  },

  breakpoint: 900,

  getViewportWidth() {
    return Math.max(document.documentElement.clientWidth, window.innerWidth);
  },

  handleResize() {
    this.headerHeight = this.getHeaderHeight();
    if (this.isMobile()) {
      this.setState({
        mobile: true
      });
    }
  },

  fixNavigation() {
    this.setState({ fixed: true });
  },

  unfixNavigation() {
    this.setState({ fixed: false });
  },

  slimNavigation() {
    this.setState({ slim: true });
  },

  unslimNavigation() {
    this.setState({ slim: false });
  },

  openNavigation() {
    this.setState({ open: true });
  },

  closeNavigation() {
    this.setState({ open: false });
  },

  mobileScrollBehvaiour() {
    // when back at the top
    if (window.scrollY <= 0) {
      this.unfixNavigation();
    }

    // when scrolling down
    if (window.scrollY > this.lastScroll && this.state.fixed) {
      // and the nav isn't open
      if (!this.state.open) {
        this.unfixNavigation();
      }
    }

    // when scrolling up
    if (window.scrollY < this.lastScroll && !this.state.fixed) {
      this.fixNavigation();
    }
  },

  desktopScrollBehvaiour() {
    // when back at the top
    if (window.scrollY <= 0) {
      this.unfixNavigation();
    }

    // when scrolling down
    if (window.scrollY > this.lastScroll && this.state.fixed) {
      this.unfixNavigation();
    }

    // when scrolling below the header
    if (window.scrollY > this.headerHeight) {
      this.slimNavigation();
      this.closeNavigation();

      // scrolling back up
      if (window.scrollY < this.lastScroll && !this.state.fixed) {
        this.fixNavigation();
      }
    } else {
      // otherwise, always show full nav
      this.unslimNavigation();
      this.openNavigation();
    }

    // when scrolling down
    if (window.scrollY > this.lastScroll && this.state.fixed) {
      this.unfixNavigation();
      this.closeNavigation();
    }
  },

  checkScrollPosition() {
    if (this.isMobile()) {
      this.mobileScrollBehvaiour();
    } else {
      this.desktopScrollBehvaiour();
    }

    // update the last scroll position
    this.lastScroll = window.scrollY;
  },

  toggleNavigation() {
    this.setState({ open: !this.state.open });
  },

  mappedNavItems(items) {
    let { skin } = this.props;
    if (skin in this.domainVariations) {
      items.splice(1, 0, {
        href: this.domainVariations[skin].href,
        label: this.domainVariations[skin].label
      });
    }
    return items;
  },

  getActiveSection(path) {
    let segments = path.match(/\/(\w|-)+/g);
    return segments.length > 2 ? segments[0] : '/';
  },

  getLogoSource(type) {
    return '/__node__/__static__/client/images/logos/' + this.domainVariations[this.props.skin][type];
  },

  render() {
    const { path } = this.props;
    const { fixed, slim, open, mobile } = this.state;
    const navItems = this.navItems.slice();

    let headerClasses = {
      'is-fixed': fixed,
      'is-slim': slim,
      'is-mobile': mobile,
    };

    return (
      <header {...classes(null, 'main', headerClasses)} ref='headerNav'>
        <div {...classes('brand')} ref='headerBrand'>
          <div {...classes('container')}>
            <div {...classes('brand-wrap')}>
              <div {...classes('toggle-wrap')}>
                <button {...classes('trigger')} onClick={this.toggleNavigation}>
                  {open
                    ? <Icon id="close"/>
                    : <Icon id="menu"/>
                  }
                  <span>Menu</span>
                </button>
              </div>
              <a href="/" title="Startseite" {...classes('logo', [slim || mobile ? 'slim' : 'regular'])}>
                <img {...classes('img')} src={this.getLogoSource('logo')} />
              </a>
            </div>
          </div>
        </div>
        <div {...classes('toggle', null, [this.state.open ? 'is-open' : 'is-closed'])}>
          <div {...classes('container')}>
            <PrimaryNav items={this.mappedNavItems(navItems)} active={this.getActiveSection(path)} />
          </div>
        </div>
      </header>
    );
  }

});
