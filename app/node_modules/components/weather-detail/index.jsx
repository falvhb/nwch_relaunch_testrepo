import React from 'react';
import BEM from 'react-bem-helper';
import _ from 'lodash';
// import axios from 'axios';

import SectionHeader from 'components/section-header';
import Container from 'components/container';
import WeatherForecast from 'components/weather-forecast';

const classes = new BEM('weather-detail');

export default React.createClass({

  displayName: 'WeatherDetail',

  propTypes: {
    cities: React.PropTypes.array.isRequired,
    forecast: React.PropTypes.object.isRequired
  },

  getInitialState() {
    return this.state = {
      // @TODO: make sure code works when this.props.forecast is not there
      // Hack to make it temporarily work while integrating into page
      // styleguide only: this.props.forecast
      city: 'Brugg', // change to id
      id: '1',
      forecast: this.props.forecast
    };
  },

  onSelectCity(event) {
    var id = event.target.value;
    this.selectCity(id);

    // axios.get('http://api-azdev.lovelysystems.com/api/v1/weather/3h?city=' + id, (data) => {
    //   this.setState({
    //     forecast: data.forecast
    //   });
    // }).catch((error) => {
    //   console.error(error);
    // });

  },

  selectCity(id) {
    this.setState({id: id});
  },

  getCityByName(name) {
    let cities = this.props.cities;
    let result = _.find(cities, function(city) {
      return city.name === name;
    });
    return result;
  },

  renderForecast(city) {

    if (!city) {
      return '';
    }

    var { Symb, Force, Temp } = this.props.forecast.days[0];
    var { prog } = this.props.forecast.forecast;

    return (

      <div {...classes()}>
        <div  {...classes('forecast')}>
          <WeatherForecast
            id={Symb}
            minTemperature={Force}
            maxTemperature={Temp}
          />
        </div>
        <div {...classes('text')}>
          {prog}
        </div>
      </div>
    );
  },

  render() {

    // @TODO: make sure code works when this.props.cities is not there
    let cities = this.props.cities || [];

    let options = cities.map((item, index) => {
      return <option value={item.id} key={index}>{item.name}</option>;
    });

    let selectedCity = this.getCityByName(this.state.city);
    let forecast = this.renderForecast(selectedCity);

    return (
      <Container>
        <SectionHeader title='Gemeinde Ã¤ndern:' />
        <div {...classes('dropdown')}>
          <select
            {...classes('select')}
            onChange={this.onSelectCity}
            value={this.state.id}
          >
            {options}
          </select>
        </div>
        {forecast}
      </Container>
    );
  }
});
