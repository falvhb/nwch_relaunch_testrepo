import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import Teaser from 'components/teaser';

import { getViewportWidth } from 'helpers';
import { getTeaserResponsiveState } from 'helpers/teaser';

const classes = new bem({
  name: 'teaser-switch-view',
  prefix: ''
});

export default React.createClass({

  displayName: 'TeaserSwitchView',

  resizeEvent: null,

  propTypes: {
    config: React.PropTypes.object.isRequired,
    teaser: React.PropTypes.object.isRequired
  },

  getInitialState() {
    return {
      view: 'small'
    };
  },

  handleResize() {
    this.setState({
      view: getViewportWidth() <= this.props.config.breakpoint
        ? 'small'
        : 'large'
    });
  },

  componentDidMount() {
    this.handleResize();
    this.resizeEvent = _.debounce(this.handleResize, 250);
    window.addEventListener('resize', this.resizeEvent);
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeEvent);
  },

  componentDidUpdate(prevProps, prevState) {
    let { view } = this.state;
    // if the view changes
    if (prevState.view !== view) {
      // update the teaser config for this view
      let state = getTeaserResponsiveState(this.props, this.state);
      this.setState(state);
    }
  },

  render() {

    const { teaser } = this.props;

    let newProps = getTeaserResponsiveState(this.props, this.state);

    let teaserProps = _.merge({}, teaser, newProps);

    return (
      <div {...classes()}>
        <Teaser {...teaserProps} />
      </div>
    );
  }

});
