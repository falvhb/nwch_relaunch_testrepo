import React from 'react';
import BEM from 'react-bem-helper';

import ResponsiveVideoMixin from 'mixins/responsive-video';

const classes = new BEM({
  name: 'expander',
  prefix: ''
});

// For styleguide only
const ExpandableItem = React.createClass({
  render() {
    return (
      <div {...classes('placeholder')}>Expandable Item</div>
    );
  }
});

export default React.createClass({

  displayName: 'Expander',

  propTypes: {
    item: React.PropTypes.object,
    onSetExpanderHeight: React.PropTypes.func,
    initialHeight: React.PropTypes.number
  },

  getDefaultProps() {
    // set property when component rendered in style guide
    return {
      onSetExpanderHeight: function() {},
      height: 0
    };
  },

  getInitialState() {
    return {
      height: this.props.initialHeight
    };
  },

  componentDidMount() {
    this.setHeight();
  },

  getPlayerHeight(width) {
    // return the height of the video player
    return ResponsiveVideoMixin.getVideoHeight(16 / 9, width, 35.8);
  },

  addToHeight(itemHeight) {
    var expander,
        height;

    expander = React.findDOMNode(this.refs.expander);
    height = expander.firstChild.offsetHeight + itemHeight;
    expander.style.height = height + 'px';

    // calculate the height of the video
    playerHeight = ResponsiveVideoMixin.getVideoHeight(16 / 9, expander.offsetWidth, 35.8);

    // calculate the height of the video library viewer
    height = Math.round(expander.firstChild.offsetHeight + playerHeight);

    // do not directly set style attributes. Instead use a state and set style in render method.
    this.setState({
      height: height
    });

    // add player height to original height
    this.addToHeight(playerHeight);
  },

  render() {
    var item;

    if (this.props.item) {
      item = this.props.item;
    } else {
      item = <ExpandableItem />;
    }

    return (

      <div {...classes(null, null)}>
        <div {...classes(null, 'inner')} ref={'expander'} style={{height: this.state.height + 'px'}}>
          {item}
        </div>
      </div>
    );
  }

});
