import React from 'react';
import BEM from 'react-bem-helper';

import ResponsiveVideoMixin from 'mixins/responsive-video';

const classes = new BEM({
  name: 'expander',
  prefix: ''
});

// For styleguide only
const ExpandableItem = React.createClass({
  render() {
    return (
      <div {...classes('placeholder')}>Expandable Item</div>
    );
  }
});

export default React.createClass({

  displayName: 'Expander',

  propTypes: {
    item: React.PropTypes.object,
    onSetExpandableHeight: React.PropTypes.func
  },

  getDefaultProps() {
    // set property when component rendered in style guide
    return {
      onSetExpandableHeight: () => {}
    };
  },

  componentDidMount() {
    this.setHeight();
  },

  getPlayerHeight(width) {
    // return the height of the video player
    return ResponsiveVideoMixin.getVideoHeight(16 / 9, width, 35.8);
  },

  addToHeight(itemHeight) {
    var expander,
        height;

    // add the item height to the current height
    expander = React.findDOMNode(this.refs.expander);
    height = expander.firstChild.offsetHeight + itemHeight;
    expander.style.height = height + 'px';

    // notify expandable of the expanders' new height
    this.props.onSetExpandableHeight(height);
  },

  setHeight() {
    var itemWidth = React.findDOMNode(this.refs.expander).offsetWidth;
    var playerHeight = this.getPlayerHeight(itemWidth);

    // add player height to original height
    this.addToHeight(playerHeight);
  },

  render() {
    var item;

    if (this.props.item) {
      item = this.props.item;
    } else {
      item = <ExpandableItem />;
    }

    return (
      <div {...classes(null, null)}>
        <div {...classes(null, 'inner')} ref={'expander'}>
          {item}
        </div>
      </div>
    );
  }

});
