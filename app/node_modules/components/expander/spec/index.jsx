/* eslint-disable no-unused-expressions, no-unused-vars */
/* global expect:true, assert:true, chai:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import Expander from 'components/expander';
import data from 'components/expander/.variations.json';

describe('Expander', () => {
  var reactElement,
    component,
    props;

  describe('renders', () => {
    var Child;

    beforeEach(() => {
      props = data[0].data;
      props.onAddExpanderHeight = sinon.spy();

      Child = 'div';
      props.item = <Child id="childA" className="childA">child A</Child>;

      reactElement = <Expander {...props} />;
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a DOM Component with a BEM class', () => {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'expander--inner');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a child', () => {
      var childInstance = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');
      expect(TestUtils.isDOMComponent(childInstance)).to.be.true;
    });

  });

  describe('notifies', () => {
    var Child;

    beforeEach(() => {
      props = data[0].data;
      props.onAddExpanderHeight = sinon.spy();

      Child = 'div';
      props.item = <Child id="childA" className="childA">child A</Child>;
    });

    it('when its height has been set', () => {
      Test(<Expander {...props} />)
        .element(() => {
          props.onAddExpanderHeight.should.have.been.called;
        });
    });

  });

  describe('adds', () => {
    var Child;

    beforeEach(() => {
      props = data[0].data;
      props.onAddExpanderHeight = sinon.spy();

      Child = 'div';
      props.item = <Child id="childA" className="childA">child A</Child>;

      reactElement = <Expander {...props} />;
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('the item\'s height to its original height and notifies of the new height', () => {
      var item = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      component.setHeight();

      expect(props.onAddExpanderHeight).to.have.been.calledTwice;
      expect(component.getDOMNode().firstChild.style.height).to.equal('36px');
    });

  });

  describe('gets', () => {
    var Child;

    beforeEach(() => {
      props = data[0].data;
      props.onAddExpanderHeight = sinon.spy();

      Child = 'div';
      props.item = <Child id="childA" className="childA">child A</Child>;

      reactElement = <Expander {...props} />;
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a player height of 92 for an expander width of 100', () => {
      var item = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      expect(Math.round(component.getPlayerHeight(100))).to.equal(92);
    });

    it('a player height of 35.8 for an expander width of 0', () => {
      var item = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      expect(component.getPlayerHeight(0)).to.equal(35.8);
    });

    it('a player height of 35.8 if expander\'s width is not set', () => {
      var item = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      expect(component.getPlayerHeight()).to.equal(35.8);
    });

  });

});
