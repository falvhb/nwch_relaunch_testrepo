/*global picturefill:true*/

import { isEqual } from 'lodash/lang';

import React from 'react';
import bem from 'react-bem-helper';

const classes = new bem({
  name: 'picture',
  prefix: ''
});

export default React.createClass({

  displayName: 'Picture',

  propTypes: {
    sources: React.PropTypes.array.isRequired,
    image: React.PropTypes.object.isRequired
  },

  getInitialState() {
    return {
      loading: true,
      failed: false
    };
  },

  componentDidMount() {
    this.addLoadingListeners();
  },

  componentDidUpdate(prevProps) {
    if (!isEqual(prevProps, this.props)) {
      this.refreshPictureFill();
    }
  },

  componentWillUnmount() {
    this.removeLoadingListeners();
  },

  addLoadingListeners() {
    React.findDOMNode(this.refs.img).addEventListener('load', this.handleLoad);
    React.findDOMNode(this.refs.img).addEventListener('error', this.handleError);
  },

  removeLoadingListeners() {
    React.findDOMNode(this.refs.img).removeEventListener('load', this.handleLoad);
    React.findDOMNode(this.refs.img).removeEventListener('error', this.handleError);
  },

  handleLoad() {
    this.removeLoadingListeners();
    this.setState({
      failed: false,
      loading: false
    });
  },

  handleError() {
    this.removeLoadingListeners();
    this.setState({
      loading: false
    });
  },

  refreshPictureFill() {
    if (picturefill && typeof picturefill === 'function') {
      picturefill({
        reevaluate: true,
        elements: [ React.findDOMNode(this.refs.img) ]
      });
    }
  },

  render() {

    const { sources, image } = this.props;

    const { loading, failed } = this.state;

    let statusClass = {
      'is-loading': loading,
      'is-loaded': !loading,
      'is-failed': failed
    };

    return (
      <picture {...classes(null, null, statusClass)} ref='picture'>
        {sources.map((source, index) =>
          <source key={index} {...classes('source')} {...source} />
        )}
        <img {...classes('source', 'img')} itemProp="contentUrl" ref='img' {...image} />
      </picture>
    );

  }

});
