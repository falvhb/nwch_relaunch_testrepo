import React from 'react';
import bem from 'react-bem-helper';

const classes = new bem({
  name: 'picture',
  prefix: ''
});

export default React.createClass({

  displayName: 'Picture',

  propTypes: {
    sources: React.PropTypes.array.isRequired,
    image: React.PropTypes.object.isRequired
  },

  // // getInitialState() {
  // //   // return {
  // //   //   mounted: false,
  // //   //   loading: true,
  // //   //   failed: false
  // //   // };
  // // },

  // componentDidMount() {
  //   // this.setState({ mounted: true });
  // },

  // componentWillUnmount() {
  //   // this.removeLoadingListeners();
  // },

  // removeLoadingListeners() {
  //   // React.findDOMNode(this.refs.img).removeEventListener('load', this.handleLoad);
  //   // React.findDOMNode(this.refs.img).removeEventListener('error', this.handleLoad);
  // },

  // handleLoad() {
  //   // this.removeLoadingListeners();
  //   // this.setState({
  //   //   failed: false,
  //   //   loading: false
  //   // });
  // },

  // componentWillUpdate() {
  //   // React.findDOMNode(this.refs.img).addEventListener('load', this.handleLoad);
  //   // React.findDOMNode(this.refs.img).addEventListener('error', this.handleError);
  // },

  // handleError() {
  //   // this.removeLoadingListeners();
  //   // this.setState({ loading: false });
  // },

  render() {

    const { sources, image } = this.props;

    // const { mounted, loading, failed } = this.state;

    // let statusClass = {
    //   'is-loading': loading && mounted,
    //   'is-loaded': !mounted || !loading && mounted,
    //   'is-failed': failed
    // };

    return (
      <picture {...classes()}>
        {sources.map((source, index) =>
          <source key={index} {...classes('img', 'source')} {...source} />
        )}
        <img {...classes('img', 'image')} itemProp="contentUrl" ref='img' {...image} />
      </picture>
    );

  }

});
