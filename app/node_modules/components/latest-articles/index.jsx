import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import Container from 'components/container';
import SectionHeader from 'components/section-header';
import TabbedNavigation from 'components/tabbed-navigation';
import LatestArticlesSection from 'components/latest-articles-section';

import { getViewportWidth } from 'helpers';

const classes = new bem({
  name: 'latest-articles',
  prefix: ''
});

const sections = [
  {
    id: 'latest',
    icon: 'bullet',
    title: 'Neueste',
    detailedLabel: 'Meldungen'
  },
  {
    id: 'popular',
    icon: 'views',
    title: 'Beliebste',
    detailedLabel: 'Meldungen'
  }
];

export default React.createClass({

  propTypes: {
    latest: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,
    popular: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,
    showingId: React.PropTypes.string
  },

  displayName: 'LatestArticles',

  breakpoint: 900,

  mobileCount: 5,

  desktopCount: 9,

  sliceArticles(data, count) {
    return data.slice(0, count);
  },

  initialShowingId() {
    return this.props.showingId || _.first(sections).id;
  },

  initialArticles() {
    return this.props[this.initialShowingId()];
  },

  getInitialState() {
    let shownArticles = this.sliceArticles(this.initialArticles(), this.mobileCount);
    return {
      showing: this.initialShowingId(),
      articles: shownArticles,
      loading: true
    };
  },

  componentDidMount() {
    if (getViewportWidth() > this.breakpoint) {
      let shownArticles = this.sliceArticles(this.initialArticles(), this.desktopCount);
      this.setState({
        loading: false,
        articles: shownArticles
      });
    } else {
      this.setState({ loading: false });
    }
  },

  showSection(id) {
    this.setState({ showing: id });
  },

  render() {

    let { showing, articles, loading } = this.state;

    return (
      <section {...classes(null, null, [ loading ? 'is-loading' : null])}>
        <Container>
          <SectionHeader title='Halten Sie sich auf dem Laufenden' />
          <TabbedNavigation
            tabs={sections}
            showing={showing}
            handleSelect={this.showSection}
          />
          <div {...classes('showing')}>
            <LatestArticlesSection items={articles} />
          </div>
        </Container>
      </section>
    );

  }

});
