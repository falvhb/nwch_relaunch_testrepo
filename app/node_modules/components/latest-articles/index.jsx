import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import Wrapper from './wrapper';
import Container from 'components/container';
import SectionHeader from 'components/section-header';
import TabbedNavigation from 'components/tabbed-navigation';
import LatestArticlesSection from 'components/latest-articles-section';

import { getViewportWidth } from 'helpers';

const classes = new bem({
  name: 'latest-articles',
  prefix: ''
});

const LatestArticles = React.createClass({

  propTypes: {
    title: React.PropTypes.string,
    sections: React.PropTypes.arrayOf(React.PropTypes.object).isRequired
  },

  displayName: 'LatestArticles',

  breakpoint: 900,

  itemCount: {
    mobile: 5,
    desktop: 9
  },

  getCurrentView() {
    return getViewportWidth() > this.breakpoint
      ? 'desktop'
      : 'mobile';
  },

  getArticlesForIndex(index, viewport) {
    let section = this.props.sections[index];
    let articles = section.teasers;
    let viewportType = viewport || this.getCurrentView();
    return articles.slice(0, this.itemCount[viewportType]);
  },

  showSection(index) {
    this.setState({
      showingIndex: index,
      articles: this.getArticlesForIndex(index),
    });
  },

  handleResize() {
    if (this.getCurrentView() !== this.state.view) {
      this.setState({
        articles: this.getArticlesForIndex(this.state.showingIndex),
        view: this.getCurrentView(),
        loading: false
      });
    } else if (this.state.loading) {
      this.setState({ loading: false });
    }
  },

  getInitialState() {
    let showingIndex = 0;
    let defaultViewport = 'mobile';
    // set initial DOM data
    return {
      showingIndex: showingIndex,
      articles: this.getArticlesForIndex(showingIndex, defaultViewport),
      loading: true,
      view: defaultViewport
    };
  },

  componentDidMount() {
    this.handleResize();
    this.resizeEvent = _.debounce(this.handleResize, 150);
    window.addEventListener('resize', this.resizeEvent);
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.resizeEvent);
  },

  render() {

    const { sections } = this.props;

    let { showingIndex, articles, loading } = this.state;

    return (
      <section {...classes(null, null, [ loading ? 'is-loading' : null])}>
        <Container>
          <SectionHeader title='Halten Sie sich auf dem Laufenden' />
          <TabbedNavigation
            tabs={sections}
            showingIndex={showingIndex}
            handleSelect={this.showSection}
          />
          <div {...classes('showing')}>
            <LatestArticlesSection items={articles} />
          </div>
        </Container>
      </section>
    );

  }

});

export default Wrapper(LatestArticles);
