/*eslint-disable no-unused-expressions, no-unused-vars, no-alert, no-console */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import { expect } from 'chai';

import PlayTime from 'components/play-time';
import data from 'components/play-time/.data';


describe('Play Time', function() {
  var reactElement;
  var component;
  var renderedComponent;

  beforeEach(function() {
    reactElement = <PlayTime {...data} />;
    component = TestUtils.renderIntoDocument(reactElement);
    renderedComponent = React.renderToString(React.createElement(PlayTime, data));
  });

  describe('renders', function() {
    it('a React Element', function() {
      expect(TestUtils.isElement(reactElement)).to.be.true;
    });

    it('a React Component', function() {
      expect(TestUtils.isCompositeComponentWithType(component, PlayTime)).to.be.true;
    });

    it('a DOM Component with a BEM class', function() {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'play-time');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a time in format mm:ss', () => {
      expect(renderedComponent).to.match(/[0-9]{2}:[0-9]{2}/);
    });

    it('a duration according to schema.org', () => {
      expect(renderedComponent).to.match(/<meta[^>]*itemprop="duration"[^>]*content="PT2M39S"/im);
    });

    it('no duration according to schema.org if duration is zero', () => {
      var emptyData = {duration: 0};
      reactElement = <PlayTime {...emptyData} />;
      component = TestUtils.renderIntoDocument(reactElement);
      renderedComponent = React.renderToString(React.createElement(PlayTime, emptyData));
      expect(renderedComponent).not.to.match(/<meta[^>]*itemprop="duration"/im);
    });
  });
});
