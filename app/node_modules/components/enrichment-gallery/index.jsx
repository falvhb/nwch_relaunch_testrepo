import React from 'react';
import bem from 'react-bem-helper';

import Wrapper from './wrapper';
import GalleryMixin from 'mixins/gallery';
import ResponsiveImage from 'components/responsive-image';
import Caption from 'components/caption';
import Icon from 'components/icon';

const classes = new bem({
  name: 'gallery',
  prefix: ''
});

const Gallery = React.createClass({

  mixins: [GalleryMixin],

  propTypes: {
    title: React.PropTypes.string,
    description: React.PropTypes.string,
    images: React.PropTypes.array.isRequired
  },

  getInitialState() {
    return {
      // No JS / server.js
      support: false,
      currentIndex: 0,
      fullscreen: false
    };
  },

  componentDidMount() {
    this.setState({
      support: true,
      fullscreenAvailable: window.document.fullscreenEnabled
        || window.document.webkitFullscreenEnabled
        || window.document.mozFullScreenEnabled
        || window.document.msFullscreenEnabled
    });
  },

  handlePrev() {
    this.navigateSlider(-1);
  },

  handleNext() {
    this.navigateSlider(+1);
  },

  handleFullscreen() {
    var image = React.findDOMNode(this.refs.currentImage);
    this.fullscreen(image);
  },

  fullscreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element.webkitRequestFullscreen) {
      element.webkitRequestFullscreen();
    } else if (element.mozRequestFullScreen) {
      element.mozRequestFullScreen();
    } else if (element.msRequestFullscreen) {
      element.msRequestFullscreen();
    }
  },

  render() {
    return (
      <Swipeable onSwipedLeft={this.handlePrev} onSwipedRight={this.handleNext}>
        <div {...classes()}>
          <figure itemScope itemType='http://schema.org/ImageObject' {...classes('image')}>
            <div {...classes('inner')}>
              <ResponsiveImage
                ratio='16x9'
                size='max'
                title={this.imageData('title')}
                alt={this.imageData('description')}
                src={this.imageData('url')} ref="currentImage" />

              <button type='button' onClick={this.handlePrev} {...classes('button', 'prev')}>
                <Icon id='prev' />
              </button>
              <button type='button' onClick={this.handleNext} {...classes('button', 'next')}>
                <Icon id='next' />
              </button>
            </div>

            <div {...classes('slide-number')}>
              {this.state.currentIndex + 1} / {this.props.images.length}
              {this.state.support && this.state.fullscreenAvailable
                ? <button type='button' onClick={this.handleFullscreen} {...classes('fullscreen')}>
                    <Icon id='fullscreen' />
                  </button>
                : ''}
            </div>

            <Caption
              title={this.imageData('title')}
              description={this.imageData('description')}
              source={this.imageData('source')} />
          </figure>
        </div>
      </Swipeable>
    );
  }

});

export default Wrapper(Gallery);
