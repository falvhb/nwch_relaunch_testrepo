/*global Flickity:true*/
import React from 'react';
import bem from 'react-bem-helper';

import Wrapper from './wrapper';

import ResponsiveImage from 'components/responsive-image';
import Caption from 'components/caption';
import Icon from 'components/icon';

const classes = new bem({
  name: 'image-gallery',
  prefix: ''
});

const ImageGallery = React.createClass({

  displayName: 'ImageGallery',

  propTypes: {
    title: React.PropTypes.string,
    description: React.PropTypes.string,
    images: React.PropTypes.array.isRequired
  },

  // Contains the instance of Flickity once initialized
  flickity: null,
  // The selector on which Flickity should be initialized
  flickityElement: '.init-slider',
  // The options with which Flickity should be initialized
  flickityOptions: {
    freeScroll: false,
    pageDots: false,
    prevNextButtons: false,
    setGallerySize: true,
    resize: false
  },

  getInitialState() {
    return {
      currentIndex: 0
    };
  },

  imageForIndex(index) {
    return this.props.images[index];
  },

  imageData(prop) {
    return this.imageForIndex(this.state.currentIndex)[prop];
  },

  initSlider() {
    // Break in case Flickity is not loaded for some reason
    // or if the slider is already initialized
    if (typeof Flickity !== 'undefined') {
      this.flickity = new Flickity(this.flickityElement, this.flickityOptions);
    }

    var flickity = this.flickity, self = this;

    this.flickity.on('cellSelect', function() {
      self.setState({
        currentIndex: flickity.selectedIndex
      });
    });
  },

  componentDidMount() {
    this.initSlider();
  },

  nextSlide() {
    this.flickity.next();
  },

  prevSlide() {
    this.flickity.previous();
  },

  // navigateSlider(x) {
  //   var current = this.state.currentIndex;
  //   var count = this.props.images.length - 1;
  //   var result = current + x, newIndex;
  //   if (result < 0) {
  //     newIndex = count;
  //   } else if (result > count) {
  //     newIndex = 0;
  //   } else {
  //     newIndex = result;
  //   }
  //   this.setState({ currentIndex: newIndex });
  // },

  render() {
    return (
      <div {...classes()}>
        <div {...classes('nav')}>
          <button type='button' onClick={this.prevSlide} {...classes('button', 'prev')}>
            <Icon id='prev' />
          </button>
          <button type='button' onClick={this.nextSlide} {...classes('button', 'next')}>
            <Icon id='next' />
          </button>
          <div {...classes('slide-number')}>
            {this.state.currentIndex + 1} / {this.props.images.length}
            <button type='button' onClick={this.handleFullscreen} {...classes('fullscreen')}>
              <Icon id='fullscreen' />
            </button>
          </div>
        </div>
        <div {...classes('grid', null, 'init-slider')}>
        {this.props.images.map((image, index) =>
          <div {...classes('item')} key={index}>
            <figure itemScope itemType='http://schema.org/ImageObject' {...classes('image')} key={index}>
              <ResponsiveImage
                ratio='4x3'
                size='max'
                title={image.title}
                alt={image.description}
                src={image.url}
                defer={true} />
              <Caption
                title={image.title}
                description={image.description}
                source={image.source} />
            </figure>
          </div>
        )}
        </div>
      </div>
    );
  }

});

export default Wrapper(ImageGallery);
