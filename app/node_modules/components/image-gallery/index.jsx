/*global Flickity:true*/
import React from 'react';
import bem from 'react-bem-helper';

import Wrapper from './wrapper';

import ImageAsset from 'components/image-asset';
import Icon from 'components/icon';

const classes = new bem({
  name: 'image-gallery',
  prefix: ''
});

let flickityId = 0;

const ImageGallery = React.createClass({

  displayName: 'ImageGallery',

  propTypes: {
    title: React.PropTypes.string,
    description: React.PropTypes.string,
    images: React.PropTypes.arrayOf(React.PropTypes.object).isRequired
  },

  // Contains the instance of Flickity once initialized
  flickity: null,
  // The selector on which Flickity should be initialized
  flickityElement: '.init-slider',
  // The options with which Flickity should be initialized
  flickityOptions: {
    accessibility: true,
    freeScroll: false,
    pageDots: false,
    prevNextButtons: false,
    setGallerySize: true,
    resize: false,
    lazyLoad: 3
  },

  getInitialState() {
    return {
      currentIndex: 0,
      loadIndex: 0,
      loading: true,
      atFirstSlide: true,
      atLastSlide: false
    };
  },

  initSlider() {
    // Break in case Flickity is not loaded for some reason
    if (typeof Flickity === 'undefined') {
      return;
    }

    var self = this;
    var element = this.refs.imageGalleryElement.getDOMNode();

    this.flickity = new Flickity(element.querySelector(this.flickityElement), this.flickityOptions);
    setTimeout(function() {
      self.setState({ loading: false });
    }, 1000);

    this.flickity.on('cellSelect', function() {
      var current = self.flickity.selectedIndex;
      // self.updateHistory(current);
      self.setState({
        currentIndex: current,
        atFirstSlide: current === 0,
        atLastSlide: current === (self.flickity.cells.length - 1)
      });
    });
  },

  componentDidMount() {
    this.flickityId = ++flickityId;
    this.initSlider();
  },

  componentWillUnmountMount() {
    this.flickity.destroy();
  },

  nextSlide() {
    this.flickity.next();
  },

  prevSlide() {
    this.flickity.previous();
  },

  updateHistory(index) {
    history.replaceState(null, document.title, '?slider'+this.flickityId+'='+index);
  },

  toggleFullscreen() {
    this.setState({ fullscreen: !this.state.fullscreen });
    this.refs.slider.getDOMNode().focus();
  },

  render() {

    var { loadIndex } = this.state;
    var { images } = this.props;

    var count = images.length;

    // assume starting at first slide
    var nonLazyIndexes = [loadIndex, loadIndex + 1, loadIndex + 2];

    // starting at the last slide?
    if (loadIndex === (count - 1)) {
      nonLazyIndexes = [count - 3, count - 2, count -1];
    } else if (loadIndex !== 0) {
      nonLazyIndexes = [loadIndex - 1, loadIndex, loadIndex + 1];
    }

    return (
      <div ref='imageGalleryElement'
        className={'image-gallery'
          + (this.state.loading ? ' is-gallery-loading' : '')
          + (this.state.fullscreen ? ' is-fullscreen' : '')
        }>
        <nav {...classes('nav')}>
          <button type='button' onClick={this.prevSlide} {...classes('button', 'prev', (this.state.atFirstSlide ? 'is-hidden' : null))}>
            <Icon id='prev' />
          </button>
          <button type='button' onClick={this.nextSlide} {...classes('button', 'next', (this.state.atLastSlide ? 'is-hidden' : null))}>
            <Icon id='next' />
          </button>
          <div {...classes('nav-bar')}>
            <span {...classes('slide-number')}>{this.state.currentIndex + 1} / {count}</span>
            {/*<button type='button' onClick={this.handleFullscreen} {...classes('fullscreen')}>
              <Icon id='fullscreen' />
            </button>*/}
          </div>
        </nav>
        <div ref='slider' {...classes('grid', null, 'init-slider')}>
        {images.map((image, index) =>
          <div {...classes('item')} key={index}>
            <ImageAsset
              asset={image}
              size='max'
              letterbox={true}
              ratio='16x9'
              lazyload={(
                nonLazyIndexes.indexOf(index) > -1
                  ? false
                  : true
              )}
            />
          </div>
        )}
        </div>
      </div>
    );
  }

});

export default Wrapper(ImageGallery);
