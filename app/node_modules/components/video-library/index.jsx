import React from 'react';
import bem from 'react-bem-helper';

import Container from 'components/container';
import VideoLibraryHeader from 'components/video-library-header';
import VideoLibraryList from 'components/video-library-list';
import { getScript } from 'helpers';
import KalturaAPIProxy from 'higher-order/kaltura-api-proxy';

var libraryIncluded = false;

const classes = new bem({
  name: 'video-library',
  prefix: ''
});

const VideoLibrary = React.createClass({

  displayName: 'VideoLibrary',

  statics: {
    loadKalturaClient: function() {
      if (libraryIncluded) {
        return;
      }

      // @TODO: maybe use promise based script loader later on
      getScript('/client/scripts/vendor/KalturaClient.min.js', () => {
        libraryIncluded = true;
      });
    }
  },

  propTypes: {
    initialVideos: React.PropTypes.arrayOf(React.PropTypes.object),
    categoryId: React.PropTypes.string.isRequired,
    ks: React.PropTypes.string.isRequired
  },

  getInitialState() {
    var initialVideos = this.props.initialVideos || [];
    return {
      searchText: '',
      selectedVideo: null,
      videos: initialVideos,
      skipGetVideos: true
    };
  },

  // alter states
  changeSearchText() {
    this.setState({searchText: event.target.value});
  },

  selectVideo(videoID) {
    this.setState({selectedVideo: videoID});
  },

  deselectVideo() {
    this.setState({selectedVideo: null});
  },

  toggleVideo(videoID) {
    if (this.state.selectedVideo === videoID) {
      this.deselectVideo();
    } else {
      this.selectVideo(videoID);
    }
  },

  setVideos(videos) {
    // console.log('videos: ', videos);
    this.setState({
      videos: videos,
      skipGetVideos: true
    });
  },

  search() {
    this.setState({
      skipGetVideos: false
    });
  },

  componentDidMount() {
    VideoLibrary.loadKalturaClient();
  },

  render() {
    var list, header, proxy;

    list = (
      <VideoLibraryList
        videos={this.state.videos}
        selectedVideo={this.state.selectedVideo}
        playerID={this.props.playerID}
        accountID={this.props.accountID}
        onToggleVideo={this.toggleVideo}
      />
    );
    header = (
      <VideoLibraryHeader
        searchText={this.state.searchText}
        changeSearchText={this.changeSearchText}
      />
    );
    proxy = (
      <KalturaAPIProxy
        format={1}
        pageSize={25}
        mediaTypeEqual={1}
        component={list}
        onSetVideos={this.setVideos}
        // Do not load videos using KalturaAPIProxy when initial videos are set on mounting of the embedding component
        skipGetVideos={this.state.skipGetVideos}
        searchText={this.state.searchText}
      />
    );

    return (
      <div {...classes()}>
        <Container>
          {header}
          <a onClick={this.search}>suchen</a>

          {proxy}
        </Container>
      </div>
    );
  }

});

export default VideoLibrary;
