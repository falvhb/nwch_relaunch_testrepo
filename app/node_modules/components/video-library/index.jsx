import React from 'react';
import BEM from 'react-bem-helper';

import Container from 'components/container';
import VideoLibraryHeader from 'components/video-library-header';
import VideoLibraryList from 'components/video-library-list';

import { getScript } from 'helpers';
import KalturaAPI from 'helpers/kaltura-api';

import Tracking from 'mixins/tracking';

var libraryIncluded = false;

const classes = new BEM({
  name: 'video-library',
  prefix: ''
});

const VideoLibrary = React.createClass({

  displayName: 'VideoLibrary',

  mixins: [Tracking],

  propTypes: {
    site: React.PropTypes.string.isRequired,
    videoAPIHost: React.PropTypes.string.isRequired,
    accountID: React.PropTypes.string.isRequired,
    playerID: React.PropTypes.string.isRequired,
    playerWithoutAdsID: React.PropTypes.string,
    categoryId: React.PropTypes.string.isRequired,
    initialVideos: React.PropTypes.arrayOf(React.PropTypes.object),
    initialTotalCount: React.PropTypes.number.isRequired,
    pageSize: React.PropTypes.number.isRequired
  },

  statics: {
    loadKalturaClient: function() {
      if (libraryIncluded) {
        return;
      }

      getScript('/client/scripts/vendor/KalturaClient.min.js').then( () => {
        libraryIncluded = true;
      });
    },
    // loading statuses
    IS_LOADED: 0,
    IS_LOADING: 1,
    LOADING_FAILED: -1
  },


  getInitialState() {
    var initialVideos = this.props.initialVideos || [];
    return {
      selectedVideo: null,
      videos: initialVideos,
      videoSource: null,
      totalCount: this.props.initialTotalCount,
      loadingStatus: VideoLibrary.IS_LOADED,
      searchText: '',
      pageIndex: 1,
      pageSize: this.props.pageSize,
      categoriesIdsMatchAnd: this.props.categoryId
    };
  },

  componentDidMount() {
    VideoLibrary.loadKalturaClient();
  },

  componentDidUpdate(prevProps, prevState) {
    // load videos if page has been switched
    if (prevState.pageIndex !== this.state.pageIndex) {
      this.loadVideos();
    }

    // load source if video has been selected
    if (prevState.selectedVideo !== this.state.selectedVideo) {
      this.loadSource();
    }
  },

  changeSearchText(value) {
    this.setState({
      searchText: value
    });
  },

  selectVideo(videoID) {
    this.setState({selectedVideo: videoID});

    this.track({
      event: 'selectVideo',
      id: videoID
    });
  },

  deselectVideo() {
    this.setState({selectedVideo: null});

    this.track({
      event: 'deselectVideo',
      id: this.state.selectedVideo
    });
  },

  toggleVideo(videoID) {
    if (this.state.selectedVideo === videoID) {
      this.deselectVideo();
    } else {
      this.selectVideo(videoID);
    }
  },

  // removes unwanted elements at the end of the array and adds new items
  // to array at the end
  addVideoPage(videos) {
    var updatedVideos = this.state.videos;
    var start = (this.state.pageIndex-1) * this.props.pageSize;
    updatedVideos = updatedVideos.slice(0, start);
    updatedVideos = updatedVideos.concat(videos);

    return updatedVideos;
  },

  setVideos(videos) {
    var updatedVideos = this.addVideoPage(videos);
    this.setState({
      videos: updatedVideos
    });
  },

  search() {
    // reset paging when doing keyword search
    this.setState({
      pageIndex: 1
    });

    this.loadVideos();

    this.track({
      event: 'search',
      id: this.state.searchText
    });
  },

  increasePageIndex() {
    var nextIndex = this.state.pageIndex + 1;
    this.setState({
      pageIndex: nextIndex
    });

    this.track({
      event: 'nextPage',
      id: this.state.searchText,
      index: this.state.pageIndex
    });
  },

  loadVideos() {
    this.setState({
      loadingStatus: VideoLibrary.IS_LOADING
    });

    var kalturaAPI = new KalturaAPI({
      ssl: false,
      domain: this.props.videoAPIHost,
      path: '/__kaltura_api_proxy__',
      service: 'baseEntry',
      action: 'list',
      format: 1,
      orderByKey: 'createdAt',
      orderDescending: true,
      pageIndex: this.state.pageIndex,
      pageSize: this.state.pageSize,
      filters: {
        mediaTypeEqual: 1,
        freeText: this.state.searchText,
        categoriesIdsMatchAnd: this.state.categoriesIdsMatchAnd
      }
    });

    // load videos using promises
    kalturaAPI.getData().then((response) => {
      var videos = response.data.objects;
      var totalCount = response.data.totalCount;

      this.setVideos(videos);
      this.setState({
        loadingStatus: VideoLibrary.IS_LOADED,
        totalCount: totalCount
      });
    }).catch(() => {
      this.setState({
        loadingStatus: VideoLibrary.LOADING_FAILED
      });
    });
  },

  extractSource(kalturaResponse) {
    let pattern,
        metadata,
        source,
        sourceParsed;

    pattern = /<Source>([^>]*)<\/Source>/gi;
    if (kalturaResponse.data.objects.length > 1) {
      throw new Error('Entry has more than 1 metadata objects assigned.');
    }
    try {
      metadata = kalturaResponse.data.objects[0].xml;
      source = pattern.exec(metadata);
      sourceParsed = (source[1] ? source[1] : null);
      return sourceParsed;
    } catch(error) {
      throw new Error('Could not extract field source from Kaltura metadata object.');
    }
  },

  loadSource() {
    var kalturaAPI = new KalturaAPI({
      ssl: false,
      domain: this.props.videoAPIHost,
      path: '/__kaltura_api_proxy__',
      service: 'metadata_metadata',
      action: 'list',
      format: 1,
      filters: {
        objectIdEqual: this.state.selectedVideo
      }
    });

    // load metadata and extract source
    kalturaAPI.getData().then((response) => {
      let sourceParsed = this.extractSource(response);
      this.setState({
        videoSource: sourceParsed
      });
    }).catch(() => {
      this.setState({
        videoSource: null
      });
    });
  },

  render() {
    var loadingClass =  {
      'is-loading': this.state.loadingStatus === VideoLibrary.IS_LOADING,
      'is-failed': this.state.loadingStatus === VideoLibrary.LOADING_FAILED
    };

    return (
      <div {...classes(null, null, loadingClass)}>
        <Container>
          <VideoLibraryHeader
            onChangeSearchText={this.changeSearchText}
            onSearch={this.search}
          />
        </Container>
        <VideoLibraryList
          videos={this.state.videos}
          videoSource={this.state.videoSource}
          totalCount={this.state.totalCount}
          selectedVideo={this.state.selectedVideo}
          playerID={this.props.playerID}
          accountID={this.props.accountID}
          onToggleVideo={this.toggleVideo}
          onNextPage={this.increasePageIndex}
          loadingStatus={this.state.loadingStatus}
          />
      </div>
    );
  }

});

export default VideoLibrary;
