/* global KalturaConfiguration: true, KalturaBaseEntryFilter: true, KalturaClient: true */

import React from 'react';

import Container from 'components/container';
import VideoLibraryHeader from 'components/video-library-header';
import VideoLibraryList from 'components/video-library-list';
import { getScript } from 'helpers';

var libraryIncluded = false;

const VideoLibrary = React.createClass({

  displayName: 'VideoLibrary',

  statics: {
    loadKalturaClient: function() {
      if (libraryIncluded) {
        return;
      }

      // @TODO: maybe use promise based script loader later on
      getScript('/client/scripts/vendor/KalturaClient.min.js', () => {
        libraryIncluded = true;
      });
    }
  },

  propTypes: {
    initialVideos: React.PropTypes.arrayOf(React.PropTypes.object),
    categoryId: React.PropTypes.string.isRequired,
    ks: React.PropTypes.string.isRequired
  },

  getInitialState() {
    var initialVideos = this.props.initialVideos || [];
    return {
      searchText: '',
      selectedVideo: null,
      videos: initialVideos
    };
  },

  // alter states
  changeSearchText() {
    this.setState({searchText: event.target.value});
  },

  selectVideo(videoID) {
    this.setState({selectedVideo: videoID});
  },

  deselectVideo() {
    this.setState({selectedVideo: null});
  },

  toggleVideo(videoID) {
    if (this.state.selectedVideo === videoID) {
      this.deselectVideo();
    } else {
      this.selectVideo(videoID);
    }
  },

  getKalturaSession() {
    /*var _self = this;
    var setKS = function(data) {
      _self.setState({
          kaltura: {
            ks: data[0]
          }
      });
    };

    jQuery.getJSON('http://yoleidoo.com/az/kaltura-code-samples/az/player%20embedding/getKS.php', function( data ) {
      setKS(data);  //implement this on your production server, make sure you use a user with restricted rights
                    //this link is for development purposed only. The KS generated grants admin rights.
    });*/
  },

  getKalturaVideosByNameAndCategory() {
    var _self = this;
    var getKalturaVideos = function () {
      // get videos using Kaltura Client Library API
      var partnerId =1719221;
      var config = new KalturaConfiguration(partnerId);
      config.serviceUrl = "http://www.kaltura.com/";
      var client = new KalturaClient(config);
      client.ks = _self.props.ks;
      var filter = new KalturaBaseEntryFilter();
      filter.categoriesIdsMatchOr = _self.props.categoryId;//21939571: ZüriNews
      //filter.categoryAncestorIdIn = _self.props.categoryId;//21939571: ZüriNews
      filter.freeText = _self.state.searchText+'*';
      filter.orderBy = '-createdAt';//KalturaBaseEntryOrderBy.CREATED_AT_ASC;
      //var filter.typeEqual = KalturaEntryType.MEDIA_CLIP;
      var pager = null;

      // load media entries
      var mediaDataLoaded = function (success, results) {
        if (!success) {
          //console.log('ERROR: '+results);
        }

        if (results.code && results.message) {
          //console.log(results.objects);
          //console.log('ERROR: '+results.message);
        }

        // set loaded data to component's state
        if (_self.isMounted()) {
          _self.setState({
            videos: results.objects
          });
        }
      };
      client.baseEntry.listAction(mediaDataLoaded, filter, pager);

    };
    getKalturaVideos();
  },

  search() {
    if (this.props.ks) {
      this.setState({
        videos: null
      });//remove videos to render "loading spinner"
      this.getKalturaVideosByNameAndCategory();
    }
  },

  componentDidMount() {
    if (!this.props.ks) {
      //this.getKalturaSession();
    }
    // @TODO:@Richard: Line below doesn't work. Throws an error. VideoLibrary is not defined.
    VideoLibrary.loadKalturaClient();
  },

  componentWillUpdate() {
    //console.log('componentWillUpdate: nextState: ', nextState);
  },

  render() {
    return (
      <Container>
        <VideoLibraryHeader
          searchText={this.state.searchText}
          changeSearchText={this.changeSearchText}
        />
        <a onClick={this.search}>suchen</a>

        <VideoLibraryList
          videos={this.state.videos}
          selectedVideo={this.state.selectedVideo}
          playerID={this.props.playerID}
          accountID={this.props.accountID}
          onToggleVideo={this.toggleVideo}
        />
      </Container>
    );
  }

});

export default VideoLibrary;
