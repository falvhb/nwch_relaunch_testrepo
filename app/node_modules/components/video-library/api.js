/* eslint-disable no-console */
var KalturaAPI = require('helpers/video/kaltura-api.jsx');

var loadVideos = function(req) {

  // tell the api that one more async request goes in line
  req.api._startApiCall();

  // load videos
  var kaltura = new KalturaAPI({
    ssl: false,
    domain: req.api._data.domain.data.properties.domain_name,
    // domain: 'www.aargauerzeitung.ch',
    path: '/__kaltura_api_proxy__',
    service: 'baseEntry',
    action: 'list',
    format: 1,
    orderByKey: 'createdAt',
    orderDescending: true,
    pageIndex: 1,
    pageSize: 12,
    filters: {
      mediaTypeEqual: 1,
      freeText: '',
      categoriesIdsMatchAnd: req.api._data.domain.data.properties.kaltura_mediathek_category_id
      // categoriesIdsMatchAnd: 23690341
    }
  });

  kaltura.getData().then(function(response) {
    req.api._data.videos = {};

    // set data according to the schema of the components required props.
    req.api._data.videos.initialVideos = response.data.objects;
    req.api._data.videos.initialTotalCount = response.data.totalCount;

    // get the selected video from the variation parameter
    if (req.params.variation && req.params.variation !== 'all') {
      req.api._data.videos.initialSelectedVideo = req.params.variation;
    }

    // tell the api that one request has been successfully completed
    req.api._endApiCall();
  }).catch(function() {
    console.error('KalturaAPI Error: Could not load videos from Kaltura: ', kaltura.getURL(), ' in ', __filename);

    // tell the api that one request has been successfully completed
    req.api._endApiCall();
  });
};

var loadSource = function(req) {

  // load metadata and extract source
  if (req.params.variation && req.params.variation !== 'all') {

    // tell the api that one more async request goes in line
    req.api._startApiCall();

    var kalturaAPI = new KalturaAPI({
      ssl: false,
      domain: req.api._data.domain.data.properties.domain_name,
      path: '/__kaltura_api_proxy__',
      service: 'metadata_metadata',
      action: 'list',
      format: 1,
      filters: {
        objectIdEqual: req.params.variation
      }
    });

    kalturaAPI.getData().then((response) => {

      // set data according to the schema of the components required props.
      // @TODO: use helper extractSource (currently in VideoLibrary)
      req.api._data.initialVideoSource = response.data.objects[0].xml;

      // tell the api that one request has been successfully completed
      req.api._endApiCall();
    }).catch(() => {
      console.error('KalturaAPI Error: Could not load source from Kaltura: ', kaltura.getURL(), ' in ', __filename);

      // tell the api that one request has been successfully completed
      req.api._endApiCall();
    });
  }
};

module.exports = function(req) {

  loadVideos(req);

  loadSource(req);

  // signal that we need to wait for the API to finish the request
  return true;
};
