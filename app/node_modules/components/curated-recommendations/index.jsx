/*global Flickity:true*/
import React from 'react';
import bem from 'react-bem-helper';
import _ from 'lodash';

import Teaser from 'components/teaser';

const classes = new bem({
  name: 'curated-recommendations',
  prefix: ''
});

export default React.createClass({

  // Breakpoint under which Flickity should be initialized
  breakpoint: 640,
  // Contains the instance of Flickity once initialized
  flickity: null,
  // The selector on which Flickity should be initialized
  flickityElement: '.curated-recommendations__wrapper--multiple',
  // The options with which Flickity should be initialized
  flickityOptions: {
    freeScroll: false,
    prevNextButtons: false,
    pageDots: false
  },

  propTypes: {
    author: React.PropTypes.string,
    teasers: React.PropTypes.array.isRequired
  },

  getInitialState() {
    return {
      // No JS / server.js
      support: false,
      // Initiale state is not mobile
      mobile: false
    };
  },

  getDefaultProps() {
    return {
      author: 'der autor'
    };
  },

  // Return the viewport width
  getViewportWidth() {
    return Math.max(document.documentElement.clientWidth, window.innerWidth);
  },

  // Method called when the window gets resized; redefines the `mobile` state
  handleResize() {
    this.setState({
      mobile: this.getViewportWidth() <= this.breakpoint
    });
  },

  componentDidMount() {
    window.addEventListener('resize', _.debounce(this.handleResize, 250));

    // Redefine the `mobile` state
    this.handleResize();

    // Redefine the `support` state
    this.setState({
      support: true
    });

    if (this.state.mobile && this.state.support) {
      this.initSlider();
    }
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
    this.destroySlider();
  },

  // Initialize Flickity
  initSlider() {
    // Break in case Flickity is not loaded for some reason
    if (typeof Flickity === 'undefined') {
      return false;
    }

    this.flickity = new Flickity(this.flickityElement, this.flickityOptions);
  },

  // Remove Flickity
  destroySlider() {
    if (typeof this.flickity.destroy === 'function') {
      this.flickity.destroy();
    }
  },

  componentDidUpdate() {
    if (this.state.mobile && this.state.support) {
      this.initSlider();
    } else if (this.flickity !== null) {
      this.destroySlider();
    }
  },

  render() {
    var wrapperModifier = this.props.teasers.length > 1
        ? 'multiple'
        : null;

    var innerModifier = null;

    if (this.props.teasers.length === 2) {
      innerModifier = 'half';
    } else if (this.props.teasers.length === 3) {
      innerModifier = 'third';
    }

    return (
      <div {...classes()}>
        <h3 {...classes('title')}>{this.props.author} emfpielth</h3>
        <div {...classes('wrapper', wrapperModifier)}>
          {this.props.teasers.map((teaser, index) =>
            <div {...classes('inner', innerModifier)}>
              <Teaser {...teaser} modifier='light-boxed' key={index} />
            </div>
          )}
        </div>
      </div>
    );
  }

});
