import React from 'react';
import _ from 'lodash';
import bem from 'react-bem-helper';

import Wrapper from './wrapper';

import Teaser from 'components/teaser';
import Alert from 'components/alert';
import Button from 'components/button';
import TopicPagination from 'components/topic-pagination';
import getTopicTeasers from 'helpers/get-topic-teasers';

const classes = new bem({
  name: 'topic-body',
  prefix: ''
});

const TopicBody = React.createClass({

  displayName: 'TopicBody',

  propTypes: {
    topic: React.PropTypes.string.isRequired,
    articles: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,
    page: React.PropTypes.number.isRequired,
    total: React.PropTypes.number.isRequired
  },

  perPage: parseInt(process.env.PAGINATED),

  getInitialState() {
    return {
      infiniteLoad: false
    };
  },

  loadMore() {
    this.setState({ loading: true });
    var nextPage = (this.state.page || this.props.page) + 1;
    this.getFromApi(this.props.topic, nextPage);
  },

  componentDidMount() {
    this.setState({ infiniteLoad: true });
  },

  getFromApi(topic, page) {
    var self = this;
    var xhr = new XMLHttpRequest();
    var apiUrl = '/++ckey++ssi/__node__/__api__/thema/' + topic + '/seite/' + page;

    xhr.open('GET', apiUrl);
    xhr.responseType = 'json';

    xhr.onload = function() {
      var obj = {
        articles: xhr.response.data
      };
      self.setState({
        ajaxed: _.union(self.state.ajaxed, getTopicTeasers(obj).articles),
        page: (self.state.page || self.props.page) + 1,
        loading: false
      });
    };

    xhr.onerror = function() {
      this.setState({ loading: false });
    };

    xhr.send();
  },

  render() {

    var { topic, articles, total } = this.props;
    var { infiniteLoad, ajaxed, loading } = this.state;
    var page = this.state.page || this.props.page;
    var totalPages = Math.ceil(total / this.perPage);

    var results = ajaxed ? _.union(articles, ajaxed) : articles;

    return (
      <div {...classes()}>
        {results.length > 0

          ? <div {...classes('grid')}>
              {results.map((article, index) => {
                return (
                  <div {...classes('cell')} key={index}>
                    <Teaser key={index} {...article} />
                  </div>
                );
              })}
            </div>

          : <div {...classes('fallback')}>
              <Alert text='Leider konnten keine Resultate zu Ihrem Suchbegriff gefunden werden' modifier='centered' />
            </div>

        }

        {page < totalPages

          ? infiniteLoad

              ? <div {...classes('load-more', null, loading ? 'is-loading' : null)}>
                  <Button _event={this.loadMore} label='Mehr' />
                </div>
              : <TopicPagination topic={topic} perPage={this.perPage} current={page} total={total} />

          :null

        }
      </div>
    );

  }

});

export default Wrapper(TopicBody);
