import React from 'react';
import bem from 'react-bem-helper';

import VideoTeaser from 'components/video-teaser';
import VideoLibraryViewer from 'components/video-library-viewer';
import Expandable from 'components/expandable';
import Expander from 'components/expander';
import VideoLibrary from 'components/video-library';
import VideoLibraryFilter from 'components/video-library-filter';
import Alert from 'components/alert';

import Button from 'components/button';

const classes = new bem({
  name: 'video-library-list',
  prefix: ''
});

export default React.createClass({

  displayName: 'VideoLibraryList',

  propTypes: {
    accountID: React.PropTypes.string.isRequired,
    playerID: React.PropTypes.string.isRequired,
    videos: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,
    loadingStatus: React.PropTypes.number.isRequired,
    selectedVideo: React.PropTypes.string,
    onNextPage: React.PropTypes.function
  },

  mapTeaserItems(items) {
    return items.map((item, index) => {
      var selectedVideo = item.id;
      var listItem, listItemViewer, expander, expanded;
      var key = 'video' + index;

      // if video is selected render viewer in expander component.
      // otherwise just render the teaser in collapsed state.
      if (selectedVideo && selectedVideo===this.props.selectedVideo) {
        listItemViewer = (
          <VideoLibraryViewer
            {...this.props}
            videoID={item.id}
            name={item.name}
            description={item.description}
            thumbnailUrl={item.thumbnailUrl}
          />
        );
        expander = <Expander item={listItemViewer}/>;
      }
      expanded = this.props.selectedVideo===item.id ? true : false;
      listItem = (
        <Expandable expanded={expanded} key={key}>
          <VideoTeaser
            video={item}
            name={item.name}
            thumbnailUrl={item.thumbnailUrl}
            onToggleVideo={this.props.onToggleVideo}
          >
            {expander}
          </VideoTeaser>
        </Expandable>
      );

      return listItem;
    });
  },

  render() {
    var videoTeasers = this.props.videos;
    var errorMessage = null;
    var content;

    // show busy spinner while loading
    var loadingClasses = {
      'is-loading': this.props.loadingStatus === VideoLibrary.IS_LOADING,
      'is-failed': this.props.loadingStatus === VideoLibrary.LOADING_FAILED
    };
    // directly display error messages
    if (this.props.loadingStatus === VideoLibrary.LOADING_FAILED) {
      errorMessage = 'Leider schlug das Laden der Videos fehl.';
    }
    if (!videoTeasers.length) {
      errorMessage = 'Leider konnten keine Videos zu Ihrem Suchbegriff gefunden werden.';
    }

    if (!errorMessage) {
      content = this.mapTeaserItems(videoTeasers);
    } else {
      content = (
        <div {...classes('fallback')}>
          <Alert text={errorMessage} modifier='centered' />
        </div>
      );
    }

    return (
      <div {...classes('container', null, loadingClasses)}>
        <VideoLibraryFilter {...classes('filter')}/>
        {content}
        <div {...classes('showmore')}>
          <Button
            label="Mehr"
            _target="#"
            _event={this.props.onNextPage}
          />
        </div>
      </div>
    );
  }

});
