import React from 'react';
import bem from 'react-bem-helper';
import Icon from 'components/icon';
import { capitalize } from 'lodash/string';
import { get } from 'lodash/object';

const classes = new bem('ugc-header');

export default React.createClass({

  displayName: 'UGCHeader',

  propTypes: {
    icon: React.PropTypes.string,
    modifier: React.PropTypes.string,
    blocks: React.PropTypes.arrayOf(React.PropTypes.shape({
      text : React.PropTypes.string.isRequired,
      linkText : React.PropTypes.string.isRequired,
      image : React.PropTypes.string.isRequired,
      itemProp : React.PropTypes.string,
      imageRounded: React.PropTypes.bool
    }))
  },

  getDefaultProps() {
    return {
      icon: 'megaphone'
    };
  },

  // TODO: Split up?
  renderBlock(block, index) {
    var { text, linkText, link, image, itemProp } = block;
    var avatarModifiers = {
      [this.props.modifier]: !!this.props.modifier,
      rounded: block.imageRounded !== false // will fix with getdefaultprops + component
    };

    return (
      <span key={index} {...classes('block')} itemProp={ itemProp }>
        <span {...classes('text')} >
          { text ? text + "\u00a0" : null }
          <a href={link} {...classes('link')} itemProp="name">
             { linkText }
           </a>
           <img itemProp="image" src={ image } alt="" {...classes('avatar', avatarModifiers)} />
        </span>
      </span>
    )
  },

  render() {
    if (!this.props.blocks.length) {
      return null;
    }

    return (
      <div {...classes(null, this.props.modifier, 'type-detail')}>
        { this.props.icon ? <Icon id={this.props.icon} {...classes('icon')} /> : null }
        { this.props.blocks.map(this.renderBlock) }
      </div>
    );
  }
});
