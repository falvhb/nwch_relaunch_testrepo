import React from 'react';
import jQuery from 'jquery';
import _ from 'lodash';
import bem from 'react-bem-helper';
import Caption from 'components/caption';
import stripParagraphs from 'helpers/strip-paragraphs';

import ResponsiveVideoMixin from 'mixins/responsive-video';
import AutoPlayVideoMixin from 'mixins/auto-play-video';


const classes = new bem({
  name: 'video',
  prefix: ''
});

export default React.createClass({

  displayName: 'Video',

  mixins: [ResponsiveVideoMixin, AutoPlayVideoMixin],

  propTypes: {
    kalturaID: React.PropTypes.string.isRequired,
    accountID: React.PropTypes.string.isRequired,
    playerID: React.PropTypes.string.isRequired,
    playerWithoutAdsID: React.PropTypes.string.isRequired,
    trackingURL: React.PropTypes.string.isRequired,
    autoPlay: React.PropTypes.bool,
    meta: React.PropTypes.object.isRequired,
    caption: React.PropTypes.object,
    placement: React.PropTypes.string.isRequired
  },

  getDefaultProps() {
    return {
      autoPlay: false
    };
  },

  getInitialState() {
    var playerConfig = this.getPlayerConfiguration(this.props, true);

    return {
      playerConfig: playerConfig
    }
  },

  // setup players (using external Kaltura Media Player library)
  getPlayerLibraryURL(useAds) {
    var playerID = (useAds === true) ? this.props.playerID : this.props.playerWithoutAdsID;
    var accountID = this.props.accountID;

    return '//cdnapi.kaltura.com/p/'
                          + accountID
                          + '/sp/'
                          + accountID
                          + '00/embedIframeJs/uiconf_id/'
                          + playerID
                          + '/partner_id/'
                          + accountID;
  },

  loadPlayer() {
    // load both players using promises
    var self = this;
    jQuery.when(
      jQuery.getScript( this.getPlayerLibraryURL(true) ),
      // do not load player without ads if autoPlay is deactivated
      ((self.props.autoPlay) ? jQuery.getScript( this.getPlayerLibraryURL(false)) : true )
    ).done(function() {
      self.setupPlayer();
    });

  },

  setupPlayer() {
    var isAutoPlay = this.props.autoPlay;
    var isMobile = this.isMobile();
    // TODO: extract right values from props
    var playerConfig = this.getPlayerConfiguration(this.props, true);

    // setup players with ads
    // (without ads if autoPlay is activated
    // or if we are in non-mobile browsers)
    if (isAutoPlay && !isMobile) {
      // dont show advertising in autoplay videos
      var playerWithoutAdsConfig = {
        'uiconf_id': this.props.playerWithoutAdsID,
        'flashvars': {
          'EmbedPlayer.EnableFullscreen': false,
          'autoMute': true
        },
        // replace with player with ads on interaction
        'readyCallback': this.setupPlayerReplacement
      };

      playerConfig = this.getPlayerConfiguration(this.props, false);
      playerConfig = _.merge(playerConfig, playerWithoutAdsConfig);

    }

    // set the state for configuration object of the player
    this.setPlayerConfiguration(playerConfig);
    this.embedVideo(playerConfig);

    // make players fluid (responsive)
    this.setupFixedRatioOnResizingVideo();
  },

  embedVideo(settings) {
    kWidget.embed(settings);
  },


  getPlayerConfiguration(settings, includeAdvertising) {
    var defaultConfig = {
      'targetId': '' + settings.kalturaID,
      'wid': '_' + settings.accountID,
      'uiconf_id': settings.playerID,
      'entry_id': settings.kalturaID,
      'flashvars': {
        'autoPlay': false,
        'autoMute': false
      }
    };

    var advertisingConfig = {
      'flashvars': {
        'adsOnReplay': true
      },
      'readyCallback': this.unmuteAndPlayPlayerWithAds
    };

    var config = _.extend({}, defaultConfig);

    if(includeAdvertising) {
      // deep merge configuration objects
      config = _.merge(defaultConfig, advertisingConfig);
    }

    return config;
  },

  setPlayerConfiguration(playerConfig) {
    this.setState({
      playerConfig: playerConfig,
    });
  },

  unmuteAndPlayPlayerWithAds() {
    var kdp = document.getElementById(this.props.kalturaID);
    var self = this;
    console.log('unmute player');
    // Hack to ensure that player is unmuted
    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated
    // or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      kdp.kBind('doPlay.firstPlayTracking', function() {
        jQuery.get(self.props.trackingURL);
        kdp.kUnbind('doPlay.firstPlayTracking');
      });
    }

  },

  componentDidMount() {
    this.loadPlayer();
  },

  render() {
    var { kalturaID, meta, caption } = this.props;

    caption.description = stripParagraphs(caption.description);

    return (
       <figure {...classes()} itemProp='video' itemScope itemType='http://schema.org/VideoObject'>
        <div {...classes('player')} ref='videoContainer' id={kalturaID} />
        <Caption {...caption} />
        {Object.keys(meta).map(function(metaItem, index) {
          return <meta itemProp={metaItem} content={meta[metaItem]} key={index} />;
        })}
      </figure>
    );
  }

});
