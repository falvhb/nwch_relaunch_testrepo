import React from 'react';
import jQuery from 'jQuery';
import objectAssign from 'react/lib/Object.assign';
import bem from 'react-bem-helper';

import ResponsiveVideoMixin from 'mixins/responsive-video';
import AutoPlayVideoMixin from 'mixins/auto-play-video';

const classes = new bem({
  name: 'video',
  prefix: ''
});

const Video = React.createClass({

  mixins: [ResponsiveVideoMixin/*, AutoPlayVideoMixin*/],

  propTypes: {
    accountID: React.PropTypes.string.isRequired,
    playerID: React.PropTypes.string.isRequired,
    playerID2: React.PropTypes.string.isRequired,
    trackingURL: React.PropTypes.string.isRequired,
    kalturaID: React.PropTypes.string.isRequired,
    title: React.PropTypes.string.isRequired,
    description: React.PropTypes.string.isRequired,
    thumbImageURL: React.PropTypes.string.isRequired,
    source: React.PropTypes.string.isRequired,
    autoPlay: React.PropTypes.bool
  },

  getDefaultProps: function() {
    return {
      autoPlay: false
    };
  },

  // utilities
  removePTags: function(string) {
    return string.replace(/(<p[^>]+?>|<p>|<\/p>)/img, " ");
  },

  // setup players (using external Kaltura Media Player library)
  getPlayerLibraryURLs: function(forPlayerWithoutAds) {
    var playerID = (forPlayerWithoutAds===true) ? this.props.playerID : this.props.playerID2;
    return "http://cdnapi.kaltura.com/p/"
                          + this.props.accountID
                          + "/sp/"
                          + this.props.accountID
                          + "00/embedIframeJs/uiconf_id/"
                          + playerID
                          + "/partner_id/"
                          + this.props.accountID;
  },

  loadPlayers: function() {

    // load both players using promises
    var self = this;
    jQuery.when(
      jQuery.getScript( this.getPlayerLibraryURLs(true) ),
      jQuery.getScript( this.getPlayerLibraryURLs(false) ),
      jQuery.Deferred(function(deferred) {
        jQuery( deferred.resolve );
      })
    ).done(function() {

        // set configuration object for player with ads
        self.setConfigurationForPlayerWithAds();

        // setup players (without ads if autoPlay is activated or if we are in non-mobile browsers)
        if (!self.props.autoPlay) {
          // console.log(self.props.kalturaID.toUpperCase()+':	'+'- Auto-play deactivated - setup player with ads and non-muted');

          kWidget.embed(self.state.playerWithAdsConfig);
        } else if (self.isMobile()) {
          // console.log(self.props.kalturaID.toUpperCase()+':	'+'- Mobile browser detected - setup player without ads and non-muted. ','Auto-Play: ',self.props.autoPlay,'Is Mobile: ',self.isMobile());
          kWidget.embed(self.state.playerWithAdsForMobileConfig);
        } else {
          var playerWithoutAdsConfig = {
            'targetId': self.props.kalturaID,
            'wid': '_'+self.props.accountID,
            'uiconf_id': self.props.playerID2,
            'entry_id': self.props.kalturaID,
            'flashvars': {
              'EmbedPlayer.EnableFullscreen': false,
              'autoMute': true
            },
            'readyCallback': self.setupPlayerReplacement
          };

          kWidget.embed(playerWithoutAdsConfig);
        }

        // make players fluid (responsive)
        self.setupFixedRatioOnResizingVideo();

      });

  },

  unmuteAndPlayPlayerWithAds: function() {
    var kdp = document.getElementById(this.props.kalturaID);
    var self = this;

    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      // console.log('@TODO: NetMetrix tracking on video play event for autoPlay deactivated or in mobile browsers');
      kdp.kBind('doPlay.firstPlayTracking', function() {
        jQuery.get(self.props.trackingURL);
        kdp.kUnbind('doPlay.firstPlayTracking');
      });
    }

  },

  setConfigurationForPlayerWithAds: function() {
    var playerWithAdsConfig = {
        'targetId': ''+this.props.kalturaID,
        'wid': '_'+this.props.accountID,
        'uiconf_id': this.props.playerID,
        'entry_id': this.props.kalturaID,
        'flashvars': {
          'autoPlay': false,
          'autoMute': false,
          'adsOnReplay': true
        },
        'readyCallback': this.unmuteAndPlayPlayerWithAds
    };
    var playerWithAdsForMobileConfig = objectAssign(playerWithAdsConfig, {
    });

    this.setState({
      playerWithAdsConfig: playerWithAdsConfig,
      playerWithAdsForMobileConfig: playerWithAdsForMobileConfig
    });
  },

  componentDidMount: function() {
    this.loadPlayers();
  },

  render() {
    return (

      <div {...classes('container--outer')} itemProp="video" itemScope="" itemType="http://schema.org/VideoObject" >
        <div {...classes('container--inner')} ref="videoContainer" id={this.props.kalturaID} ></div>
        <h2 itemProp="name" {...classes('title')} >{this.props.title}</h2>
        <p itemProp="description" {...classes('description')} dangerouslySetInnerHTML={{ __html: this.removePTags(this.props.description)}} ></p>
        <p {...classes('source')} >Quelle: {this.props.source}</p>

        <meta itemProp="thumbnailUrl" content={this.props.thumbImageURL} />

        /* @TODO: Asked Lovely to add properties to API
        <meta itemProp="duration" content="T1M33S" />
        <meta itemProp="contentURL" content="http://www.example.com/video123.flv" />
        <meta itemProp="embedURL" content="http://www.example.com/videoplayer.swf?video=123" />
        <meta itemProp="uploadDate" content="2011-07-05T08:00:00+08:00" />
        <meta itemProp="expires" content="2012-01-30T19:00:00+08:00" />
        <meta itemProp="height" content="400" />
        <meta itemProp="width" content="400" />
        */
      </div>

    );
  }

});

module.exports = Video;
