import React from 'react';
import jQuery from 'jquery';
import objectAssign from 'react/lib/Object.assign';
import bem from 'react-bem-helper';
import Caption from 'components/caption';

import stripMarkup from 'helpers/strip-markup';
import getSource from 'helpers/get-source';

import ResponsiveVideoMixin from 'mixins/responsive-video';
// import AutoPlayVideoMixin from 'mixins/auto-play-video';

const classes = new bem({
  name: 'video',
  prefix: ''
});

const Video = React.createClass({

  mixins: [ResponsiveVideoMixin/*, AutoPlayVideoMixin*/],

  propTypes: {
    title: React.PropTypes.string.isRequired,
    description: React.PropTypes.string,
    source: React.PropTypes.object.isRequired,
    still_image: React.PropTypes.object.isRequired
  },

  getDefaultProps() {
    return {
      accountID: "1789881",
      playerID: "26921101",
      playerWithoutAdsID: "29381931",
      trackingURL: "https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/aaz?r=http%3A//www.aargauerzeitung.ch/ressort/subressort/article-title-129298028&d=&x=",
      autoPlay: false
    };
  },

  // setup players (using external Kaltura Media Player library)
  // getPlayerLibraryURLs(forPlayerWithoutAds) {
  getPlayerLibraryURLs() {
     // var playerID = (forPlayerWithoutAds === true) ? this.props.playerID : this.props.playerWithoutAdsID;
    return 'http://cdnapi.kaltura.com/p/'
                          + this.props.accountID
                          + '/sp/'
                          + this.props.accountID
                          + '00/embedIframeJs/uiconf_id/'
                          + this.props.playerID
                          + '/partner_id/'
                          + this.props.accountID;
  },

  loadPlayers() {

    // load both players using promises
    var self = this;
    jQuery.when(
      jQuery.getScript( this.getPlayerLibraryURLs(true) ),
      ((self.props.autoPlay) ? jQuery.getScript( this.getPlayerLibraryURLs(false)) : true ), // do not load player without ads if autoPlay is deactivated
      jQuery.Deferred(function(deferred) {
        jQuery( deferred.resolve );
      })
    ).done(function() {

      // set configuration object for player with ads
      self.setConfigurationForPlayerWithAds();

      // setup players (without ads if autoPlay is activated or if we are in non-mobile browsers)
      if (!self.props.autoPlay) {
        kWidget.embed(self.state.playerWithAdsConfig);
      } else if (self.isMobile()) {
        kWidget.embed(self.state.playerWithAdsForMobileConfig);
      } else {
        var playerWithoutAdsConfig = {
          'targetId': self.props.kaltura_id,
          'wid': '_'+self.props.accountID,
          'uiconf_id': self.props.playerWithoutAdsID,
          'entry_id': self.props.kaltura_id,
          'flashvars': {
            'EmbedPlayer.EnableFullscreen': false,
            'autoMute': true
          },
          'readyCallback': self.setupPlayerReplacement
        };

        kWidget.embed(playerWithoutAdsConfig);
      }

      // make players fluid (responsive)
      self.setupFixedRatioOnResizingVideo();
    });

  },

  unmuteAndPlayPlayerWithAds() {
    var kdp = document.getElementById(this.props.kaltura_id);
    var self = this;

    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      kdp.kBind('doPlay.firstPlayTracking', function() {
        jQuery.get(self.props.trackingURL);
        kdp.kUnbind('doPlay.firstPlayTracking');
      });
    }

  },

  setConfigurationForPlayerWithAds: function() {
    var playerWithAdsConfig = {
        'targetId': '' + this.props.kaltura_id,
        'wid': '_' + this.props.accountID,
        'uiconf_id': this.props.playerID,
        'entry_id': this.props.kaltura_id,
        'flashvars': {
          'autoPlay': false,
          'autoMute': false,
          'adsOnReplay': true
        },
        'readyCallback': this.unmuteAndPlayPlayerWithAds
    };

    var playerWithAdsForMobileConfig = objectAssign(playerWithAdsConfig, {
      flashvars: {
        'autoPlay': false,
        'autoMute': false,
        'adsOnReplay': true
      }
    });

    this.setState({
      playerWithAdsConfig: playerWithAdsConfig,
      playerWithAdsForMobileConfig: playerWithAdsForMobileConfig
    });
  },

  componentDidMount() {
    this.loadPlayers();
  },

  render() {

    var { kaltura_id, title, description, source, still_image } = this.props;
    var metaImage = still_image.image_url || still_image.asset.image_url;

    return (
      <figure {...classes()} itemProp='video' itemScope itemType='http://schema.org/VideoObject'>
        <div {...classes('player')} ref='videoContainer' id={kaltura_id} />
        <Caption
          title={title}
          description={stripMarkup(description)}
          source={getSource(source)} />
        <meta itemProp='thumbnailUrl' content={metaImage} />
      </figure>
    );

  }

});

module.exports = Video;
