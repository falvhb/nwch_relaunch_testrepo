import React from 'react';
import jQuery from 'jquery';
import bem from 'react-bem-helper';
import Caption from 'components/caption';

import ResponsiveVideoMixin from 'mixins/responsive-video';
// import AutoPlayVideoMixin from 'mixins/auto-play-video';

const classes = new bem({
  name: 'video',
  prefix: ''
});

export default React.createClass({

  displayName: 'Video',

  mixins: [ResponsiveVideoMixin/*, AutoPlayVideoMixin*/],

  propTypes: {
    kaltura_id: React.PropTypes.string.isRequired,
    accountID: React.PropTypes.string.isRequired,
    playerID: React.PropTypes.string.isRequired,
    playerWithoutAdsID: React.PropTypes.string.isRequired,
    trackingURL: React.PropTypes.string.isRequired,
    autoPlay: React.PropTypes.bool,
    meta: React.PropTypes.object.isRequired,
    caption: React.PropTypes.object,
    placement: React.PropTypes.string.isRequired
  },

  getPlayerLibraryURL() {

    var { accountID, playerID } = this.props;

    return '//cdnapi.kaltura.com/html5/html5lib/v2.9/mwEmbedLoader.php/p/'+ accountID +'/uiconf_id/'+ playerID;
  },

  getPlayerConfig(params) {
    var playerID = params.playerID || this.props.playerID;

    var flashvars = params.flashvars || {
      'autoPlay': false,
      'autoMute': false,
      'adsOnReplay': true
    };

    return {
      'targetId': '' + this.props.kaltura_id,
      'entry_id': this.props.kaltura_id,
      'wid': '_' + this.props.accountID,
      'uiconf_id': playerID,
      'flashvars': flashvars,
      'readyCallback': params.callback
    };
  },

  embedPlayers() {
    var playerConfig;

    // get player config (without ads if autoPlay is activated or if we are in non-mobile browsers)
    if (!this.props.autoPlay || this.isMobile()) {
      playerConfig = this.getPlayerConfig({
        callback: this.unmuteAndPlayPlayerWithAds
      });
    } else {
      playerConfig = this.getPlayerConfig({
        playerID: this.props.playerWithoutAdsID,
        callback: this.setupPlayerReplacement,
        flashvars: {
          'EmbedPlayer.EnableFullscreen': false,
          'autoMute': true
        }
      });
    }
    // embed the player
    kWidget.embed(playerConfig);

    // make players fluid (responsive)
    this.setupFixedRatioOnResizingVideo();
  },

  loadPlayers() {
    // load both players using promises
    var self = this;
    jQuery.when(
      jQuery.getScript( this.getPlayerLibraryURL() ),
      ((self.props.autoPlay) ? jQuery.getScript( this.getPlayerLibraryURL()) : true ), // do not load player without ads if autoPlay is deactivated
      jQuery.Deferred(function(deferred) {
        jQuery(deferred.resolve);
      })
    ).done(function() {
      self.embedPlayers();
    });

  },

  unmuteAndPlayPlayerWithAds() {
    var kdp = document.getElementById(this.props.kaltura_id);
    var self = this;

    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      kdp.kBind('doPlay.firstPlayTracking', function() {
        jQuery.get(self.props.trackingURL);
        kdp.kUnbind('doPlay.firstPlayTracking');
      });
    }

  },

  componentDidMount() {
    this.loadPlayers();
  },

  render() {

    var { kaltura_id, meta, caption } = this.props;

    return (
      <figure {...classes()} itemProp='video' itemScope itemType='http://schema.org/VideoObject'>
        <div {...classes('player')} ref='videoContainer' id={kaltura_id} />
        <Caption {...caption} />
        {Object.keys(meta).map(function(metaItem, index) {
          return <meta itemProp={metaItem} content={meta[metaItem]} key={index} />;
        })}
      </figure>
    );

  }

});
