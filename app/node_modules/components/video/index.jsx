import React from 'react';
import _ from 'lodash';
import jQuery from 'jquery';
import bem from 'react-bem-helper';
import Caption from 'components/caption';

import ResponsiveVideoMixin from 'mixins/responsive-video';
import AutoPlayVideoMixin from 'mixins/auto-play-video';
import Tracking from 'mixins/tracking';

const classes = new bem({
  name: 'video',
  prefix: ''
});

export default React.createClass({

  displayName: 'Video',

  mixins: [Tracking, ResponsiveVideoMixin, AutoPlayVideoMixin],

  propTypes: {
    kaltura_id: React.PropTypes.string.isRequired,
    accountID: React.PropTypes.string.isRequired,
    autoPlay: React.PropTypes.bool,
    meta: React.PropTypes.object.isRequired,
    caption: React.PropTypes.object
  },

  getPlayerLibraryURL(playerID) {
    let urlRoot = 'http://cdnapi.kaltura.com';
    if (window && window.location.protocol === 'https:') {
      urlRoot = 'https://cdnapisec.kaltura.com';
    }

    return urlRoot
            + '/p/'
            + this.props.accountID
            + '/sp/'
            + this.props.accountID
            + '00/embedIframeJs/uiconf_id/'
            + playerID
            + '/partner_id/'
            + this.props.accountID;
  },

  getPlayerConfig(params) {
    var flashvars = params.flashvars || {
      'autoPlay': false,
      'autoMute': false,
      'adsOnReplay': true
    };

    return {
      'targetId': '' + this.props.kaltura_id,
      'entry_id': this.props.kaltura_id,
      'wid': '_' + this.props.accountID,
      'uiconf_id': params.playerID,
      'flashvars': flashvars,
      'readyCallback': params.callback
    };
  },

  loadPlayers(params) {

    // load both players using promises
    var self = this;
    var playerURL = this.getPlayerLibraryURL(params.playerID);
    var playerURLNoAds = this.getPlayerLibraryURL(params.playerWithoutAdsID);

    jQuery.when(
      jQuery.getScript(playerURL),
      (self.props.autoPlay
        ? jQuery.getScript(playerURLNoAds)
        : true
      ), // do not load player without ads if autoPlay is deactivated
      jQuery.Deferred(function(deferred) {
        jQuery(deferred.resolve);
      })
    ).done(function() {

      // setup players (without ads if autoPlay is activated or if we are in non-mobile browsers)
      if (!self.props.autoPlay || self.isMobile()) {
        kWidget.embed(self.getPlayerConfig({
          playerID: params.playerID,
          callback: self.unmuteAndPlayPlayerWithAds
        }));
      } else {
        kWidget.embed(self.getPlayerConfig({
          playerID: params.playerWithoutAdsID,
          callback: self.setupPlayerReplacement,
          flashvars: {
            'EmbedPlayer.EnableFullscreen': false,
            'autoMute': true
          }
        }));
      }

      // make players fluid (responsive)
      self.setupFixedRatioOnResizingVideo();
    });

  },

  installTracking(kdp, id) {
    this.configureBasicTracking(kdp, id);

    // We want to track interactions once playhead is inside quartiles
    // (e.g. video is playing)
    this.configureTrackingInsideQuartiles(kdp, id);

  },

  configureBasicTracking(kdp, id) {
    var self = this;

    // Track when ad starts playing
    // Important: Make sure firstPlay/doReplay is not tracked when an ad is played previously.
    kdp.kBind('preSequenceStart', function() {

      // make sure to deactivate tracking for Net Metrix if we are playing an ad
      kdp.kUnbind(self.appendSuffix('.first', id));
      kdp.kUnbind(self.appendSuffix('.subsequent', id));

      self.track(Tracking.EVENT, {
        event: 'adPlay',
        id: id
      });
    });

    // Track when video starts to play (after ad has played)
    kdp.kBind(this.appendSuffix('firstPlay.first', id), function() {
      self.track(Tracking.EVENT, {
        event: 'firstPlay',
        id: id
      });
    });

    kdp.kBind(this.appendSuffix('doReplay.subsequent', id), function() {
      self.track(Tracking.EVENT, {
        event: 'replay',
        id: id
      });
    });

    kdp.kBind('onAdSkip', function() {
      self.track(Tracking.EVENT, {
        event: 'adSkip',
        id: id
      });
    });

    kdp.kBind('adClick', function() {
      self.track(Tracking.EVENT, {
        event: 'adClick',
        id: id
      });
    });

    // @TODO: only trigger this if we are not pausing. 
    // Otherwise 2 trackings will fire (doPlay & doSeek)
    kdp.kBind('doSeek', function() {
      self.track(Tracking.EVENT, {
        event: 'seek',
        id: id
      });
    });
  },

  configureTrackingInsideQuartiles(kdp, id) {
    // console.log('......configure trackig inside quartiles......');
    var self = this;

    // when player is playing videos (inside quartiles)
    // we want to track play and pause events
    kdp.kBind(this.appendSuffix('doPlay.install', id), function() {
      // installment is a one time operation so remove listener once executed
      kdp.kUnbind(self.appendSuffix('doPlay.install', id));

      self.installTrackingInsideQuartiles(kdp, id);
    });

    // Resinstall on each of the subsequent plays of the video
    kdp.kBind(this.appendSuffix('doReplay.reinstall', id), function() {
      self.installTrackingInsideQuartiles(kdp, id);
    });

    this.installQuartileListener(kdp, id);
  },

  installQuartileListener(kdp, id) {
    // console.log('**********install quartile listener**********');
    var self = this;

    // we remove in tracking during video playing when we have reached the end of the video.
    // Note: After this happens no tracking happens anymore during video playing.
    // If we want to have tracking even afterwards we have to install tracking again
    // when entering other quartiles than the fourth
    // (hook to events `firstQuartile`and `secondQuartile`.
    kdp.kBind(this.appendSuffix('doStop.uninstall', id), function() {
      // console.log('......will remove tracking inside quartiles..', kdp, id);
      self.removeTrackingInsideQuartiles(kdp, id);
    });
  },

  installTrackingInsideQuartiles(kdp, id) {
    console.log('--installing tracking inside quartiles....', kdp, id);
    var self = this;
    var _id = id;

    kdp.kUnbind(this.appendSuffix('doPause.pausingInQuartiles', id));
    kdp.kBind(this.appendSuffix('doPause.pausingInQuartiles', id), function() {
      self.track(Tracking.EVENT, {
        event: 'pause',
        id: _id
      });
    });

    kdp.kUnbind(this.appendSuffix('doPlay.playingInQuartiles', id));
    kdp.kBind(this.appendSuffix('doPlay.playingInQuartiles', id), function() {
      self.track(Tracking.EVENT, {
        event: 'resume',
        id: _id
      });
    });
  },

  removeTrackingInsideQuartiles(kdp, id) {
    console.log('--removing tracking inside quartiles....', kdp, id);
    kdp.kUnbind(this.appendSuffix('.playingInQuartiles', id));
    kdp.kUnbind(this.appendSuffix('.pausingInQuartiles', id));
    // kdp.kUnbind(this.appendSuffix('doPause.pausingInQuartiles', id));
  },

  appendSuffix(string, suffix) {
    var appended = [
      string || '',
      suffix || ''
    ];

    return appended.join('_');
  },

  unmuteAndPlayPlayerWithAds() {
    var kdp = document.getElementById(this.props.kaltura_id);
    var self = this;

    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      this.installTracking(kdp, self.props.kaltura_id || null);
    }
  },

  componentDidMount() {
    const globalScope = window.az || {};
    this.loadPlayers({
      playerID: this.props.playerID || _.get(globalScope, 'globals.kaltura_frontend_video_player_id') || process.env.KALTURA_PLAYER_ID,
      playerWithoutAdsID: this.props.playerWithoutAdsID || _.get(globalScope, 'globals.kaltura_frontend_adless_video_player_id') || process.env.KALTURA_PLAYER_NOADS_ID
    });
  },

  render() {

    var { kaltura_id, meta, caption } = this.props;

    return (
      <figure {...classes()} itemProp='video' itemScope itemType='http://schema.org/VideoObject'>
        <div {...classes('player')} ref='videoContainer' id={kaltura_id} />
        <Caption {...caption} />
        {Object.keys(meta).map(function(metaItem, index) {
          return <meta itemProp={metaItem} content={meta[metaItem]} key={index} />;
        })}
      </figure>
    );

  }

});
