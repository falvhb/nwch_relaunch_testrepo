import React from 'react';
import jQuery from 'jquery';
import objectAssign from 'react/lib/Object.assign';
import bem from 'react-bem-helper';
import Caption from 'components/caption';
import stripParagraphs from 'helpers/strip-paragraphs';

import ResponsiveVideoMixin from 'mixins/responsive-video';
import AutoPlayVideoMixin from 'mixins/auto-play-video';


const classes = new bem({
  name: 'video',
  prefix: ''
});

export default React.createClass({

  displayName: 'Video',

  mixins: [ResponsiveVideoMixin, AutoPlayVideoMixin],

  propTypes: {
    kalturaID: React.PropTypes.string.isRequired,
    accountID: React.PropTypes.string.isRequired,
    playerID: React.PropTypes.string.isRequired,
    playerWithoutAdsID: React.PropTypes.string.isRequired,
    trackingURL: React.PropTypes.string.isRequired,
    autoPlay: React.PropTypes.bool,
    meta: React.PropTypes.object.isRequired,
    caption: React.PropTypes.object,
    placement: React.PropTypes.string.isRequired
  },

  getDefaultProps() {
    return {
      autoPlay: false
    };
  },

  // setup players (using external Kaltura Media Player library)
  getPlayerLibraryURLs(useAds) {
    var playerID = (useAds === true) ? this.props.playerID : this.props.playerWithoutAdsID;
    return '//cdnapi.kaltura.com/p/'
                          + this.props.accountID
                          + '/sp/'
                          + this.props.accountID
                          + '00/embedIframeJs/uiconf_id/'
                          + playerID
                          + '/partner_id/'
                          + this.props.accountID;
  },

  loadPlayers() {
    // load both players using promises
    var self = this;
    jQuery.when(
      jQuery.getScript( this.getPlayerLibraryURLs(true) ),
      // do not load player without ads if autoPlay is deactivated
      ((self.props.autoPlay) ? jQuery.getScript( this.getPlayerLibraryURLs(false)) : true )
    ).done(function() {

      // set configuration object for player with ads
      self.setConfigurationForPlayerWithAds();

      // setup players (without ads if autoPlay is activated or if we are in non-mobile browsers)
      if (!self.props.autoPlay) {
        self.embedVideo(self.state.playerWithAdsConfig);
      } else if (self.isMobile()) {
        self.embedVideo(self.state.playerWithAdsForMobileConfig);
      } else {
        var playerWithoutAdsConfig = {
          'targetId': self.props.kalturaID,
          'wid': '_'+self.props.accountID,
          'uiconf_id': self.props.playerWithoutAdsID,
          'entry_id': self.props.kalturaID,
          'flashvars': {
            'EmbedPlayer.EnableFullscreen': false,
            'autoMute': true
          },
          'readyCallback': self.setupPlayerReplacement
        };

        self.embedVideo(playerWithoutAdsConfig);
      }

      // make players fluid (responsive)
      self.setupFixedRatioOnResizingVideo();
    });

  },



  embedVideo(settings) {
    kWidget.embed(settings);
  },

  unmuteAndPlayPlayerWithAds() {
    var kdp = document.getElementById(this.props.kalturaID);
    var self = this;

    // Hack to ensure that player is unmuted
    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated
    // or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      kdp.kBind('doPlay.firstPlayTracking', function() {
        jQuery.get(self.props.trackingURL);
        kdp.kUnbind('doPlay.firstPlayTracking');
      });
    }

  },

  setConfigurationForPlayerWithAds() {
    var playerWithAdsConfig = {
        'targetId': '' + this.props.kalturaID,
        'wid': '_' + this.props.accountID,
        'uiconf_id': this.props.playerID,
        'entry_id': this.props.kalturaID,
        'flashvars': {
          'autoPlay': false,
          'autoMute': false,
          'adsOnReplay': true
        },
        'readyCallback': this.unmuteAndPlayPlayerWithAds
    };

    var playerWithAdsForMobileConfig = objectAssign(playerWithAdsConfig, {
      flashvars: {
        'autoPlay': false,
        'autoMute': false,
        'adsOnReplay': true
      }
    });

    this.setState({
      playerWithAdsConfig: playerWithAdsConfig,
      playerWithAdsForMobileConfig: playerWithAdsForMobileConfig
    });
  },

  componentDidMount() {
    this.loadPlayers();
  },

  render() {
    var { kalturaID, meta, caption } = this.props;

    caption.description = stripParagraphs(caption.description);

    return (
       <figure {...classes()} itemProp='video' itemScope itemType='http://schema.org/VideoObject'>
        <div {...classes('player')} ref='videoContainer' id={kalturaID} />
        <Caption {...caption} />
        {Object.keys(meta).map(function(metaItem, index) {
          return <meta itemProp={metaItem} content={meta[metaItem]} key={index} />;
        })}
      </figure>

    );

  }

});
