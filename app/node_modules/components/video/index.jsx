import React from 'react';
import _ from 'lodash';
import jQuery from 'jquery';
import bem from 'react-bem-helper';
import Caption from 'components/caption';

import ResponsiveVideoMixin from 'mixins/responsive-video';
// import AutoPlayVideoMixin from 'mixins/auto-play-video';

const classes = new bem({
  name: 'video',
  prefix: ''
});

export default React.createClass({

  displayName: 'Video',

  mixins: [ResponsiveVideoMixin/*, AutoPlayVideoMixin*/],

  propTypes: {
    kaltura_id: React.PropTypes.string.isRequired,
    accountID: React.PropTypes.string.isRequired,
    trackingURL: React.PropTypes.string.isRequired,
    autoPlay: React.PropTypes.bool,
    meta: React.PropTypes.object.isRequired,
    caption: React.PropTypes.object,
    placement: React.PropTypes.string.isRequired
  },

  getPlayerLibraryURL(playerID) {
    return '//cdnapi.kaltura.com/p/'
            + this.props.accountID
            + '/sp/'
            + this.props.accountID
            + '00/embedIframeJs/uiconf_id/'
            + playerID
            + '/partner_id/'
            + this.props.accountID;
  },

  getPlayerConfig(params) {
    var flashvars = params.flashvars || {
      'autoPlay': false,
      'autoMute': false,
      'adsOnReplay': true
    };

    return {
      'targetId': '' + this.props.kaltura_id,
      'entry_id': this.props.kaltura_id,
      'wid': '_' + this.props.accountID,
      'uiconf_id': params.playerID,
      'flashvars': flashvars,
      'readyCallback': params.callback
    };
  },

  loadPlayers(params) {


    // load both players using promises
    var self = this;
    var playerURL = this.getPlayerLibraryURL(params.playerID);
    var playerURLNoAds = this.getPlayerLibraryURL(params.playerWithoutAdsID);

    jQuery.when(
      jQuery.getScript(playerURL),
      (self.props.autoPlay
        ? jQuery.getScript(playerURLNoAds)
        : true
      ), // do not load player without ads if autoPlay is deactivated
      jQuery.Deferred(function(deferred) {
        jQuery(deferred.resolve);
      })
    ).done(function() {

      // setup players (without ads if autoPlay is activated or if we are in non-mobile browsers)
      if (!self.props.autoPlay || self.isMobile()) {
        kWidget.embed(self.getPlayerConfig({
          playerID: params.playerID,
          callback: self.unmuteAndPlayPlayerWithAds
        }));
      } else {
        kWidget.embed(self.getPlayerConfig({
          playerID: params.playerWithoutAdsID,
          callback: self.setupPlayerReplacement,
          flashvars: {
            'EmbedPlayer.EnableFullscreen': false,
            'autoMute': true
          }
        }));
      }

      // make players fluid (responsive)
      self.setupFixedRatioOnResizingVideo();
    });

  },

  unmuteAndPlayPlayerWithAds() {
    var kdp = document.getElementById(this.props.kaltura_id);
    var self = this;

    kdp.sendNotification('changeVolume', 0.8);

    // auto play the video if autoPlay feature is deactivated or if we are in non mobile browsers
    if (this.props.autoPlay && !this.isMobile()) {
      kdp.sendNotification('doPlay');
    }

    // track NetMetrix on doPlay if autoPlay is deactivated or we are in a mobile browser
    if (!this.props.autoPlay || this.isMobile()) {
      kdp.kBind('doPlay.firstPlayTracking', function() {
        jQuery.get(self.props.trackingURL);
        kdp.kUnbind('doPlay.firstPlayTracking');
      });
    }

  },

  componentDidMount() {
    const globalScope = window.az || {};
    this.loadPlayers({
      playerID: _.get(globalScope, 'globals.kaltura_frontend_video_player_id') || process.env.KALTURA_PLAYER_ID,
      playerWithoutAdsID: _.get(globalScope, 'globals.kaltura_frontend_adless_video_player_id') || process.env.KALTURA_PLAYER_NOADS_ID
    });
  },

  render() {

    var { kaltura_id, meta, caption } = this.props;

    return (
      <figure {...classes()} itemProp='video' itemScope itemType='http://schema.org/VideoObject'>
        <div {...classes('player')} ref='videoContainer' id={kaltura_id} />
        <Caption {...caption} />
        {Object.keys(meta).map(function(metaItem, index) {
          return <meta itemProp={metaItem} content={meta[metaItem]} key={index} />;
        })}
      </figure>
    );

  }

});
