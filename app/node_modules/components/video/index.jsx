'use strict';

const React = require('react');
const jQuery = require('jQuery');


const Video = React.createClass({
  defineIsOnScreen: function() {
    // define jQuery plugin used for checking if an DOM node is on screen
    jQuery.fn.isOnScreen = function() {
      var win = jQuery(window);

      var viewport = {
        top : win.scrollTop(),
        left : win.scrollLeft()
      };
      viewport.right = viewport.left + win.width();
      viewport.bottom = viewport.top + win.height();

      var bounds = this.offset();
      bounds.right = bounds.left + this.outerWidth();
      bounds.bottom = bounds.top + this.outerHeight();

      /*console.log('isOnScreen: ');
      console.log('viewport:', viewport);
      console.log('object:', bounds);*/

      return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));

    };
  },
  isMobile: function () {
    if ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
      return true;
    }
      return false;
  },

  setupOnScreenChangeHandlingOfVideos: function() {
    var $ = jQuery;
    if (typeof(window)!=='undefined') {
      if (!this.isMobile()) {
        $(window).on('DOMContentLoaded load resize scroll', this.onScreenChangeHandler);
        //$(window).on('DOMContentLoaded load resize scroll', function() {console.log('scroll etc. .......')} );
      }
    }
  },
  onScreenChangeHandler: function (e,cb) {
    //console.log(this.props.kalturaID.toUpperCase()+':	---------CHECKING');

    // handle player
    // start auto-playing when visible
    var onScreenVisibilityChanged = function () {
      //console.log('-----------',this,this.props,jQuery(window));
      var kdpWS = jQuery('#'+this.props.kalturaID);
      var kdp = kdpWS.get(0);
      if ( /*kdpWS.isOnScreen()*/this.state.onScreen ) {
        console.log(this.props.kalturaID.toUpperCase(),' - onScreenVisibilityChanged - ',':	became visible - trigger doPlay');

        //console.log('kdp:',' - onScreenVisibilityChanged - ',kdp);
        kdp.sendNotification('doPlay');
      } else {
        console.log(this.props.kalturaID.toUpperCase(),' - onScreenVisibilityChanged - ',':	was hidden');
      }
    };


    var onScreenCurrently = jQuery('#'+this.props.kalturaID).isOnScreen();
    console.log('#####',onScreenCurrently);
    if ( onScreenCurrently!=this.state.onScreen ) {
      console.log(this.props.kalturaID,' ----------- onScreenVisibilityChanged:', onScreenCurrently);
      onScreenVisibilityChanged.apply(this);
    }
    this.setState({
      onScreen: onScreenCurrently
    });
  },
  setupPlayerWithoutAds: function() {
    // define on screen handling function jQuery.fn.isOnScreen
    this.defineIsOnScreen();

    // setup players with ads
    //@TODO: this.setupPlayerWithAds();

    // watch onScreen changes (video goes/leaves visible screen area f.ex. when scrolling down a page)
    this.setupOnScreenChangeHandlingOfVideos();
  },
  getInitialState: function() {
    return {
      onScreen: false
    };
  },





  componentWillMount: function() {
    //console.log('componentWillMount', ': ', this.props.title);
  },
  componentWillUpdate: function() {
    // console.log('componentWillUpdate',': ', nextProps, nextState);
  },
  componentDidMount: function() {
    //console.log('componentDidMount', 'id:', this.refs.videoContainer.props.id);

    // @TODO4: check kaltura library is only loaded once
    // Note: if you want to the component to be fully self containing one has to accept that the kaltura player library for one player can be loaded several times (e.g. as many times as a certain player occurs in a page)

    var props = this.props;
    var self = this;
    jQuery.getScript( "http://cdnapi.kaltura.com/p/1719221/sp/171922100/embedIframeJs/uiconf_id/"+props.playerID+"/partner_id/1719221", function( data, textStatus ) {
      // console.log("Kaltura player js was loaded.");

      if (textStatus === "success") {
        var config = {
          'targetId': props.kalturaID,
          'wid': '_1719221',
          'uiconf_id': props.playerID,
          'entry_id': props.kalturaID,
          'flashvars': {
            'EmbedPlayer.EnableFullscreen': false
          },
          'readyCallback': self.setupPlayerWithoutAds
        };
        kWidget.embed(config);
        //console.log('Embedding Kaltura player', config);
      }

    });

  },
  render() {
    return (
      <div className="video" ref="videoContainer" id={this.props.kalturaID} ></div>
    );
  }

});

module.exports = Video;

