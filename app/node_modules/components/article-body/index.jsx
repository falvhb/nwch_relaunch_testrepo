import React from 'react';
import _ from 'lodash';
import bem from 'react-bem-helper';

import Wrapper from './wrapper';
import RawContent from 'components/raw-content';
import GetEnrichment from 'higher-order/get-enrichment';
import EnrichmentWrap from 'components/enrichment';
import CuratedRecommendations from 'components/curated-recommendations';

const classes = new bem({
  name: 'article-body',
  prefix: ''
});

const ArticleBody = React.createClass({

  displayName: 'ArticleBody',

  propTypes: {
    content: React.PropTypes.array.isRequired
  },

  disallowedEnrichments: ['survey_stoerer', 'map_stoerer', 'audio_stoerer'],

  returnEnrichment(item, index) {
    const { type, data } = item;
    const floatedEnrichments = ['left', 'right'];
    const enrichmentPositon = _.includes(floatedEnrichments, data.placement) ? true : false;

    const Enrichment = <GetEnrichment key={index} enrichment={data} />;

    return (
      <EnrichmentWrap
        key={index}
        type={type}
        aside={enrichmentPositon}>
        {Enrichment}
      </EnrichmentWrap>
    );
  },

  getComponent(item, index) {
    const { type, data } = item;

    if (type === 'content_block') {
      return <RawContent key={index} content={data} />;
    }

    if (type === 'curated_recommendations') {
      return <CuratedRecommendations key={index} {...data} />;
    }

    if (!_.includes(this.disallowedEnrichments, type)) {
      return this.returnEnrichment(item, index);
    }

  },

  mapContentToComponents(content) {
    let components;
    if (content) {
      components = content.map((item, index) => {
        return this.getComponent(item, index);
      });
    }
    return components;
  },

  render() {
    return (
      <div itemProp="articleBody" {...classes()}>
        {this.mapContentToComponents(this.props.content)}
      </div>
    );
  }

});

export default Wrapper(ArticleBody);
