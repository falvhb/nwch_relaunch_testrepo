import React from 'react';
import bem from 'react-bem-helper';

import GetEnrichment from 'higher-order/data/get-enrichment';

import RawContent from 'components/raw-content';
import Aside from 'components/aside';

const classes = new bem({
  name: 'article-body',
  prefix: ''
});

export default React.createClass({

  getEnrichments() {
    var chunks = [];
    var token = '<p>${{stoerer}}</p>';
    var text = this.props.text
      // Remove junk from CMS
      .replace(/<p>(\s|&nbsp;)*<\/p>/g, '');
    var index = text.indexOf(token);
    var enrichmentIndex = 0, rawIndex = 0;

    // Look for token
    while (index > -1) {
      // If there is token, render raw content before token
      if (index > 0) {
        chunks.push(<RawContent key={'raw' + rawIndex} content={text.slice(0, index)} />);
        rawIndex += 1;
      }

      // Then render enrichment
      var enrichment = this.props.enrichments[enrichmentIndex];
      if (enrichment) {
        var Enrichment = <GetEnrichment key={'enrichment_' + enrichmentIndex} enrichment={enrichment} />;
        var wrapped = enrichment.placement && ['left', 'right'].indexOf(enrichment.placement) > -1;
        chunks.push(wrapped ? <Aside key={'enrichmentAside_' + enrichmentIndex}>{Enrichment}</Aside> : Enrichment);
      }

      // Update the remaining text
      text = text.slice(index + token.length);
      // Look for next token
      index = text.indexOf(token);
      enrichmentIndex += 1;
    }

    // Make sure we don't leave any content if there are more inteferers than content chunks
    if (text.length > 0) {
      chunks.push(<RawContent key='rawLast' content={text} />);
    }

    return chunks;
  },

  render() {
    return (
      <div itemProp="articleBody" {...classes()}>
        {this.getEnrichments()}
      </div>
    );
  }

});
