import React from 'react';
import _ from 'lodash';
import sanitizeHtml from 'sanitize-html';

// import CuratedRecommendations from 'components/curated-recommendations';
// import RawContent from 'components/raw-content';

export default Component => React.createClass({

  displayName: 'ArticleBodyWrapper',

  propTypes: {
    author: React.PropTypes.string,
    text: React.PropTypes.string.isRequired,
    enrichments: React.PropTypes.arrayOf(React.PropTypes.object).isRequired,
    related: React.PropTypes.arrayOf(React.PropTypes.object)
  },

  markers: {
    related: '${{empfehlung}}',
    enrichment: '${{stoerer}}'
  },

  cleanContent(content) {
    let emptyTags = ['a', 'p', 'div', 'table', 'th', 'td', 'h1', 'h2', 'h3', 'ul', 'ol', 'li', 'strong', 'em'];

    return sanitizeHtml(content, {
      exclusiveFilter: function(frame) {
        var text = frame.text.trim();
        return _.includes(emptyTags, frame.tag) && (!text || text === '&nbsp;');
      }
    });
  },

  enrichmentsToArray(params) {
    const self = this;
    const separator = this.markers.enrichment.toString();
    const textBody = params.parse;
    const total = params.count;

    let mappedContent = [];
    let itemsArray = textBody.split(separator);

    _.forEach(itemsArray, function(item, index) {

      // if we have a corresponding enrichment in API data
      if (index < total) {

        // if it's an empty string...
        // there were two enrichments next to each other or the item has no useful content
        if (_.isEmpty(item.trim()) || _.isEmpty(self.cleanContent(item).trim())) {
          mappedContent.push(separator);
          return;
        }

        // if there's content after cleaning
        if (self.cleanContent(item).trim()) {
          // there was an item first
          mappedContent.push(item);
          // then another enrichment
          mappedContent.push(separator);
          return;
        }
      }

    });

    return mappedContent;
  },

  createEnrichmentsObject(array, props) {
    const self = this;
    const enrichments = props.enrichments;
    const author = props.author;
    const related = props.related;

    let mappedContent = [];
    let enrichmentIndex = 0;

    _.forEach(array, function(item) {

      // enrichments
      if (item === self.markers.enrichment) {
        let enrichment = enrichments[enrichmentIndex];
        enrichmentIndex++;
        return mappedContent.push({
          type: enrichment.stoerer_type || enrichment.asset.content_type,
          data: enrichment
        });
      }

      // related articles
      if (item === self.markers.related) {
        return mappedContent.push({
          type: 'curated_recommendations',
          data: {
            author: author,
            teasers: related
          }
        });
      }

      // text blocks
      return mappedContent.push({
        type: 'content_block',
        data: self.cleanContent(item)
      });

    });

    return mappedContent;
  },

  mapBodyContent(props) {
    const apiTextBody = props.text;
    const containsRelated = _.includes(apiTextBody, this.markers.related);
    const containsEnrichments = _.includes(apiTextBody, this.markers.enrichment);
    let enrichmentsArray;

    // return the default API text if no related / enrichments
    if (!containsRelated && !containsEnrichments) {
      return [{
        type: 'text',
        data: apiTextBody
      }];
    }

    // if we have both enrichments and recommendations
    if (containsRelated && containsEnrichments) {

      const relatedSeparator = this.markers.related.toString();

      let totalEnrichments = props.enrichments.length;
      let beforeRelated = [], afterRelated = [];
      let splitByRelated = apiTextBody.split(relatedSeparator);
      let contentBeforeRelated = splitByRelated[0];
      let contentAfterRelated = splitByRelated[1];

      // get content before recommendations
      if (contentBeforeRelated) {
        let countEnrichmentsBefore = contentBeforeRelated.match(/\${{stoerer}}/g).length;
        beforeRelated = this.enrichmentsToArray({
          parse: splitByRelated[0],
          count: Math.min(countEnrichmentsBefore, totalEnrichments)
        });
      }

      // get content after recommendations
      if (contentAfterRelated) {
        let countEnrichmentsAfter = contentAfterRelated.match(/\${{stoerer}}/g).length;
        afterRelated = this.enrichmentsToArray({
          parse: splitByRelated[1],
          count: Math.min(countEnrichmentsAfter, totalEnrichments)
        });
      }

      // merge 3 parts in order
      enrichmentsArray = beforeRelated.concat(relatedSeparator, afterRelated);

    } else {

      // get an array of all our items
      enrichmentsArray = this.enrichmentsToArray({
        parse: props.text,
        count: props.enrichments.length
      });

    }

    return this.createEnrichmentsObject(enrichmentsArray, props);
  },

  mappedData(props) {
    return {
      content: this.mapBodyContent(props)
    };
  },

  render() {
    return (
      <Component {...this.mappedData(this.props)} />
    );
  }

});
