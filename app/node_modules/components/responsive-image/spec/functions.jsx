/* eslint-disable no-unused-expressions */

import React from 'react/addons';
const TestUtils = React.addons.TestUtils;

import ResponsiveImage from 'components/responsive-image';
import fixtures from 'components/responsive-image/.variations';
import imageConfig from 'config/images';

import { expect } from 'chai';

describe('ResponsiveImages', function() {

  var image;

  beforeEach(function() {
    image = TestUtils.renderIntoDocument(
      <ResponsiveImage {...fixtures[1].data} />
    );
  });

  describe('gives', function() {

    it('viewport types as a string', function() {
      expect(image.viewportTypeForWidth(400)).to.be.a('string');
    });

    describe('viewport types correctly', function() {

      it('on small screens', function() {
        expect(image.viewportTypeForWidth(400)).to.equal('regularPhone');
      });

      it('on massive screens', function() {
        expect(image.viewportTypeForWidth()).to.equal('smallPhone');
        expect(image.viewportTypeForWidth(4000)).to.equal('wideDesktop');
      });

      it('when no viewport given', function() {
        expect(image.viewportTypeForWidth()).to.equal('smallPhone');
        expect(image.viewportTypeForWidth(0)).to.equal('smallPhone');
      });

    });

    it('image dimensions as an object', function() {
      expect(image.imageDimensionsForParams(600, '1x1')).to.be.an('object');
    });

    it('image dimension properties as numbers', function() {
      let imgDims = image.imageDimensionsForParams(600, '1x1');
      let w = isNaN(imgDims.width), h = isNaN(imgDims.height);
      expect(w).to.not.be.true;
      expect(h).to.not.be.true;
    });

    describe('image dimensions sized correctly', function() {

      it('normally', function() {
        let imgDims = image.imageDimensionsForParams(600, '1x1');
        expect(imgDims.width).to.equal(600);
        expect(imgDims.height).to.equal(600);
      });

      it('with fallback', function() {
        let imgDims = image.imageDimensionsForParams(600, 'errortrap');
        expect(imgDims.width).to.equal(600);
        expect(imgDims.height).to.equal(338);
      });

    });

    describe('correct image widths for variations', function() {
      it('before component mounts', function() {
        expect(image.imageWidthFromSizeVariation('small')).to.equal(imageConfig.standardImageSizes[image.fallbackType]);
      });

      it('after component mounts', function() {
        expect(image.imageWidthFromSizeVariation('tiny', true)).to.equal(100);
        expect(image.imageWidthFromSizeVariation('large', true)).to.equal(400);
      });

      it('with fallback', function() {
        expect(image.imageWidthFromSizeVariation('errortrap')).to.equal(imageConfig.standardImageSizes[image.fallbackType]);
      });
    });

  });

  describe('creates', function() {

    describe('goldbach signature correctly', function() {

      it('for normal images', function() {
        let signature = image.createImageSignature({
          width: 100,
          height: 200,
          salt: 'goldbach_7327'
        });
        expect(signature).to.equal('sA5_9xmYnbfVhNNEumV5LWIQbZc/100x200');
      });

      it('for letterbox images', function() {
        let signature = image.createImageSignature({
          width: 100,
          height: 200,
          letterbox: true,
          salt: 'goldbach_7327'
        });
        expect(signature).to.equal('Xvab_iFD_lZ-FyfgR5fadpR7S9w/100x200,fill');
      });

    });

    describe('correctly sized', function() {
      it('4x3 image', function() {
        let dimensions = image.imageDimensionsForParams(320, '4x3');
        expect(dimensions.width).to.equal(320);
        expect(dimensions.height).to.equal(240);
      });

      it('16x9 image', function() {
        let dimensions = image.imageDimensionsForParams(640, '16x9');
        expect(dimensions.width).to.equal(640);
        expect(dimensions.height).to.equal(360);
      });
    });

  });

});
