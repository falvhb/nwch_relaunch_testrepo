'use strict';

const React = require('react');
const _ = require('lodash');
const bem = require('react-bem-helper');

const ResponsiveImageMixin = require('mixins/responsive-image');

const classes = new bem({
  name: 'responsive-image',
  prefix: ''
});

const ResponsiveImage = React.createClass({

  mixins: [ResponsiveImageMixin],

  propTypes: {
    size: React.PropTypes.string.isRequired,
    src: React.PropTypes.string.isRequired,
    alt: React.PropTypes.string.isRequired,
    ratio: React.PropTypes.string,
    title: React.PropTypes.string,
    defer: React.PropTypes.bool
  },

  getDefaultProps() {
    return {
      ratio: '3x2',
      title: ''
    };
  },

  getInitialState() {
    return {
      loading: true
    };
  },

  componentDidMount() {
    window.addEventListener('resize', _.debounce(this.handleResize, 250));
    this.setState({
      support: true,
      src: this.responsiveImageSrc({
        src: this.props.src,
        size: this.props.size,
        ratio: this.props.ratio
      })
    });
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  },

  componentDidUpdate() {
    if (this.props.defer && ! this.state.src) {
      this.lazyLoadSrc();
    } else if (this.state.loading) {
      this.testLoaded();
    }
  },

  render() {

    var props = this.props;

    var loadingClass = {
      'is-loading': this.state.loading
    };

    var image;
    var imgSrc = this.responsiveImageSrc({
      src: props.src,
      size: props.size,
      ratio: props.ratio
    });
    var imageProps = {
      alt: props.alt,
      title: props.title
    };

    var imageEl = <img ref='img' {...classes('img')} src={imgSrc} {...imageProps} />;

    if (props.defer) {
      var deferEl = <img ref='img' {...classes('img')} src={this.state.src} data-src={imgSrc} {...imageProps} />;
    }

    if (this.state.support) {
      image = (
        <div {...classes('', [props.ratio, props.size], loadingClass)}>
          {props.defer ? deferEl : imageEl}
        </div>
      );
    } else {
      image = (
        <noscript dangerouslySetInnerHTML={{ __html: React.renderToStaticMarkup(
          <picture {...classes('', [props.ratio, props.size, 'fallback'])} alt={props.alt}>
            <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: props.src, size: 'huge', ratio: props.ratio })} media="(min-width:960px)" />
            <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: props.src, size: 'large', ratio: props.ratio })} media="(min-width:640px)" />
            <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: props.src, size: 'medium', ratio: props.ratio })} media="(min-width:320px)" />
            <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: props.src, size: 'small', ratio: props.ratio })} />
            {imageEl}
          </picture>
        )}} />
      );
    }

    return image;
  }

});

module.exports = ResponsiveImage;
