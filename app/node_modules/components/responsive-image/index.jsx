import React from 'react';
// import _ from 'lodash';
import bem from 'react-bem-helper';

import Picture from 'components/picture';

import pictureSourcesForImage from 'helpers/picture-sources-for-image';

// import ResponsiveImageMixin from 'mixins/responsive-image';

const classes = new bem({
  name: 'responsive-image',
  prefix: ''
});

export default React.createClass({

  displayName: 'ResponsiveImage',

  // mixins: [ResponsiveImageMixin],

  propTypes: {
    src: React.PropTypes.string.isRequired,
    title: React.PropTypes.string,
    alt: React.PropTypes.string,
    size: React.PropTypes.string.isRequired,
    ratio: React.PropTypes.string,
    defer: React.PropTypes.bool,
    letterbox: React.PropTypes.bool,
    lazyload: React.PropTypes.bool
  },

  getDefaultProps() {
    return {
      ratio: '16x9',
      title: '',
      letterbox: false
    };
  },

  getInitialState() {
    return {
      browser: false
    };
  },

  testLoaded() {
    // let { loading, support } = this.state;
    // if (loading && support) {
    //   this.getImg().addEventListener('load', this.hasLoaded);
    //   this.getImg().addEventListener('error', this.hasFailed);
    // }
  },

  componentDidMount() {
    this.setState({ browser: true });
    // this.resizeEvent = _.debounce(this.handleResize, 250);
    // window.addEventListener('resize', this.resizeEvent);
    // this.setState({
    //   support: true
    //   // src: this.responsiveImageSrc(this.props),
    // });
  },

  // componentWillUnmount() {
  //   // window.removeEventListener('resize', this.resizeEvent);
  //   // this.getImg().removeEventListener('load', this.hasLoaded);
  //   // this.getImg().removeEventListener('error', this.hasFailed);
  // },

  // componentWillReceiveProps(newProps) {
  //   // reset src if we dynamically update image props
  //   // this makes lazy-loading work again
  //   // if (newProps.ratio !== this.props.ratio) {
  //   //   this.setState({
  //   //     src: newProps.src,
  //   //     loading: true
  //   //   });
  //   // }
  // },

  // componentDidUpdate() {
  //   // if (this.props.defer && !this.state.src) {
  //   //   this.lazyLoadSrc();
  //   // } else if (this.state.loading) {
  //   //   this.testLoaded();
  //   // }
  // },

  render() {

    // var { title, alt, size, ratio, defer, letterbox, lazyload } = this.props;

    const { size, ratio, letterbox } = this.props;

    const { browser } = this.state;

    let modifiers = {
      [ratio]: true,
      [size]: true,
      letterbox: letterbox,
      fill: !letterbox
    };

    // var loadingClass = {
    //   'is-loading': loading && support && !lazyload,
    //   'is-failed': failed,
    //   'is-loaded': !loading && support || !support
    // };

    // var img;

    // if (support) {
    //   img = (
    //     lazyload
    //       ? <img {...classes('img')} itemProp="contentUrl" ref='img' data-flickity-lazyload={this.state.src} title={title} alt={alt} />
    //       : <img {...classes('img')} itemProp="contentUrl" ref='img' src={(defer ? this.state.src : this.responsiveImageSrc(this.props))} data-src={(defer ? this.responsiveImageSrc(this.props) : null)} title={title} alt={alt} />
    //   );
    // } else {
    //   img = (
    //     <noscript>
    //       <Picture {...pictureSourcesForImage(this.props)} />
    //     </noscript>
    //   );
    // }
    //     <noscript dangerouslySetInnerHTML={{ __html: React.renderToStaticMarkup(
    //       <picture>
    //         <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'wide', ratio: ratio, letterbox: letterbox })} media="(min-width:680px)" />
    //         <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'large', ratio: ratio, letterbox: letterbox })} media="(min-width:450px)" />
    //         <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'regular', ratio: ratio, letterbox: letterbox })} media="(min-width:320px)" />
    //         <source {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'mobile', ratio: ratio, letterbox: letterbox })} />
    //         <img {...classes('img')} itemProp="contentUrl" ref='img' src={this.responsiveImageSrc(this.props)} title={title} alt={alt} />
    //       </picture>
    //     )}} />

    let picture = <Picture {...pictureSourcesForImage(this.props)} />;

    return (
      <div {...classes(null, modifiers)}>
        {browser
          ? picture
          : <noscript dangerouslySetInnerHTML={{ __html: React.renderToStaticMarkup(picture)}} />
        }
      </div>
    );
  }

});
