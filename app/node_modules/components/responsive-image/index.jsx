import React from 'react';
import _ from 'lodash';
import bem from 'react-bem-helper';

import ResponsiveImageMixin from 'mixins/responsive-image';

const classes = new bem({
  name: 'responsive-image',
  prefix: ''
});

export default React.createClass({

  displayName: 'ResponsiveImage',

  mixins: [ResponsiveImageMixin],

  propTypes: {
    src: React.PropTypes.string.isRequired,
    title: React.PropTypes.string,
    alt: React.PropTypes.string,
    size: React.PropTypes.string.isRequired,
    ratio: React.PropTypes.string,
    defer: React.PropTypes.bool,
    letterbox: React.PropTypes.bool
  },

  getDefaultProps() {
    return {
      ratio: '16x9',
      title: '',
      letterbox: false
    };
  },

  getInitialState() {
    return {
      loading: true,
      failed: false
    };
  },

  componentDidMount() {
    window.addEventListener('resize', _.debounce(this.handleResize, 250));
    this.setState({
      support: true,
      src: this.responsiveImageSrc(this.props),
    });
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  },

  componentDidUpdate() {
    if (this.props.defer && !this.state.src) {
      this.lazyLoadSrc();
    } else if (this.state.loading) {
      this.testLoaded();
    }
  },

  render() {

    var { src, title, alt, size, ratio, defer, letterbox } = this.props;

    var { support, loading, failed } = this.state;

    var modifiers = {
      [ratio]: true,
      [size]: true,
      letterbox: letterbox,
      fill: !letterbox
    };

    var loadingClass = {
      'is-loading': loading && support,
      'is-failed': failed
    };

    if (support) {
      return (
        <div {...classes(null, modifiers, loadingClass)}>
          <img {...classes('img')} itemProp="contentUrl" ref='img' src={(defer ? this.state.src : this.responsiveImageSrc(this.props))} data-src={(defer ? this.responsiveImageSrc(this.props) : null)} title={title} alt={alt} />
        </div>
      );
    }

    return (
      <noscript dangerouslySetInnerHTML={{ __html: React.renderToStaticMarkup(
        <picture {...classes(null, 'fallback')} alt={alt}>
          <source itemProp="contentUrl" {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'max', ratio: ratio, letterbox: letterbox })} media="(min-width:640px)" />
          <source itemProp="contentUrl" {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'large', ratio: ratio, letterbox: letterbox })} media="(min-width:500px)" />
          <source itemProp="contentUrl" {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'medium', ratio: ratio, letterbox: letterbox })} media="(min-width:320px)" />
          <source itemProp="contentUrl" {...classes('img')} srcSet={this.responsiveImageSrc({ src: src, size: 'small', ratio: ratio, letterbox: letterbox })} />
          <img {...classes('img')} itemProp="contentUrl" ref='img' src={this.responsiveImageSrc(this.props)} title={title} alt={alt} />
        </picture>
      )}} />
    );
  }

});
