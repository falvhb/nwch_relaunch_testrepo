/* eslint-disable no-unused-expressions, no-unused-vars, no-console */
/* global expect:true, assert:true, chai:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
// import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
// import sinon from 'sinon';
// import sinonChai from 'sinon-chai';
// chai.should();
// chai.use(sinonChai);

import Expandable from 'components/expandable';
import data from 'components/expandable/.variations.json';


describe('Expandable', () => {
  var reactElement,
    component,
    props;

  describe('renders', () => {
    beforeEach(() => {
      var Child,
        children;

      props = data[0].data;

      Child = 'div';
      children = <Child id="childA" className="childA">child A</Child>;

      reactElement = (
        <Expandable {...props}>
          {children}
        </Expandable>
      );
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a DOM Component with a BEM class', () => {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'expandable');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a child', () => {
      var ch = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');
      expect(TestUtils.isDOMComponent(ch)).to.be.true;
    });

    it('a child which can set its height', () => {
      var ch = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      var height = 100;
      // @TODO:

    });
  });

});
