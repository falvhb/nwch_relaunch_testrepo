/* eslint-disable no-unused-expressions, no-unused-vars, no-console */
/* global expect:true, assert:true, chai:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import Expandable from 'components/expandable';
import data from 'components/expandable/.variations.json';


describe('Expandable', () => {
  var reactElement,
    component,
    props;

  describe('renders', () => {
    beforeEach(() => {
      props = data[0].data;
      console.log('-----PROPS-------');
      console.log(props);
      // only works if no children specified.. why I'm not sure..
      reactElement = (
        <Expandable {...props}>
          <div id="childA">child A</div>
          <div id="childB">child B</div>
        </Expandable>
      );
      component = TestUtils.renderIntoDocument(reactElement);
      console.log('----Component:--------');
      console.log(React.renderToString(reactElement));
      console.log(React.renderToString(component));
    });

    it('a DOM Component with a BEM class', () => {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'expandable');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('renders a child', () => {
      var child = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');
      expect(TestUtils.isDOMComponent(child)).to.be.true;
    });
  });

});
