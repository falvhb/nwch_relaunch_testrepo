/* eslint-disable no-unused-expressions, no-unused-vars */
/* global expect:true, assert:true */
import React from 'react/addons';
const TestUtils = React.addons.TestUtils;
import { expect, assert, should } from 'chai';

import Expandable from 'components/expandable';
import data from 'components/expandable/.variations.json';

describe('Expandable', () => {
  var reactElement,
    component,
    props;

  describe('renders', () => {
    var Child,
        children;

    beforeEach(() => {
      props = data[0].data;

      Child = 'div';
      children = <Child id="childA" className="childA">child A</Child>;

      reactElement = (
        <Expandable {...props}>
          {children}
        </Expandable>
      );
      component = TestUtils.renderIntoDocument(reactElement);
    });

    it('a DOM Component with a BEM class', () => {
      var componentWithClass = TestUtils.findRenderedDOMComponentWithClass(component, 'expandable');
      expect(TestUtils.isDOMComponent(componentWithClass)).to.be.true;
    });

    it('a child', () => {
      var childInstance = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');
      expect(TestUtils.isDOMComponent(childInstance)).to.be.true;
    });

  });

  describe('can', () => {
    var Child,
        children,
        expandableInstance;

    beforeEach(() => {
      props = data[0].data;
      props.expanded = false;

      Child = 'div';
      children = <Child id="childA" className="childA">child A</Child>;

      reactElement = (
        <Expandable {...props}>
          {children}
        </Expandable>
      );
      component = TestUtils.renderIntoDocument(reactElement);

      expandableInstance = TestUtils.scryRenderedComponentsWithType(component, Expandable)[0];
    });

    it('reset its height', () => {
      expandableInstance.getDOMNode().style.height = '11px';
      expandableInstance.resetHeight();
      expect(expandableInstance.getDOMNode().style.height).to.equal('');
    });

    it('not have its height updated when not expanded', () => {
      var additionalHeight = 100;
      var targetHeight = props.expandableHeight + additionalHeight + 'px';
      var childInstance = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      // set height of expandable by triggering child
      childInstance.props.onSetExpandableHeight(100);

      expect(expandableInstance.getDOMNode().style.height).to.equal('');
    });
  });

  describe('can', () => {
    var Child,
        children,
        expandableInstance;

    beforeEach(() => {
      props = data[0].data;
      props.expanded = true;

      Child = 'div';
      children = <Child id="childA" className="childA">child A</Child>;

      reactElement = (
        <Expandable {...props}>
          {children}
        </Expandable>
      );
      component = TestUtils.renderIntoDocument(reactElement);

      expandableInstance = TestUtils.scryRenderedComponentsWithType(component, Expandable)[0];
    });

    it('not reset its height when expanded', () => {
      expandableInstance.getDOMNode().style.height = '11px';
      expandableInstance.resetHeight();
      expect(expandableInstance.getDOMNode().style.height).to.equal('11px');
    });

    it('have its height updated by its child', () => {
      var additionalHeight = 100;
      var targetHeight = props.expandableHeight + additionalHeight + 'px';
      var childInstance = TestUtils.findRenderedDOMComponentWithClass(component, 'childA');

      // set height of expandable by triggering child
      childInstance.props.onSetExpandableHeight(100);

      expect(expandableInstance.getDOMNode().style.height).to.equal(targetHeight);
    });
  });

});
