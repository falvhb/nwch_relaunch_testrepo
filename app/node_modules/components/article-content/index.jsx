'use strict';

const React = require('react');
const bem = require('react-bem-helper');

const TextStoerer = require('components/text-stoerer');
const Tags = require('components/tags');

const classes = new bem({
  name: 'article-content',
  prefix: ''
});

const ArticleContent = React.createClass({

  getStoererCompoenent(kind) {
    var kinds = {
      'TextInterferer': TextStoerer
    };

    if (typeof kinds[kind] === 'undefined') {
      return false;
    }

    return kinds[kind];
  },

  injectStoerers() {
    var html = '';
    var token = '<!-- interferer -->';
    var chunks = this.props.text.split(token);
    var interferer, component;

    for (var i = 0; i < Math.min(chunks.length, this.props.interferers.length); i++) {
      interferer = this.props.interferers[i];
      component = this.getStoererCompoenent(interferer.kind);

      html += chunks[i];

      if (component) {
        html += React.renderToStaticMarkup(React.createElement(component, interferer));
      }
    }

    // Make sure we don't leave any content if there are more inteferers than content chunks
    if (chunks.length > 0) {
      html += chunks.join('');
    }

    return html;
  },

  render() {
    return (
      <div {...classes()}>
        <p itemProp='description' {...classes('intro', null, 'type-intro')}>{this.props.teaser}</p>
        <div itemProp='articleBody' {...classes('copy', null, 'copy')} dangerouslySetInnerHTML={{ __html: this.injectStoerers(this.props.text) }} />
        <Tags keywords={this.props.keywords} />
      </div>
    );
  }

});

module.exports = ArticleContent;
