import React from 'react';
import bem from 'react-bem-helper';

import TextStoerer from 'components/text-stoerer';
import ImageStoerer from 'components/image-stoerer';
import DownloadStoerer from 'components/download-stoerer';
import RawContent from 'components/raw-content';
import Tags from 'components/tags';

const classes = new bem({
  name: 'article-content',
  prefix: ''
});

export default React.createClass({

  propTypes: {
    teaser: React.PropTypes.string.isRequired,
    keywords: React.PropTypes.array.isRequired,
    text: React.PropTypes.string.isRequired,
    stoerer: React.PropTypes.array.isRequired
  },

  getStoererComponent(kind) {
    var kinds = {
      'text_stoerer': TextStoerer,
      'image_stoerer': ImageStoerer,
      'download_stoerer': DownloadStoerer,
      // This is meant for the main asset which is not an interferer in itself
      // and has its own `content_type`. Still, we want it to behave the same
      // way as any other st√∂rer.
      'asset_image': ImageStoerer
    };

    if (typeof kinds[kind] === 'undefined') {
      return false;
    }

    return kinds[kind];
  },

  getStoerers() {
    var stoerers = [];
    var token = '<p>${{stoerer}}</p>';
    var text = this.props.text
      // Remove junk from CMS
      .replace(/<p>(\s|&nbsp;)*<\/p>/g, '');
    var index = text.indexOf(token);
    var interfererIndex = 0, rawIndex = 0;

    // Look for token
    while (index > -1) {
      // If there is token, render raw content before token
      if (index > 0) {
        stoerers.push(<RawContent key={'raw' + rawIndex} content={text.slice(0, index)} />);
        rawIndex += 1;
      }

      // Then render interferer
      var interferer = this.props.stoerer[interfererIndex];
      var Component = this.getStoererComponent(interferer.stoerer_type);

      if (Component) {
        stoerers.push(<Component key={'interferer' + interfererIndex} {...interferer} />);
      }

      // Update the remaining text
      text = text.slice(index + token.length);
      // Look for next token
      index = text.indexOf(token);
      interfererIndex += 1;
    }

    // Make sure we don't leave any content if there are more inteferers than content chunks
    if (text.length > 0) {
      stoerers.push(<RawContent key='rawLast' content={text} />);
    }

    return stoerers;
  },

  getMainAsset() {
    if (this.props.assets.length > 0) {
      return React.createElement(
        this.getStoererComponent(this.props.assets[0].asset.content_type),
        this.props.assets[0]
      );
    }

    return undefined;
  },

  render() {

    return (
      <div {...classes()}>
        {this.getMainAsset()}
        <p itemProp='description' {...classes('intro', null, 'type-intro')}>{this.props.teaser}</p>
        <div itemProp="articleBody" {...classes('body', null)}>
          {this.getStoerers()}
        </div>
        <Tags keywords={this.props.keywords} />
      </div>
    );
  }

});
