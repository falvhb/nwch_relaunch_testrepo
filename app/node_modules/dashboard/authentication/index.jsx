import React from 'react';
import bem from 'react-bem-helper';
import { capitalize, get, pick } from 'lodash';
import { Link } from 'react-router';

import SectionHeader from 'components/section-header';
import TextInput from 'inputs/text';
import Checkbox from 'inputs/checkbox';
import TextArea from 'inputs/text-area';
import AuthenticationAPI from 'dashboard/authentication/api';
import Alert from 'components/alert';
import isLoggedIn from 'helpers/dashboard/is-logged-in';

const classes = new bem('authentication-form');
const LOGIN = 'anmelden';
const REGISTER = 'registrieren';

export default React.createClass({

  displayName: 'AuthenticationForm',

  getInitialState() {
    return {
      submitting: false,
      errorMessage: null,
      authenticated: false,
    }
  },

  onChange(key, value) {
    this.setState({
      [key]: value
    })
  },

  onFormSubmit(e) {
    e.preventDefault();

    var authenticate = this.isLoginType() ? AuthenticationAPI.login : AuthenticationAPI.register;

    this.setState({
      submitting: true,
      errorMessage: null
    }, () => {
      // Wait for the state to update before sending request.
      // Otherwise race conditions might make react ignore error messages in the callback with near-instant fails.
      authenticate(this.state, this.onSubmitResult)
    });
  },

  onSubmitResult(newState) {
    this.setState(newState);

    if (newState.authenticated && isLoggedIn()) {
      let redirect = get(this.props, 'location.query.redirectTo');
      this.props.history.pushState(null, redirect || '/dashboard');
    }
  },

  isLoginType() {
    return get(this.props, 'route.path') === LOGIN;
  },

  renderHint() {
    return (
      <a href="https://login.azmedien.ch/omni/login/recover/">Passwort vergessen?</a>
    );
  },

  renderHelpText() {
    var query = get(this.props, 'location.query', {});
    var linkQuery = pick(query, 'redirectTo');

    if (this.isLoginType()) {
      return (
        <p>
          { 'Oder haben sie noch keinen Account? '}
          <Link to="/registrieren" query={linkQuery}>Registrieren</Link>
        </p>
     )
    } else {
      return (
        <p>
          { 'Oder haben sie einen Account? '}
          <Link to="/anmelden" query={linkQuery}>Anmelden</Link>
        </p>
      )
    }
  },

  renderFieldsForAuthType(type) {
    if (this.isLoginType()) {
      return (
        <div>
          <TextInput
            className="form-row"
            name="email"
            value={ this.state.email }
            type="email"
            label="Email"
            onChange={this.onChange}
            required={true}
          />
          <TextInput
            className="form-row"
            name="password"
            value={ this.state.password }
            label="Passwort"
            onChange={this.onChange}
            type="password"
            hint={this.renderHint()}
            required={true}
          />
        </div>
      )
    } else {
      return (
        <div>
          <TextInput
            className="form-row"
            minLength={3}
            name="username"
            value={ this.state.username }
            label="Anzeigename"
            description="Erlaubt sind Buchstaben, Zahlen, Bindestrich, Leerzeichen und Punkt. Minimum 3 Buchstaben"
            onChange={this.onChange}
            required={true}
          />
          <TextInput
            className="form-row"
            name="email"
            value={ this.state.email }
            type="email"
            label="Email"
            onChange={this.onChange}
            required={true}
          />
          <TextInput
            className="form-row"
            name="password"
            value={ this.state.password }
            label="Passwort"
            minLength={6}
            onChange={this.onChange}
            type="password"
            description="Das passwort muss mindestens 6 Zeichen lang sein"
            required={true}/>
          <TextInput
            className="form-row"
            name="password_confirmation"
            value={ this.state.password_confirmation }
            label="Passwort bestätigen"
            minLength={6}
            onChange={this.onChange}
            type="password"
            required={true}
          />
          <Checkbox
            className="form-row"
            name="accepted_agc"
            value={ this.state.accepted_agc }
            label="Ich have die Geschäftsbedingungen gelesen und bin damit einverstanden"
            onChange={this.onChange}
          />
        </div>
      )
    }
  },

  render() {
    // TODO: move error message to seperate component
    return (
      <form {...classes()} onSubmit={ this.onFormSubmit }>
        <SectionHeader title={ this.isLoginType() ? 'Anmelden' : 'Registrieren'}/>
        { this.renderHelpText() }
        { this.state.errorMessage ? <Alert text={this.state.errorMessage} /> : null }
        <div {...classes('form')}>
          { this.renderFieldsForAuthType(this.state.type) }

          <div className="form-row">
            <input type="submit" disabled={this.state.submitting} className="form__submit button button--submit" />
          </div>
        </div>
      </form>

    );
  }

});
