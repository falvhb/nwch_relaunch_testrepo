import React from 'react';
import bem from 'react-bem-helper';
import { get, pick } from 'lodash';
import { Link } from 'react-router';

import SectionHeader from 'components/section-header';
import TextInput from 'inputs/text';
import Checkbox from 'inputs/checkbox';
import AuthenticationAPI from 'dashboard/authentication/api';
import Alert from 'components/alert';
import Button from 'components/button';
import isLoggedIn from 'helpers/dashboard/is-logged-in';
import Container from 'dashboard/container';

const classes = new bem('authentication-form');
// made constants for login + register so we can keep writing english
// while actually using german strings.
const LOGIN = 'anmelden';
// const REGISTER = 'registrieren';

export default React.createClass({

  displayName: 'AuthenticationForm',

  getInitialState() {
    return {
      submitting: false,
      errorMessage: null,
      authenticated: false,
      redirecting: false
    };
  },

  onChange(key, value) {
    this.setState({
      [key]: value
    });
  },

  onFormSubmit(e) {
    e.preventDefault();

    var authenticate = this.isLoginType() ? AuthenticationAPI.login : AuthenticationAPI.register;

    this.setState({
      submitting: true,
      errorMessage: null
    }, () => {
      // Wait for the state to update before sending request.
      // Otherwise race conditions might make react ignore error messages in the callback with near-instant fails.
      authenticate(this.state, this.onSubmitResult);
    });
  },

  onSubmitResult(newState) {
    this.setState(newState);

    if (newState.authenticated && isLoggedIn()) {
      let redirect = get(this.props, 'location.query.redirectTo');
      this.setState({
        redirecting: true
      }, () => window.location = (redirect || '/dashboard'));

    }
  },

  isLoginType() {
    return get(this.props, 'route.path') === LOGIN;
  },

  renderHint() {
    return (
      <a {...classes('reset-link')} href="https://login.azmedien.ch/omni/login/recover/">Passwort vergessen?</a>
    );
  },

  renderHelpText() {
    var query = get(this.props, 'location.query', {});
    var linkQuery = pick(query, 'redirectTo');

    if (this.isLoginType()) {
      return (
        <p>
          { 'Oder haben sie noch keinen Account? '}
          <Link to="/registrieren" query={linkQuery}>Registrieren</Link>
        </p>
     );
    }

    return (
      <p>
        { 'Oder haben sie einen Account? '}
        <Link to="/anmelden" query={linkQuery}>Anmelden</Link>
      </p>
    );
  },

  renderMessage(message, description) {
    return (
      <Container modifiers='small'>
        <div {...classes('heading')}>
          <SectionHeader title={message}/>
          { description }
        </div>
      </Container>
    );
  },

  renderFieldsForAuthType() {
    if (this.isLoginType()) {
      return (
        <div>
          <TextInput
            className="form-row"
            name="email"
            value={ this.state.email }
            type="email"
            label="E-Mail"
            onChange={this.onChange}
            required={true}
          />
          <TextInput
            className="form-row"
            name="password"
            value={ this.state.password }
            label="Passwort"
            onChange={this.onChange}
            type="password"
            hint={this.renderHint()}
            required={true}
          />
        </div>
      );
    }

    return (
      <div>
        <TextInput
          className="form-row"
          minLength={3}
          name="username"
          value={ this.state.username }
          label="Anzeigename"
          description="Erlaubt sind Buchstaben, Zahlen, Bindestrich, Leerzeichen und Punkt. Minimum 3 Buchstaben"
          onChange={this.onChange}
          required={true}
        />
        <TextInput
          className="form-row"
          name="email"
          value={ this.state.email }
          type="email"
          label="Email"
          onChange={this.onChange}
          required={true}
        />
        <TextInput
          className="form-row"
          name="password"
          value={ this.state.password }
          label="Passwort"
          minLength={6}
          onChange={this.onChange}
          type="password"
          description="Das passwort muss mindestens 6 Zeichen lang sein"
          required={true}/>
        <TextInput
          className="form-row"
          name="password_confirmation"
          value={ this.state.password_confirmation }
          label="Passwort bestätigen"
          minLength={6}
          onChange={this.onChange}
          type="password"
          required={true}
        />
        <Checkbox
          className="form-row"
          name="accepted_agc"
          value={ this.state.accepted_agc }
          label="Ich habe die Geschäftsbedingungen gelesen und bin damit einverstanden"
          onChange={this.onChange}
        />
      </div>
    );
  },

  render() {
    const action = this.isLoginType() ? 'Anmelden' : 'Registrieren';
    let submitBtnAttributes = {
      type: 'submit',
      disabled: this.state.submitting
    };

    if (this.state.redirecting) {
      return this.renderMessage('Sie werden weitergeleitet…');
    }

    if (isLoggedIn()) {
      return this.renderMessage('Sie sind bereits angemeldet', 'Wenn Sie sich abmelden möchten, klicken Sie bitte auf “Abmelden” im oberen Teil des Bildschirms.');
    }

    return (
      <Container modifiers='small'>
        <form {...classes()} onSubmit={ this.onFormSubmit }>
          <div {...classes('heading')}>
            <SectionHeader title={ action }/>
            { this.renderHelpText() }
          </div>
          { this.state.errorMessage ? <Alert text={this.state.errorMessage} /> : null }
          <div {...classes('form')}>
            { this.renderFieldsForAuthType(this.state.type) }

            <div className="form-row form-row--action">
              <Button attributes={submitBtnAttributes} label={action} modifier="primary"/>
            </div>
          </div>
        </form>
      </Container>
    );
  }

});
