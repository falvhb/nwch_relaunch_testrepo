/* eslint-disable no-console */
import _ from 'lodash';
import deepForEach from 'helpers/deep-foreach';

export default class NetMetrixTracker {

  static removeEmpty(data) {
    let clone = _.cloneDeep(data);

    return deepForEach(clone, function(e, key, obj) {
      if (e === null || e === '' || typeof(e) === 'undefined' ) {
        delete obj[key];
      }
    });
  }

  static order(data) {
    // correct order is:
    //
    // product: 'live',
    // sitename: this.props.site,
    // view: this.constructor.displayName.toLowerCase(),
    // path: path,
    // event: event.toLowerCase(),
    // id: id,
    // index: index

    return data;
  }

  static buildPath(data) {
    return _.values(data).join('/');
  }

  static buildTag(data, path) {
    let referer = (data.referer ? `r=${encodeURIComponent(data.referer)}&` : ``);

    // @TODO: build qs from object (use an existing library)
    let queryString = `?${referer}d=${(new Date()).getTime()}&x=${data.screenWidth}x${data.screenHeight}`;

    return `@TOTRACK:https://${data.domain}.wemfbox.ch/cgi-bin/ivw/CP/${path}${queryString}`;
  }

  static getTag(data) {
    // console.log('----------DATA----------------', data);

    let cleaned = NetMetrixTracker.removeEmpty(data);
    // console.info('----------CLEANED------------', cleaned);

    // @TODO: maintain correct order! now order is not enforced...
    let ordered = NetMetrixTracker.order(cleaned);
    // console.info('----------ORDERED------------', ordered);

    let path = NetMetrixTracker.buildPath(ordered.path);

    return NetMetrixTracker.buildTag(ordered, path);
  }

  static requestTag(tag) {
    let image = new Image();

    image.src = tag;
  }

  static trackEvent(data) {
    let tag = NetMetrixTracker.getTag(data);
    NetMetrixTracker.requestTag(tag);

    console.info('@TODO: trackEvent: ', tag);

  }

  static trackPageView(data) {
    let tag = NetMetrixTracker.getTag(data);
    NetMetrixTracker.requestTag(tag);

    console.info('@TODO: trackEvent: ', tag);
  }

}
