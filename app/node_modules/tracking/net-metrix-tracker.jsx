/* eslint-disable no-console */
import _ from 'lodash';
// import 'console-polyfill';
import deepForEach from 'helpers/deep-foreach';
import QS from 'qs';

const TYPE_PAGEVIEW = 'Pageview';
const TYPE_EVENT = 'Event';

/**
 * @ignore
 */
export default class NetMetrixTracker {

  static _removeEmptyMembers(data) {
    let clone,
        emptied,
        output;

    if (typeof data === 'undefined' || !data) {
      return [];
    }

    clone = _.cloneDeep(data);

    // set elements to undefined it they are null, an empty string or unedefined
    emptied = deepForEach(clone, function(e, key, obj) {
      if (e === null || e === '' || typeof(e) === 'undefined' ) {
        delete obj[key];
      }
    });

    // remove unefined elements
    output = emptied.filter((e) => {
      return (typeof e !== 'undefined');
    });

    return output;
  }

  static _getOrderedPath(data) {
    if (!data || typeof data === 'undefined' || typeof data.path !== 'object') {
      return [];
    }

    let path = [
      _.get(data, 'path.product'),
      _.get(data, 'path.sitename'),
      // limit to 1 folder as net metrix to meet the 5000 sections limit
      NetMetrixTracker._getFirstFolder(_.get(data, 'path.path')),
      _.get(data, 'path.view'),
      _.get(data, 'path.event')/*,
      _.get(data, 'path.id'),
      _.get(data, 'path.paging')*/
    ];

    return _.remove(path, _.isNotUndefined);
  }

  static _getFirstFolder(path) {
    if (typeof path === 'string') {
      var regexp = /^([^\/]*)/;
      var matches = regexp.exec(path);

      return matches[1];
    }

    return '';
  }

  static _sanitizePath(path) {
    if (typeof path === 'string') {
      return path.replace(/^[\/]*/, '').replace(/[\/]*$/, '');
    }

    return '';
  }

  static _buildPath(data) {
    let path = '';

    if (data.length && data.length > 0) {
      path = data.join('/').toLowerCase();
    }

    return path;
  }

  static _buildQS(data) {
    let params = {
      r: (data.referer ? `${encodeURIComponent(data.referer)}&` : ``),
      d: (Math.random() * 100000),
      x: ((data.screenWidth && data.screenHeight) ? `${data.screenWidth}x${data.screenHeight}` : ``)
    };

    return QS.stringify(params);
  }

  static _buildTag(data, path) {
    let queryString = this._buildQS(data);

    return `https://${data.domain}.wemfbox.ch/cgi-bin/ivw/CP/${path}?${queryString}`;
  }

  static getTag(data) {
    let path,
        cleaned;

    // remove empty properties from data.path
    cleaned = this._removeEmptyMembers(data);

    // remove slahes from  data.path.path at start and end
    cleaned.path.path = this._sanitizePath(data.path.path);

    // order path properties
    cleaned.path = this._getOrderedPath(cleaned);

    //  get path as string
    path = this._buildPath(cleaned.path);

    return this._buildTag(cleaned, path);
  }

  static _requestTag(tag) {
    let image = new Image();

    // @TODO: render <img src=".."> and replace attribute src during runtime.
    // maybe to make sure all browsers do it?
    // see code snippet from wildeisen
    // see parsed url
    //
    // Track Net Metrix using document.write?? -> think through
    image.src = tag;
  }

  static _log(tag, type) {
    console.info(`Detected Net Metrix tag of type '${type}' not fired as current host "${window.location.host}" is not whitelisted as live host using the flag "without_wemf" in domain configuration of the cms. Net Metrix tag is: `, tag);
  }

  static isLiveHost() {
    // in case we do not get the configuration for `without_wemf` make sure we track anyway.
    let isLive = (typeof window.az !== 'undefined' ? !window.az.globals.without_wemf : true);
    return isLive;
  }

  static _track(data, type) {
    let tag = this.getTag(data);

    // Only request tag if we are live. Otherwise _log to console
    if (window && this.isLiveHost()) {
      this._requestTag(tag);
    } else {
      this._log(tag, type);
    }
  }

  static trackEvent(data) {
    this._track(data, NetMetrixTracker.TYPE_EVENT);
  }

  static trackPageView(data) {
    this._track(data, NetMetrixTracker.TYPE_PAGEVIEW);
  }

}

NetMetrixTracker.TYPE_PAGEVIEW = TYPE_PAGEVIEW;
NetMetrixTracker.TYPE_EVENT = TYPE_EVENT;
