/* eslint-disable no-console */
import _ from 'lodash';
import deepForEach from 'helpers/deep-foreach';
import QS from 'qs';
import config from '_tracking/config.json';

/**
 * @ignore
 */
export default class NetMetrixTracker {

  static _removeEmpty(data) {
    let clone = _.cloneDeep(data);

    return deepForEach(clone, function(e, key, obj) {
      if (e === null || e === '' || typeof(e) === 'undefined' ) {
        delete obj[key];
      }
    });
  }

  static _getOrderedPath(data) {
    let path = [
      data.path.product,
      data.path.sitename,
      data.path.view,
      data.path.path,
      data.path.event,
      data.path.id,
      data.path.index
    ];

    return _.remove(path, _.isNotUndefined);
  }

  static _sanitizePath(path) {
    return path.replace(/^[\/]*/, '').replace(/[\/]*$/, '');
  }

  static _buildPath(data) {
    let path = '';

    if (data.length && data.length > 0) {
      path = data.join('/');
    }

    return path;
  }

  static _buildQS(data) {
    let params = {
      r: (data.referer ? `${encodeURIComponent(data.referer)}&` : ``),
      d: (new Date()).getTime(),
      x: `${data.screenWidth}x${data.screenHeight}`
    };

    return QS.stringify(params);
  }

  static _buildTag(data, path) {
    let queryString = this._buildQS(data);

    return `https://${data.domain}.wemfbox.ch/cgi-bin/ivw/CP/${path}?${queryString}`;
  }

  static _getTag(data) {
    let path,
        cleaned;

    // remove empty properties from data.path
    cleaned = this._removeEmpty(data);

    // remove slahes from  data.path.path at start and end
    cleaned.path.path = this._sanitizePath(data.path.path);

    // order path properties
    cleaned.path = this._getOrderedPath(cleaned);

    //  get path as string
    path = this._buildPath(cleaned.path);

    return this._buildTag(cleaned, path);
  }

  static _requestTag(tag) {
    let image = new Image();

    image.src = tag;
  }

  static _log(tag) {
    console.info(`Detected Net Metrix tag not fired. Current host "${window.location.host}" is not configured as live host: `, tag);
  }

  static _isLiveHost() {
    let liveHosts = [];
    let isLive = false;

    // throw error if live hosts are not specified
    if (typeof this.config === 'undefined' || !this.config || !this.config.netMetrix.liveHosts) {
      console.error('You must specify hosts enabled for _tracking under netMetrix.liveHosts[] in _tracking/config.json in order to _track Net Metrix Audit.');
    } else {
      liveHosts = this.config.netMetrix.liveHosts;
    }

    // check if we are on a live host
    _.forEach(liveHosts, function(e) {
      if (window && window.location.host.search(e) > -1) {
        isLive = true;
      }
    });

    return isLive;
  }

  static _track(data) {
    let tag = this._getTag(data);

    // Only request tag if we are live. Otherwise _log to console
    if (this._isLiveHost()) {
      this._requestTag(tag);
    } else {
      this._log(tag);
    }
  }

  static trackEvent(data) {
    this._track(data);
  }

  static trackPageView(data) {
    this._track(data);
  }

}

NetMetrixTracker.config = config;
