/* eslint-disable no-console */
import _ from 'lodash';
import deepForEach from 'helpers/deep-foreach';

export default class NetMetrixTracker {

  static removeEmpty(data) {
    let clone = _.cloneDeep(data);

    return deepForEach(clone, function(e, key, obj) {
      if (e === null || e === '' || typeof(e) === 'undefined' ) {
        delete obj[key];
      }
    });
  }

  static getOrderedPath(data) {
    return [
      data.path.product,
      data.path.sitename,
      data.path.view,
      data.path.path,
      data.path.event,
      data.path.id,
      data.path.index
    ];
  }

  static buildPath(data) {
    let path = '';

    if (data.length && data.length > 0) {
      path = data.join('/');
    }

    return path;
  }

  static buildTag(data, path) {
    let referer = (data.referer ? `r=${encodeURIComponent(data.referer)}&` : ``);

    // @TODO: build qs from object (use an existing library)
    let queryString = `?${referer}d=${(new Date()).getTime()}&x=${data.screenWidth}x${data.screenHeight}`;

    return `@TOTRACK:https://${data.domain}.wemfbox.ch/cgi-bin/ivw/CP/${path}${queryString}`;
  }

  static getTag(data) {
    let path,
        cleaned;

    cleaned = NetMetrixTracker.removeEmpty(data);

    cleaned.path = NetMetrixTracker.getOrderedPath(cleaned);

    path = NetMetrixTracker.buildPath(cleaned.path);

    return NetMetrixTracker.buildTag(cleaned, path);
  }

  static requestTag(tag) {
    let image = new Image();

    image.src = tag;
  }

  static trackEvent(data) {
    let tag = NetMetrixTracker.getTag(data);
    NetMetrixTracker.requestTag(tag);

    console.warn('@TODO: trackEvent: ', tag);

  }

  static trackPageView(data) {
    let tag = NetMetrixTracker.getTag(data);
    NetMetrixTracker.requestTag(tag);

    console.warn('@TODO: trackEvent: ', tag);
  }

}
