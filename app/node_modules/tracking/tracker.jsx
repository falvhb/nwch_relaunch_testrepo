// import GoogleAnalyticsTracker from 'tracking/google-analytics-tracker';
import NetMetrixTracker from 'tracking/net-metrix-tracker';

/**
 * Does the tracking for all applications (Net Metrix, Google Analytics, Chartbeat).
 */
export default class Tracker {

  /**
   * @desc
   * Tracks page views.
   *
   * Net Metrix:
   * Tracks Net Metrix or logs tracking to `console` for non-live hosts.
   *
   * @example
   * let data = {
   *   domain: 'aznetz',
   *   path: {
   *     product: 'live',
   *     sitename: 'styleguide',
   *     view: 'page',
   *     path: window.location.pathname,
   *     event: 'pageview'
   *   }
   * };
   *
   * NetMetrixTracker.trackPageView(data);
   *
   *
   * @param  {object}   data                 - Configuration data.
   * @param  {string}   data.domain          - The identifier for the Audit. For "Nordwestschweiz Netz" this is `'aznetz'`.
   * @param  {object}   data.path            - The path information object.
   * @param  {string}   data.path.product    - The product. Either `'live'`, `'epaper'` or `'service'`.
   * @param  {string}   data.path.sitename   - The newsportal. One of: `'aaz'`, `'bat'`, `'bzb'`, `'blz'`, `'gtb'`, `'liz'`, `'ot'`, `'soz'`.
   * @param  {string}   data.path.view       - The view. `page` for `path.event=='pageview'` or `'[component name]'` for event _tracking.
   * @param  {string}   data.path.event      - The user generated event. `'pageview'` for page view _tracking or `'[name of event]'`.
   * @param  {string}   [data.path.id]       - The ID of the component or the page.
   * @param  {string}   [data.path.index]    - The index of the request. Example: For the image gallery this is the index of the image requested.
   * @param  {string}   [data.referer]       - The referer URL.
   * @param  {integer}  [data.screenWidth]   - The width of the devices' screen in pixels.
   * @param  {integer}  [data.screenHeight]  - The height of the devices' screen in pixels.
   *
   */
  static trackPageView(data) {
    NetMetrixTracker.trackPageView(data);
    // GoogleAnalyticsTracker.trackPageView(data);
  }

  /**
   * Tracks events.
   *
   * @todo: implementation
   *
   */
  static trackEvent(data) {
    NetMetrixTracker.trackEvent(data);
    // GoogleAnalyticsTracker.trackEvent(data);
  }

}
