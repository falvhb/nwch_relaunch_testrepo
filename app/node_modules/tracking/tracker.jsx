import _ from 'lodash';

export default class Tracker {
  constructor(options) {
    this.options = options;
  }

  getTag() {
    // remove undefined properties first
    let picked = _.pick(this.options.path, function(v) {
      return (v != null);
    });

    // @TODO: maintain correct order! now order is not enforced...
    // correct order is:
    //
    // product: 'live',
    // sitename: this.props.site,
    // view: this.constructor.displayName.toLowerCase(),
    // path: path,
    // event: event.toLowerCase(),
    // id: id,
    // index: index

    //@TODO: remove non empty values (not correctly working now..)

    let path = _.values(picked).join('/');

    let referer = (document.referer ? `r=${encodeURIComponent(document.referer)}&` : ``);
    let queryString = `?${referer}d=${(new Date()).getTime()}&x=${this.options.screenWidth}x${this.options.screenHeight}`;

    let tag = `https://${this.options.domain}.wemfbox.ch/cgi-bin/ivw/CP/${path}${queryString}`;
    return tag;
  }

  track() {
    let image = new Image();

    // @TODO: activate tracking on live site only
    // image.src = this.getTag();

    return this.getTag();
  }

}

/*
@TODO: refactor to resemble this:

import GoogleTracker from ...
import NetMetrixTracker from ...

var Tracking = {

  trackPageView: (data) {
    GoogleTracker.trackPageView(data);
    NetMetrixTrack.trackPageView(data);
  },

  trackEvent: (data) {

    GoogleTracker.trackEvent(data);
  }


}


exports default Tracking;
*/
