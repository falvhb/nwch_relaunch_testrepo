/* eslint-disable no-console, no-unused-vars, no-unused-expressions, no-shadow */
/* global chai:true */
import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import Tracker from 'tracking/tracker';
import NetMetrixTracker from 'tracking/net-metrix-tracker';
// import GoogleAnalyticsTracker from 'tracking/google-analytics-tracker';

import QS from 'qs';
import _ from 'lodash';


describe('Tracker\'s method', () => {
  var output,
      data,
      nmMethod,
      nmSpy,
      gaMethod,
      gaSpy,
      image;

  beforeEach(() => {
    data = {
      domain: 'aznetz',
      path: {
        event: 'pageview',
        view: 'page',
        sitename: 'soz',
        path: '/schweiz/baden/mein-artikel-66666666?param=see%20..#anchor_name',
        dummy: 'dummy',
        product: 'live',
        id: '1234',
        paging: 3,
        dummy2: null
      },
      referer: 'http://www.google.com'
    };

    nmMethod = NetMetrixTracker.trackPageView;
    // gaMethod = GoogleAnalytics.trackPageView;
    nmSpy = sinon.spy(NetMetrixTracker, 'trackPageView');
    // gaSpy = sinon.spy(GoogleAnalyticsTracker, 'trackPageView');
  });

  afterEach(() => {
    // restore methods converted to spies
    NetMetrixTracker.trackPageView = nmMethod;
    // GoogleAnalytics.trackPageView = gaMethod;
  });

  //
  // Public methods
  //
  describe('trackPageView', () => {
    it('fires valid pageview tracking for Net Metrix(@TODO, Google Analytics and Chartbeat)', () => {
      Tracker.trackPageView(data);
      image = document.getElementById('netMetrixPageViewTracker');
      nmSpy.should.have.been.calledWithExactly(data);
      nmSpy.should.have.been.calledOnce;
      expect(image.src).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/live/soz/schweiz/page/pageview'));

      // gaSpy.should.have.been.calledWithExactly(data);
    });

    it('fires valid pageview tracking even when given no data', () => {
      Tracker.trackPageView();
      image = document.getElementById('netMetrixPageViewTracker');
      nmSpy.should.have.been.calledWithExactly(undefined);
      nmSpy.should.have.been.calledOnce;
      expect(image.src).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));

      // gaSpy.should.have.been.calledWithExactly(undefined);
    });

    it('fires valid pageview tracking when given null as input', () => {
      Tracker.trackPageView(null);
      image = document.getElementById('netMetrixPageViewTracker');
      nmSpy.should.have.been.calledWithExactly(null);
      nmSpy.should.have.been.calledOnce;
      expect(image.src).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));

      // gaSpy.should.have.been.calledWithExactly(null);
    });

    it('fires valid pageview tracking when given empty object as input', () => {
      Tracker.trackPageView({});
      image = document.getElementById('netMetrixPageViewTracker');
      nmSpy.should.have.been.calledWithExactly({});
      nmSpy.should.have.been.calledOnce;
      expect(image.src).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));

      // gaSpy.should.have.been.calledWithExactly({});
    });

    it('fires valid pageview tracking when given empty array as input', () => {
      Tracker.trackPageView([]);
      image = document.getElementById('netMetrixPageViewTracker');
      nmSpy.should.have.been.calledWithExactly([]);
      nmSpy.should.have.been.calledOnce;
      expect(image.src).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));

      // gaSpy.should.have.been.calledWithExactly([]);
    });

  });

});

describe('Tracker\'s method', () => {
  var data;

  beforeEach(() => {
    data = {
      domain: 'aznetz',
      path: {
        event: 'pageview',
        view: 'page',
        sitename: 'bat',
        path: '/mediathek/videos/1_saffufsf',
        dummy: 'dummy',
        product: 'live',
        id: '6666',
        paging: 3,
        dummy2: null
      },
      referer: 'http://www.google.com',
      screenWidth: 111,
      screenHeight: 112
    };
  });

  describe('getNetMetrixTag', () => {
    it('can get a valid Net Metrix tag', () => {
      let origGetTag = NetMetrixTracker.getTag;
      let spy = sinon.spy(NetMetrixTracker, 'getTag');

      let tag = Tracker.getNetMetrixTag(data);
      spy.should.have.been.calledWithExactly(data);
      spy.should.have.been.calledOnce;
      expect(tag).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/live/bat/mediathek/page/pageview'));

      // restore methods converted to spies
      NetMetrixTracker.getTag = origGetTag;
    });

    it('can get a valid Net Metrix tag even when given invalid input', () => {
      let origGetTag = NetMetrixTracker.getTag;
      let spy = sinon.spy(NetMetrixTracker, 'getTag');
      let tag;

      tag = Tracker.getNetMetrixTag();
      spy.should.have.been.calledWithExactly(undefined);
      spy.should.have.been.calledOnce;
      expect(tag).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      spy.reset();

      tag = Tracker.getNetMetrixTag({});
      spy.should.have.been.calledWithExactly({});
      spy.should.have.been.calledOnce;
      expect(tag).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      spy.reset();

      tag = Tracker.getNetMetrixTag([]);
      spy.should.have.been.calledWithExactly([]);
      spy.should.have.been.calledOnce;
      expect(tag).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      spy.reset();

      // restore methods converted to spies
      NetMetrixTracker.getTag = origGetTag;
    });
  });

  describe('isNetMetrixLiveHost', () => {
    it('can get its state from global configuration', () => {
      let isLive;
      let origIsLiveHost = NetMetrixTracker.isLiveHost;
      let spy = sinon.spy(NetMetrixTracker, 'isLiveHost');

      window.az = {
        globals: {
          without_wemf: false
        }
      };

      isLive = Tracker.isNetMetrixLiveHost();
      spy.should.have.been.calledOnce;
      spy.should.have.returned(true);
      expect(isLive).to.be.true;
      spy.reset();

      window.az.globals.without_wemf = true;
      isLive = Tracker.isNetMetrixLiveHost();
      spy.should.have.been.calledOnce;
      spy.should.have.returned(false);
      expect(isLive).to.be.false;

      // restore methods converted to spies
      NetMetrixTracker.isLiveHost = origIsLiveHost;
    });
  });
});
