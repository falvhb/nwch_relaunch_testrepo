/* eslint-disable no-console, no-unused-vars, no-unused-expressions */
/* global chai:true */
import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import NetMetrixTracker from 'tracking/net-metrix-tracker';

import QS from 'qs';


describe('Net Metrix Tracker\'s method', () => {
  var output,
      input;

  describe('_removeEmptyMembers', () => {
    it('can deeply remove empty elements of an object', () => {
      input = {dummy1: '', dummy2: 12, dummy3: null, dummy4: {}, dummy5: undefined, dummy6: ' ', dummy7: {dummy: ''}};
      output = NetMetrixTracker._removeEmptyMembers(input);
      expect(output).to.deep.equal({dummy2: 12, dummy4: {}, dummy6: ' ', dummy7: {}});
    });

    it('returns an empty object when given invalid input', () => {
      input = {};
      output = NetMetrixTracker._removeEmptyMembers(input);
      expect(output).to.deep.equal({});
      output = NetMetrixTracker._removeEmptyMembers();
      expect(output).to.deep.equal({});
      output = NetMetrixTracker._removeEmptyMembers(null);
      expect(output).to.deep.equal({});
    });
  });

  describe('_getOrderedPath', () => {
    it('returns a path from object properties in a specified order', () => {
      input = {
        path: {
          event: 'pageview',
          view: 'page',
          sitename: 'aaz',
          path: 'aargau/aarau/mein-artikel-66666666',
          dummy: 'dummy',
          product: 'live'
        }
      };
      output = NetMetrixTracker._getOrderedPath(input);
      expect(output).to.deep.equal(['live', 'aaz', 'aargau', 'page', 'pageview']);
    });

    it('returns an empty path even when properties in the path object are missing', () => {
      let input2 = {
        path: {}
      };
      output = NetMetrixTracker._getOrderedPath(input2);
      expect(output).to.deep.equal([]);
    });

    it('returns an empty string when given invalid input', () => {
      output = NetMetrixTracker._getOrderedPath();
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath(null);
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({});
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath([]);
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({path: { dummy: null}});
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({path: []});
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({dummy: {dummy: ''}, path: null});
      expect(output).to.deep.equal([]);
    });
  });

  describe('_getFirstFolder', () => {
    it('returns the first folder when given a path with multiple folders', () => {
      output = NetMetrixTracker._getFirstFolder('first-folder/second_.%20folder/filename-2345');
      expect(output).to.equal('first-folder');
      output = NetMetrixTracker._getFirstFolder('first-folder');
      expect(output).to.equal('first-folder');
    });

    it('returns an empty string when given invalid input', () => {
      output = NetMetrixTracker._getFirstFolder();
      expect(output).to.equal('');
      output = NetMetrixTracker._getFirstFolder(null);
      expect(output).to.equal('');
      output = NetMetrixTracker._getFirstFolder('');
      expect(output).to.equal('');
    });
  });

  describe('_sanitizePath', () => {
    it('removes the slashes at the start and end of a string', () => {
      output = NetMetrixTracker._sanitizePath('/first-folder/second_.%20folder/filename-2345/');
      expect(output).to.equal('first-folder/second_.%20folder/filename-2345');
      output = NetMetrixTracker._sanitizePath('first-folder/second_.%20folder/filename-2345');
      expect(output).to.equal('first-folder/second_.%20folder/filename-2345');
      output = NetMetrixTracker._sanitizePath('/first-folder/');
      expect(output).to.equal('first-folder');
    });

    it('returns an empty string when given invalid input', () => {
      output = NetMetrixTracker._sanitizePath();
      expect(output).to.equal('');
      output = NetMetrixTracker._sanitizePath(null);
      expect(output).to.equal('');
      output = NetMetrixTracker._sanitizePath('');
      expect(output).to.equal('');
    });
  });

  describe('_buildPath', () => {
    it('returns a path when given an array of strings', () => {
      output = NetMetrixTracker._buildPath(['live', 'aaz', 'aargau', 'page', 'pageview']);
      expect(output).to.equal('live/aaz/aargau/page/pageview');
    });

    it('returns an empty string when given invalid input', () => {
      output = NetMetrixTracker._buildPath();
      expect(output).to.equal('');
      output = NetMetrixTracker._buildPath(null);
      expect(output).to.equal('');
      output = NetMetrixTracker._buildPath('');
      expect(output).to.equal('');
    });
  });

  describe('_buildQS', () => {
    it('returns a path when given an array of strings', () => {
      let expectedParams;
      let data = {
        referer: 'http://www.google.com',
        screenWidth: 100,
        screenHeight: 100
      };
      output = NetMetrixTracker._buildQS(data);
      expectedParams = QS.parse(output);

      expect(output).to.contain('r=http%253A%252F%252Fwww.google.com%26');
      expect(output).to.contain('x=100x100');
      expect(parseFloat(expectedParams.d)).to.be.a('number');
    });

    it('returns an empty string when given invalid input', () => {
      let expectedParams;

      output = NetMetrixTracker._buildQS();
      expectedParams = QS.parse(output);
      expect(parseFloat(expectedParams.d)).to.be.a('number');
      expect(expectedParams.x).to.equal('');
      expect(expectedParams.r).to.equal('');

      output = NetMetrixTracker._buildQS(null);
      expectedParams = QS.parse(output);
      expect(parseFloat(expectedParams.d)).to.be.a('number');
      expect(expectedParams.x).to.equal('');
      expect(expectedParams.r).to.equal('');

      output = NetMetrixTracker._buildQS('');
      expectedParams = QS.parse(output);
      expect(parseFloat(expectedParams.d)).to.be.a('number');
      expect(expectedParams.x).to.equal('');
      expect(expectedParams.r).to.equal('');

      output = NetMetrixTracker._buildQS([]);
      expectedParams = QS.parse(output);
      expect(parseFloat(expectedParams.d)).to.be.a('number');
      expect(expectedParams.x).to.equal('');
      expect(expectedParams.r).to.equal('');
    });
  });

  describe('_buildTag', () => {
    it('returns a a valid net metrix tag even when domain or path is missing', () => {
      let data = {};
      let path = 'aargau';
      output = NetMetrixTracker._buildTag(data, path);
      expect(output).to.contain(`https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/aargau`);
    });

    it('returns a a valid net metrix tag', () => {
      let data = {
        domain: 'aznetz',
        referer: 'http://www.google.com'
      };
      let path = 'aargau';
      output = NetMetrixTracker._buildTag(data, path);
      expect(output).to.contain('https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/aargau?r=http%253A%252F%252Fwww.google.com%26');
    });

    it('returns an empty string when given invalid input', () => {
      output = NetMetrixTracker._buildTag();
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      output = NetMetrixTracker._buildTag(null);
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      output = NetMetrixTracker._buildTag(null, null);
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      output = NetMetrixTracker._buildTag('', '');
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
    });
  });

  describe('getTag', () => {
    it('returns a a valid net metrix tag', () => {
      let data = {
        domain: 'aznetz',
        path: {
          event: 'pageview',
          view: 'page',
          sitename: 'aaz',
          path: '/aargau/aarau/mein-artikel-66666666?param=see%20..#anchor_name',
          dummy: 'dummy',
          product: 'live',
          id: '1234',
          paging: 3,
          dummy2: null
        },
        referer: 'http://www.google.com'
      };
      let path = 'aargau';
      output = NetMetrixTracker.getTag(data);
      expect(output).to.contain('https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/live/aaz/aargau/page/pageview?r=http%253A%252F%252Fwww.google.com%26');
    });

    it('returns a a valid net metrix tag even when given an empty object', () => {
      let data = {};
      output = NetMetrixTracker.getTag(data);
      expect(output).to.contain(`https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/`);
    });

    it('returns a valid tag when given invalid input', () => {
      output = NetMetrixTracker.getTag();
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      output = NetMetrixTracker.getTag(null);
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      output = NetMetrixTracker.getTag('');
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
      output = NetMetrixTracker.getTag([]);
      expect(output).to.match(new RegExp('^https://aznetz.wemfbox.ch/cgi-bin/ivw/CP/'));
    });
  });
});
