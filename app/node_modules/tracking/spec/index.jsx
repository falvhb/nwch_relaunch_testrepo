/* eslint-disable no-console, no-unused-vars, no-unused-expressions */
/* global chai:true */
import Test from 'legit-tests/no-dom';
import { expect, assert, should } from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.should();
chai.use(sinonChai);

import NetMetrixTracker from 'tracking/net-metrix-tracker';


describe('Net Metrix Tracker\'s method', () => {
  var output,
      input;

  describe('_removeEmptyMembers can remove empty elements of an array', () => {
    it('such as empty string, null, empty objects and objects with empty properties', () => {
      input = ['', 12, null, {}, undefined, ' ', {dummy: ''}];
      output = NetMetrixTracker._removeEmptyMembers(input);
      expect(output).to.deep.equal([12, {}, ' ', {}]);
    });

    it('if the array is empty', () => {
      input = [];
      output = NetMetrixTracker._removeEmptyMembers(input);
      expect(output).to.be.empty;
    });
  });

  describe('_removeEmptyMembers accepts', () => {
    it('undefined or null as input and returns an empty array', () => {
      output = NetMetrixTracker._removeEmptyMembers();
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._removeEmptyMembers(null);
      expect(output).to.deep.equal([]);
    });
  });

  describe('_getOrderedPath can create a path', () => {
    it('from object properties in a specified order', () => {
      input = {
        path: {
          event: 'pageview',
          view: 'page',
          sitename: 'aaz',
          path: 'aargau/aarau/mein-artikel-66666666',
          dummy: 'dummy',
          product: 'live'
        }
      };
      output = NetMetrixTracker._getOrderedPath(input);
      expect(output).to.deep.equal(['live', 'aaz', 'aargau', 'page', 'pageview']);
    });

    it('from object properties even when the properties are missing', () => {
      let input2 = {
        path: {}
      };
      output = NetMetrixTracker._getOrderedPath(input2);
      expect(output).to.deep.equal([]);
    });
  });

  describe('_getOrderedPath accepts', () => {
    it('an empty object, an empty array, undefined, null or any deep object as input and returns an empty string', () => {
      output = NetMetrixTracker._getOrderedPath();
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath(null);
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({});
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath([]);
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({path: { dummy: null}});
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({path: []});
      expect(output).to.deep.equal([]);
      output = NetMetrixTracker._getOrderedPath({dummy: {dummy: ''}, path: null});
      expect(output).to.deep.equal([]);
    });
  });
});
