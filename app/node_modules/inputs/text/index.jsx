import React from 'react';
import bem from 'react-bem-helper';
import InputWrapper from 'inputs/wrapper';

const classes = new bem('input');

export default React.createClass({
  displayName: 'TextInput',

  propTypes: {
    label: React.PropTypes.string,
    className: React.PropTypes.string,
    name: React.PropTypes.string.isRequired,
    description: React.PropTypes.string,
    hint: React.PropTypes.string,
    onChange: React.PropTypes.func,
    placeholder: React.PropTypes.string,
    id: React.PropTypes.string,
    type: React.PropTypes.string,
    value: React.PropTypes.string,
  },

  getInitialState() {
    return {
      value: this.props.value
    };
  },

  componentDidMount() {
    // @TODO: remove if this project ever updates to react 0.14
    // before that, minLength are filtered out
    var { minLength } = this.props;
    var node = React.findDOMNode(this.refs.input);

    if (minLength) {
      node.setAttribute('minLength', minLength);
    }
  },

  componentWillReceiveProps: function(nextProps) {
    if (nextProps.value && this.state.value !== nextProps.value) {
      this.setState({ value: nextProps.value });
    }
  },

  getDefaultProps: () => ({
    type: 'text'
  }),

  onValueChange: function() {
    var value = React.findDOMNode(this.refs.input).value;
    this.setState({ value: value });

    if (this.props.onChange) {
      this.props.onChange(this.props.name, value);
    }
  },

  render() {
    const id = this.props.id || this.props.name;

    return (
      <InputWrapper {...this.props} id={id}>
        <input
          {...this.props}
          {...classes({ modifier: 'text' })}
          id={id}
          ref='input'
          onChange={this.onValueChange}
          value={this.state.value} />
      </InputWrapper>
    );
  }
});
