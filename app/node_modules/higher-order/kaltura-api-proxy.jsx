import React from 'react';
import KalturaAPI from 'helpers/kaltura-api';

export default React.createClass({

  displayName: 'KalturaAPIProxy',

  propTypes: {
    format: React.PropTypes.number.isRequired,
    mediaTypeEqual: React.PropTypes.number.isRequired,
    component: React.PropTypes.element,
    onSetVideos: React.PropTypes.func,
    // set this to false if you don't want to automatically load videos when component is rendered (prevention of infinite loops)
    skipGetVideos: React.PropTypes.bool,
    searchText: React.PropTypes.string.isRequired,
    pageIndex: React.PropTypes.number.isRequired,
    videosPerPage: React.PropTypes.number.isRequired
  },

  getDefaultProps() {
    return {
      // response in json format
      format: 1,
      // =1 for video
      mediaTypeEqual: 1,
      videos: null,
      onSetVideos: function() {
        // @TODO: @Richard: What do you think of this way to throw errors on vital properties not implemented?
        // console.error('KalturaAPIProxy.props.onSetVideos not implemented');
      },
      skipGetVideos: true,
      searchText: '',
      videosPerPage: 12
    };
  },

  getInitialState() {
    return {
      // baseEntry for all media objects like Kaltura videos, YouTube videos, audio etc.
      service: 'baseEntry',
      action: 'list',
      filter: {
        freeText: this.props.searchText+'*',
        //@TODO: add constants and function
        orderBy: '-createdAt',
        categoriesIdsMatchAnd: null
      },
      pager: {
        pageIndex: 1
      },
      videos: this.props.videos
    };
  },

  componentDidUpdate() {
    if (!this.props.skipGetVideos) {
      //@TODO: extract into loadVideos()
      var kalturaAPI = new KalturaAPI({
        ssl: false,
        domain: 'www.aargauerzeitung.ch',
        path: '/__kaltura_api_proxy__',
        service: this.state.service,
        action: this.state.action,
        format: 1,
        orderByKey: 'createAt',
        orderDescending: true,
        freeText: this.props.searchText,
        mediaTypeEqual: this.props.mediaTypeEqual,
        categoriesIdsMatchAnd: this.state.filter.categoriesIdsMatchAnd,
        pageIndex: this.props.pageIndex,
        pageSize: this.props.videosPerPage
      });
      kalturaAPI.getVideos(this.props.onSetVideos);

      // load videos using promise
      kalturaAPI.getVideos().then((response) => {
        this.props.onSetVideos(response.data);
        // @TODO: implement in KalturaAPI
        /*this.setState({
          loadingStatus: 0
        });*/
      }).catch(function () {
        // @TODO: implement in KalturaAPI: show alert component if error occured
        /*this.setState({
          loadingStatus: 2
        });*/
      });

      /*this.setState({
        loadingStatus: 1
      });*/
    }

  },

  render() {
    var Component = this.props.component;
    return Component;
  }
});
