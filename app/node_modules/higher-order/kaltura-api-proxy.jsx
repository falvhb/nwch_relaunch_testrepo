import React from 'react';
import axios from 'axios';

export default React.createClass({

  displayName: 'KalturaAPIProxy',

  propTypes: {
    format: React.PropTypes.number.isRequired,
    mediaTypeEqual: React.PropTypes.number.isRequired,
    component: React.PropTypes.element,
    onSetVideos: React.PropTypes.func,
    // set this to false if you don't want to automatically load videos when component is rendered (prevention of infinite loops)
    skipGetVideos: React.PropTypes.bool,
    searchText: React.PropTypes.string.isRequired,
    pageIndex: React.PropTypes.number.isRequired,
    videosPerPage: React.PropTypes.number.isRequired
  },

  getDefaultProps() {
    return {
      // response in json format
      format: 1,
      // =1 for video
      mediaTypeEqual: 1,
      videos: null,
      onSetVideos: function() {
        // @TODO: @Richard: What do you think of this way to throw errors on vital properties not implemented?
        // console.error('KalturaAPIProxy.props.onSetVideos not implemented');
      },
      skipGetVideos: true,
      searchText: '',
      videosPerPage: 12
    };
  },

  getInitialState() {
    return {
      // baseEntry for all media objects like Kaltura videos, YouTube videos, audio etc.
      service: 'baseEntry',
      action: 'list',
      filter: {
        freeText: this.props.searchText+'*',
        //@TODO: add constants and function
        orderBy: '-createdAt',
        categoriesIdsMatchAnd: null
      },
      pager: {
        pageIndex: 1
      },
      videos: this.props.videos
    };
  },

  // @TODO:@Richard: Put this in a class of its own?
  // Reasoning would be to decouple getting of Videos from Kaltura's Client API (if we switch to another library in the future)
  // var config = KalturaAPI.getConfiguration(domain, ssl);
  // var action = KalturaAPI.getAction(service, action);
  // var orderBy = KalturaAPI.getOrderBy(key, descending);
  // var filter = KalturaAPI.getFilter(freeText, mediaTypeEqual, orderBy);
  // var pager = KalturaAPI.getPager(pageIndex, pageSize);
  // var format = 1;
  // KalturaAPI.register(config, action, filter, pager, format);
  // KalturaAPI.getVideos(onData);
  getURL() {
    var protocol = 'http://';
    var server = 'www.aargauerzeitung.ch';
    var path = '/__kaltura_api_proxy__';
    var queryString = '?action='+this.state.action
                      + (this.state.filter.categoriesIdsMatchAnd ? '&filter:categoriesIdsMatchAnd='+this.state.filter.categoriesIdsMatchAnd : '')
                      // @TODO: put in separate function getFreeTextQuery
                      + '&filter:freeText='+this.props.searchText+'*'
                      + '&filter:mediaTypeEqual='+this.props.mediaTypeEqual
                      + '&filter:orderBy='+this.state.filter.orderBy
                      + '&format='+this.props.format
                      + '&pager:pageIndex='+this.props.pageIndex
                      + '&pager:pageSize='+this.props.videosPerPage
                      + '&service='+this.state.service;

    return protocol+server+path+queryString;
  },

  getVideos(onData) {
    var url = this.getURL();
    axios.get(url)
    .then((response) => {
      onData(response.data.objects);
    })
    .catch(function () {
      //@TODO:@Richard: Do we need to have a solution for error logging?
      // console.log('Error loading KalturaAPIProxy data', response);
    });
  },

  componentDidUpdate() {
    if (!this.props.skipGetVideos) {
      this.getVideos(this.props.onSetVideos);
    }
  },

  render() {
    var Component = this.props.component;
    return Component;
  }
});
