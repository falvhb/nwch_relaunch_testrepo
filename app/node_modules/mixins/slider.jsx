/*global Flickity:true*/
import _ from 'lodash';

export default {

  // Breakpoint under which Flickity should be initialized
  breakpoint: 640,
  // Contains the instance of Flickity once initialized
  flickity: null,
  // The selector on which Flickity should be initialized
  flickityElement: null,
  // Index for the starting slide (zero for default)
  startingIndex: 0,
  // The options with which Flickity should be initialized
  flickityOptions: {
    freeScroll: false,
    prevNextButtons: false,
    pageDots: false,
  },

  startResizeEvent: null,

  stopResizeEvent: null,

  getViewportWidth() {
    return Math.max(document.documentElement.clientWidth, window.innerWidth);
  },

  startResize() {
    this.setState({
      resizing: true
    });
  },

  stopResize() {
    let self = this;
    setTimeout(function() {
      self.setState({ resizing: false });
    }, 100);
    this.setState({
      resizing: false,
      mobile: this.getViewportWidth() < this.breakpoint
    });
  },

  setupFlickity() {
    this.stopResize();
    this.startResizeEvent = _.debounce(this.startResize, 250, { leading: true });
    this.stopResizeEvent = _.debounce(this.stopResize, 250);
    window.addEventListener('resize', this.startResizeEvent);
    window.addEventListener('resize', this.stopResizeEvent);
  },

  testForInit(component) {
    if (component.getViewportWidth() <= component.breakpoint) {
      this.initFlickity();
    } else {
      this.setState({ loading: false });
    }
  },

  renderFlickity(params) {
    var wait = params.delay || 0, self = this;
    this.flickityElement = params.element;
    this.startingIndex = params.startIndex || 0;
    setTimeout(function() {
      self.setupFlickity(self);
      self.testForInit(self);
    }, wait);
  },

  componentDidUpdate() {
    if (this.state.mobile) {
      this.initFlickity();
    } else if (this.flickity !== null) {
      this.destroyFlickity();
    }
  },

  updateHeight(params) {
    var items = params.slider.getCellElements(), i;
    var height = params.destroy ? '' : params.slider.maxCellHeight + 'px';
    for (i = 0; i < items.length; ++i) {
      items[i].style.height = height;
    }
  },

  initFlickity() {
    if (typeof Flickity !== 'undefined' && !this.flickity) {
      let self = this;
      this.flickity = new Flickity(this.flickityElement, this.flickityOptions);
      this.updateHeight({
        slider: this.flickity
      });
      setTimeout(function() {
        self.setState({ loading: false });
      }, 100);
    }
  },

  destroyFlickity() {
    if (typeof this.flickity.destroy === 'function') {
      this.updateHeight({
        slider: this.flickity,
        destroy: true
      });
      this.flickity.destroy();
      this.flickity = null;
    }
  },

  componentWillUnmount() {
    window.removeEventListener('resize', this.startResizeEvent);
    window.removeEventListener('resize', this.stopResizeEvent);
    this.destroyFlickity();
  }

};
