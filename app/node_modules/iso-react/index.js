var React = require('react');
var ReactAddons = require('react/addons');
var TestUtils = ReactAddons.addons.TestUtils;
var escapeHtml = require('escape-html');

module.exports = function(selector) {

  var config = {
    selector: selector ? selector.replace('.', '') : 'az-iso'
  };

  var classNames = {
    wrap: config.selector,
    component: config.selector + '-component',
    state: config.selector + '-state',
  };

  var reactElement = function(params) {
    return React.createElement(params.component, params.state);
  };

  var getShallowData = function(params) {
    var shallowRenderer = TestUtils.createRenderer();
    shallowRenderer.render(reactElement(params));
    return shallowRenderer.getRenderOutput().props;
  };

  var createReactComponent = function(params) {
    return React.renderToString(reactElement(params), getShallowData(params), params.meta);
  };

  var wrap = function(params) {
    if (!params.component) {
      throw 'You must pass a component to the wrap function';
    }
    if (!params.meta.id) {
      throw 'You must pass a meta.id to the wrap function';
    }

    var metaData = escapeHtml(JSON.stringify(params.meta));
    var stateData = escapeHtml(JSON.stringify(getShallowData(params)));

    var html;
    html =  '<div class="' + classNames.wrap + '" data-meta="' + metaData + '">';
    html += '<div class="' + classNames.component + '">';
    html += createReactComponent(params);
    html += '</div>';
    html += '<span aria-hidden="true" class="' + classNames.state + '" data-state="' + stateData + '"></span>';
    html += '</div>';

    return html;
  };

  var hydrate = function(components) {
    var isos = document.querySelectorAll('.' + classNames.wrap);

    for (var i = 0, len = isos.length; i < len; i++) {
      var iso = isos[i];
      var wrapper = iso.querySelector('.' + classNames.component);
      var component = JSON.parse(iso.getAttribute('data-meta')).id;
      var state = JSON.parse(iso.querySelector('.' + classNames.state).getAttribute('data-state'));
      if (!components[component]) {
        throw 'Component not found for ' + component;
      } else {
        var el = React.createElement(components[component], state);
        React.render(el, wrapper);
      }
    }
  };

  return Object.freeze({
    wrap: wrap,
    hydrate: hydrate
  });
};
