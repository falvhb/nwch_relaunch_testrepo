import React from 'react';
import bem from 'react-bem-helper';
import path from 'path';
import _ from 'lodash';

const classes = new bem({
  name: 'iframe',
  prefix: 'styleguide-'
});

export default React.createClass({

  displayName: 'Iframe',

  propTypes: {
    component: React.PropTypes.object.isRequired,
    variation: React.PropTypes.object
  },

  constructUrl(component, variation) {
    return path.join('/styleguide', component.category, component.slug, (variation ? variation.slug : ''), 'preview');
  },

  componentDidMount() {
    var iframe = React.findDOMNode(this.refs.iframePreview);
    var timeout = 500;

    // Wait `timeout` before trying to resize the height of the iframe
    // The `onload` solution does not work because images inside content are
    // asynchronously loaded, bumping the height of the content after the load
    // event has fired. Too bad... I take full responsibility, sorry. :(
    setTimeout(function() {
      var html = iframe.contentWindow.document.documentElement;
      var body = iframe.contentWindow.document.body;
      var height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
      iframe.height = height + 100 + 'px';
    }, timeout);
  },

  render() {
    var props = this.props;
    var modifier = _.get(props, 'variation.width') || _.get(props, 'component.width') || 'default';
    var inverted = _.get(props, 'variation.inverted') === true || _.get(props, 'component.inverted') === true
      ? 'inverted'
      : null;

    return (
      <iframe {...classes('', [modifier, inverted])} width='100%' ref='iframePreview' src={this.constructUrl(props.component, props.variation)}>
        {'Unfortunately, the iframe could not be displayed, sorry! :('}
      </iframe>
    );
  }

});
