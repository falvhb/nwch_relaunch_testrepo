var _ = require('lodash');
var getPageConfig = require('./helpers/get-page-config');
var getAdSlotConfig = require('./helpers/responsive-ads').getAdSlotConfig;

var ADTECH = window.ADTECH;

var stickyParams = {}, stickyActive = false, scrollEvent;

// var transformPosition = function(y) {
//   var style = {};
//   style.webkitTransform = translate3d(0, y + 'px', 0);
//   style.mozTransform = translate3d(0, y + 'px', 0);
//   style.msTransform = translate3d(0, y + 'px', 0);
//   style.transform = translate3d(0, y + 'px', 0);
//   return style;
// };

var getPosition = function(element) {
  var xPosition = 0;
  var yPosition = 0;
  var el = element;
  while (el) {
    xPosition += (el.offsetLeft - el.scrollLeft + el.clientLeft);
    yPosition += (el.offsetTop - el.scrollTop + el.clientTop);
    el = el.offsetParent;
  }

  return { x: xPosition, y: yPosition };
};

var handleStickyResize = function() {
  var vw = Math.max(document.documentElement.clientWidth, window.innerWidth);
  if (vw > stickyParams.breakpoint && !stickyActive) {
    addStickyAdScrolling();
  } else {
    removeStickyAdScrolling();
  }
};

var addStickyAdScrolling = function() {
  window.addEventListener('scroll', scrollEvent);
  stickyActive = true;
};

var removeStickyAdScrolling = function() {
  window.removeEventListener('scroll', scrollEvent);
  stickyActive = false;
};

var stickyScrollEvent = function() {
  var element = stickyParams.element;
  var stopper = stickyParams.stopper;
  var offset = stickyParams.offset;
  var stickyElPosition = getPosition(element);
  var stopperPosition = getPosition(stopper);
  var stickyElHeight = element.offsetHeight;
  var stopperHeight = stopper.offsetHeight;
  var stopperMarker = stickyElHeight + offset - stopperHeight;

  if (stickyElPosition.y <= offset && stopperPosition.y > stopperMarker) {
    var translateY = Math.abs((stickyElPosition.y - offset));
    element.style.webkitTransform = 'translate3d(0, ' + translateY + 'px, 0)';
  } else if (stopperPosition.y > stopperMarker) {
    element.style.webkitTransform = 'translate3d(0, 0, 0)';
  }

};

var Advertising = {

  init: function (selector) {
    // load the config for current page from global az object
    var pageAdConfig = _.get(window.az, 'advertising.pageConfig');
    var siteId, pageConfig, ads, keywords;

    // exit if no ad configuration for page is found
    if (!pageAdConfig || !_.isObject(pageAdConfig)) {
      // console.warn('no advertisng configured');
      return;
    }

    if (typeof ADTECH !== 'undefined') {
      // turn on debug mode if needed
      // ADTECH.debugMode = true;

      // get current site id
      siteId = pageAdConfig.siteId;
      // get the ad keywords
      keywords = this.getAdKeywords().join(':');
      // page config
      pageConfig = getPageConfig(siteId, keywords);
      ADTECH.config.page = pageConfig;

      // setup ad slots
      this.setupAds(pageAdConfig.slots);

      // Select all ads on the page
      ads = document.querySelectorAll(selector);

      // Loop them and enqueue
      _.each(pageAdConfig.slots, function(slot) {
        ADTECH.enqueueAd(slot.name);
      });

      // Execute
      ADTECH.executeQueue({
        multiAd: {
          disableAdInjection: true
        }
      });

    } else {
      // Remove all our ad slots
      _.each(ads, function(ad) {
        ad.parentNode.removeChild(ad);
      });

    }
  },

  stickAd: function(params) {
    var element = document.querySelector(params.element);
    if (element) {
      stickyParams = {
        element: element,
        stopper: document.querySelector(params.stopper),
        offset: params.offset,
        breakpoint: params.breakpoint
      };
      scrollEvent = stickyScrollEvent;
      window.addEventListener('resize', _.debounce(handleStickyResize, 200), false);
      handleStickyResize();
    }
  },

  setupAds: function (adSlots) {
    _.each(adSlots, function (slot) {
      var slotName = slot.name;
      var slotPlacements = slot.placements;
      var slotConfig = getAdSlotConfig(slotPlacements);
      // don't get confused on the naming here, Adtech treats everything as placements
      // while we have slots which can have multiple placements for responsive ads
      ADTECH.config.placements[slotName] = slotConfig;
    });
  },

  getAdKeywords: function () {
    var keywords = [];
    var keywordAttribute = 'data-ad-keywords';
    var keyWordSelector = '[' + keywordAttribute + ']';
    var keywordElements = document.querySelectorAll(keyWordSelector);
    _.each(keywordElements, function (element) {
      var itemKeywords = element.getAttribute(keywordAttribute).split(',');
      // trim whitespace for each keyword
      itemKeywords = _.map(itemKeywords, function (keyword) {
        return keyword.trim().toLowerCase();
      });

      keywords = keywords.concat(itemKeywords);

    });
    keywords = _.unique(keywords);

    return keywords;
  }

};

module.exports = Advertising;
