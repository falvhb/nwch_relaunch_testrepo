var _ = require('lodash');
var getPageConfig = require('./helpers/get-page-config');
var getAdSlotConfig = require('./helpers/responsive-ads').getAdSlotConfig;
var getViewportWidth = require('helpers/get-viewport-width');

var ADTECH = window.ADTECH;

var stickyParams = {}, scrollEvent, stickyAdsCount = 0;

var stickyScrollEvent = function() {
  var scrollY = window.scrollY || window.pageYOffset;
  scrollBehaviour(scrollY);
};

var toggleStickyScrolling = function() {
  scrollEvent = _.throttle(stickyScrollEvent, 10);
  if (getViewportWidth() > stickyParams.breakpoint) {
    // calculate dimensions
    var headerHeight = document.querySelector('.header-nav').offsetHeight;
    var stickyOffset = stickyParams.offset + headerHeight;
    var elHeightDifference = stickyParams.element.offsetHeight - stickyParams.stopper.offsetHeight;
    // use these later
    stickyParams.startStick = stickyParams.element.offsetTop - stickyOffset;
    stickyParams.stopStick = stickyParams.stopper.offsetTop + (elHeightDifference - stickyOffset);
    stickyParams.stickyOffset = stickyOffset;
    // add event and trigger
    window.addEventListener('scroll', scrollEvent);
    stickyScrollEvent();
  } else {
    window.removeEventListener('scroll', scrollEvent);
  }
};

var fixedPosition = function(y) {
  stickyParams.wrapper.style.position = y ? 'fixed' :  'static';
  stickyParams.wrapper.style.top = y ? y + 'px' : 'auto';
};

var scrollBehaviour = function(current) {
  var stickPosition = 0;

  if (current >= stickyParams.startStick && current <= stickyParams.stopStick) {
    stickPosition = stickyParams.stickyOffset;
  }

  if (current > stickyParams.stopStick) {
    stickPosition = stickyParams.stickyOffset - (current - stickyParams.stopStick);
  }

  fixedPosition(stickPosition);
};

var createStickyWrapper = function(el, i) {
  var org_html = el.innerHTML;
  var new_html = '<div id="stickynode--' + i + '">' + org_html + '</div>';
  el.innerHTML = new_html;
};

var Advertising = {

  init: function (selector) {
    // load the config for current page from global az object
    var pageAdConfig = _.get(window.az, 'advertising.pageConfig');
    var siteId, pageConfig, ads, keywords;

    // exit if no ad configuration for page is found
    if (!pageAdConfig || !_.isObject(pageAdConfig)) {
      // console.warn('no advertisng configured');
      return;
    }

    if (typeof ADTECH !== 'undefined') {
      // turn on debug mode if needed
      // ADTECH.debugMode = true;

      // get current site id
      siteId = pageAdConfig.siteId;
      // get the ad keywords
      keywords = this.getAdKeywords().join(':');
      // page config
      pageConfig = getPageConfig(siteId, keywords);
      ADTECH.config.page = pageConfig;

      // setup ad slots
      this.setupAds(pageAdConfig.slots);

      // Select all ads on the page
      ads = document.querySelectorAll(selector);

      // Loop them and enqueue
      _.each(pageAdConfig.slots, function(slot) {
        ADTECH.enqueueAd(slot.name);
      });

      // Execute
      ADTECH.executeQueue({
        multiAd: {
          disableAdInjection: true
        }
      });

    } else {
      // Remove all our ad slots
      _.each(ads, function(ad) {
        ad.parentNode.removeChild(ad);
      });

    }

  },

  stickAd: function(params) {
    var element = document.querySelector(params.element);
    if (element) {
      // wrap the element so we can always get offsetTop value from the parent
      createStickyWrapper(element, stickyAdsCount);
      // form stick params
      stickyParams = {
        element: element,
        wrapper: document.getElementById('stickynode--' + stickyAdsCount),
        stopper: document.querySelector(params.stopper) || document.querySelector('.footer'),
        offset: params.offset,
        breakpoint: params.breakpoint
      };
      // set events and init
      var debounced = _.debounce(toggleStickyScrolling, 200);
      window.addEventListener('resize', debounced, false);
      toggleStickyScrolling();
      stickyAdsCount++;
    }
  },

  setupAds: function (adSlots) {
    _.each(adSlots, function (slot) {
      var slotName = slot.name;
      var slotPlacements = slot.placements;
      var slotConfig = getAdSlotConfig(slotPlacements);
      // don't get confused on the naming here, Adtech treats everything as placements
      // while we have slots which can have multiple placements for responsive ads
      ADTECH.config.placements[slotName] = slotConfig;
    });
  },

  getAdKeywords: function () {
    var keywords = [];
    var keywordAttribute = 'data-ad-keywords';
    var keyWordSelector = '[' + keywordAttribute + ']';
    var keywordElements = document.querySelectorAll(keyWordSelector);
    _.each(keywordElements, function (element) {
      var itemKeywords = element.getAttribute(keywordAttribute).split(',');
      // trim whitespace for each keyword
      itemKeywords = _.map(itemKeywords, function (keyword) {
        return keyword.trim().toLowerCase();
      });

      keywords = keywords.concat(itemKeywords);

    });
    keywords = _.unique(keywords);

    return keywords;
  }

};

module.exports = Advertising;
