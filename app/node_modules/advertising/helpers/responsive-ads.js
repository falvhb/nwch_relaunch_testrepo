var _ = require('lodash');

var advertisingSizes = {
  'mobile': {
    "min": 0,
    "max": 727
  },
  'tablet': {
    'min': 728,
    'max': 1049
  },
  'desktop': {
    'min': 1150,
    'max': 3000
  }
};

/**
 * Get the ADTech responsive configuration for an advertising slot
 *
 * @param  {array}  placements  Array of objects for the placements
 *                              each item must have an placement id and type
 *                              attribute (mobile|tablet|desktop)
 *                              example: {id: 12456, type: 'mobile'}
 *
 * @return  {object}  The configuration object which can be passed to AdTech
 */
function getAdSlotConfig(placements) {
  var slotConfig = {
    params: {
      target: "_blank"
    },
    fif: {
      usefif: true
    },
    responsive: {
      useresponsive: true,
      allowGaps: true
    }
  };

  var slotBounds = _.map(placements, function (placement) {
    var placementId = placement.id;
    var placementType = placement.type;
    var placementBounds = advertisingSizes[placementType];
    var placementConfig = {
      id: parseInt(placementId, 10)
    };

    // fall back to desktop if wrong value is passed
    if (typeof placementBounds === undefined) {
      placementBounds = advertisingSizes.desktop;
    }
    placementConfig = _.extend(placementConfig, placementBounds);
    return placementConfig;
  });

  slotConfig.responsive.bounds = slotBounds;
  // console.log(slotConfig);
  return slotConfig;
}

module.exports = {
  getAdSlotConfig: getAdSlotConfig
};
