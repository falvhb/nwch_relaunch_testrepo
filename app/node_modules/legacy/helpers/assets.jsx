
import { registerContentType, getImplementation } from "./registry.jsx";



export class RelationImage {
  constructor(relImage) {
    this.relation = relImage;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return this.relation.image_url + '?' + this.relation.process;
  }
}
registerContentType(RelationImage, 'asset_image_relation');


export class RelationImageGallery {
  constructor(relImageGallery) {
    // place assets[0] onto the object
    this.relation = relImageGallery;
  }

  get canBeTeaserImage() {
    return true;
  }

  _getAsset() {
    if (!this._assetImpl) { // lazy impl ...
      // call the actual implementation: in case of imageGallery: images[0]
      this._assetImpl = getImplementation(this.relation.asset);
      // console.log("RelationImageGallery: this._assetImpl=", this._assetImpl)
    }
    return this._assetImpl;
  }

  get url() {
    // in this special case, let the implementation decide
    // console.log("RelationImageGallery: this._getAsset=", this._getAsset());
    return this._getAsset().url;
  }
}
registerContentType(RelationImageGallery, 'asset_image_gallery_relation');


export class RelationVideo {
  constructor(relVideo) {
    this.relation = relVideo;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return this.relation.image_url + '?' + this.relation.process;
  }
}
registerContentType(RelationVideo, 'asset_video_relation');


export class RelationAudio {
  constructor(relAudio) {
    this.relation = relAudio;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return this.relation.image_url + '?' + this.relation.process;
  }
}
registerContentType(RelationAudio, 'asset_audio_relation');


export class RelationHtmlSnippet {
  constructor(relHtmlSnippet) {
    this.relation = relHtmlSnippet;
  }

  get canBeTeaserImage() {
    return false;
  }

  get url() {
    return "";
  }
}
registerContentType(RelationHtmlSnippet, 'asset_htmlsnippet_relation');


export class RelationSurvey {
  constructor(relSurvey) {
    this.relation = relSurvey;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    if (this.relation.asset && this.relation.asset.teaser) {
      return this.relation.asset.teaser.image_url + '?' + this.relation.asset.teaser.process;
    }
    //return mainAsset.asset.teaser.image_url
  }
}
registerContentType(RelationSurvey, 'asset_survey_relation');


export class RelationQuiz {
  constructor(relQuiz) {
    this.relation = relQuiz;
  }

  get canBeTeaserImage() {
    return false;
  }

  get url() {
    // for now we return false, but could be this: ???
    //if (this.relation.asset && this.relation.asset.teaser) {
    //  return this.relation.asset.teaser.image_url + '?' + this.relation.asset.teaser.process;
    //}
    return "";
  }
}
registerContentType(RelationSurvey, 'asset_survey_relation');



// dummy skeleton, RelationVideo does the logic since the image_url?process is picked up from relation ...
export class Image {
  constructor(image) {
    this.image = image;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    // from asset?
    return this.image.image_url;
  }

}
registerContentType(Image, 'asset_image');

// in use
export class ImageGallery {
  constructor(imageGallery) {
    this.imageGallery = imageGallery;
  }

  get canBeTeaserImage() {
    if (this.imageGallery.images.length > 1) {
      return true;
    }
  }

  get url() {
    if (this.imageGallery.images.length > 1 && this.imageGallery.images[0]) {
      return this.imageGallery.images[0].image_url + '?' + this.imageGallery.images[0].process
    }
    return null;
  }
}
registerContentType(ImageGallery, 'asset_image_gallery');

// dummy skeleton, RelationVideo does the logic since image_url?process is picked up from relation ...
export class Video {
  constructor(video) {
    this.video = video;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return "";
  }

}
registerContentType(Video, 'asset_video');


// dummy skeleton, RelationAudio does the logic since image_url?process is picked up from relation ...
export class Audio {
  constructor(audio) {
    this.audio = audio;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return "";
  }

}
registerContentType(Audio, 'asset_audio');


// dummy skeleton, RelationHtmlSnippet does the logic since image_url?process is picked up from relation ...
export class HtmlSnippet {
  constructor(htmlSnippet) {
    this.htmlSnippet = htmlSnippet;
  }

  get canBeTeaserImage() {
    return false;
  }

  get url() {
    return "";
  }

}
registerContentType(Audio, 'asset_audio');

// dummy skeleton, RelationSurvey does the logic since image_url?process is picked up from relation ...
export class Survey {
  constructor(survey) {
    this.survey = survey;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return "";
  }

}
registerContentType(Survey, 'asset_survey');

// dummy skeleton, RelationQuiz does the logic since image_url?process is picked up from relation ...
export class Quiz {
  constructor(quiz) {
    this.quiz = quiz;
  }

  get canBeTeaserImage() {
    return true;
  }

  get url() {
    return "";
  }

}
registerContentType(Quiz, 'asset_quiz');
