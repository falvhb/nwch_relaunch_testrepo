// contains the Relation and Asset classes stored in the registry
import { registerContentType, getImplementation, getRelationFor } from "./registry.jsx";

const KALTURA_CONFIG = {
  cropType: 3,                                // should remain at 3
  partnerId: process.env.KALTURA_ACCOUNT_ID   // from existing config, e.g. 1719221
};

/**
 * base class from which all Assets derive, these usually override constructor and imageUrl in the derived class
 */
export class BaseAsset {
  constructor(context, contentType, canBeTeaserImage=true) {
    this.context = context;
    this.contentType = contentType;
    this._canBeTeaserImage = canBeTeaserImage;
  }

  get canBeTeaserImage() {
    return this._canBeTeaserImage;
  }

  set canBeTeaserImage(val) {
    this._canBeTeaserImage = val;
  }

  getImageUrl() {
    return '';
  }
}

/**
 * base class from which all Relations derive
 */
export class BaseRelation {
  constructor(context) {
    this.context = context;
    this._canBeTeaserImage = true;
    this._assetImpl = null;
  }

  getImageUrl(size) {
    return this.asset.getImageUrl(size);
  }

  // all Relations so far can be a teaserImage, except for htmlsnippet, document and infographic
  get canBeTeaserImage() {
    return true;
  }

  set canBeTeaserImage(val) {
    this._canBeTeaserImage = val;
  }

  get contentType() {
    return this.asset.contentType;
  }

  get asset() {
    if (!this._assetImpl) { // lazy impl ...
      // call the actual implementation for the context
      this._assetImpl = getImplementation(this.context.asset);
    }
    return this._assetImpl;
  }
}

export class RelationImage extends BaseRelation {
}
registerContentType(RelationImage, 'asset_image_relation');

export class RelationImageGallery extends BaseRelation {
}
registerContentType(RelationImageGallery, 'asset_image_gallery_relation');

/*
def kalturaImageUrl(kalturaId, variant, request):
       variant = VARIANTS['kalturaTeaser'].get(variant)
       if not variant:
           return None
       settings = kalturaSettings(request)
       cropType = 3  # crop according to the given dimensions while
                     # maintaining the original aspect ratio. The
                     # resulting image may be cover only part of the
                     # original image.
                     # http://knowledge.kaltura.com/kaltura-thumbnail-api
       return 'http://cdnbakmi.kaltura.com/p/%(partnerId)s/' \
              'sp/%(partnerId)s00/thumbnail/entry_id/%(entryId)s/' \
              'width/%(width)s/height/%(height)s/type/%(type)s' % dict(
                  partnerId=settings['partnerId'],
                  entryId=kalturaId,
                  width=variant['w'],
                  height=variant['h'],
                  type=cropType
              )
              */

function getKalturaImageUrl(kalturaId, size) {
  // kalturaId e.g.: '1_7zywfjdn'

  // crop according to the given dimensions while maintaining the original aspect ratio.
  // The resulting image may be only covers part of the original image.
  // http://knowledge.kaltura.com/kaltura-thumbnail-api
  // working sample: 'http://cdnbakmi.kaltura.com/p/1789881/sp/178988100/thumbnail/entry_id/1_7zywfjdn/width/220/height/130/type/3'
  let url = `http://cdnbakmi.kaltura.com/p/${KALTURA_CONFIG.partnerId}/sp/${KALTURA_CONFIG.partnerId }00/thumbnail/entry_id/${kalturaId}/width/${size.width}/height/${size.height}/type/${KALTURA_CONFIG.cropType}`;
  return url;
}

export class RelationVideo extends BaseRelation {
  getImageUrl(size) {

    // let's query the Image Asset to get the imageUrl
    let relObj = null;
    if (this.context.asset.still_image && this.context.asset.still_image.asset) {
      relObj = getRelationFor(this.context.asset.still_image.asset, this.context.asset.still_image);
    }
    if (relObj && relObj.canBeTeaserImage) {
      return relObj.getImageUrl(size);
    }
    // kaltura_id ? return the kaltura url
    if (this.context.asset && this.context.asset.kaltura_id && this.context.asset.kaltura_id.length > 0) {
      return getKalturaImageUrl(this.context.asset.kaltura_id, size);
    }
    return "";

  }
}
registerContentType(RelationVideo, 'asset_video_relation');

export class RelationAudio extends BaseRelation {
  getImageUrl(size) {

    // only if still_image exists ...
    let relObj = null;
    if (this.context.asset.still_image && this.context.asset.still_image.asset) {
      relObj = getRelationFor(this.context.asset.still_image.asset, this.context.asset.still_image);
    }
    if (relObj && relObj.canBeTeaserImage) {
      return relObj.getImageUrl(size);
    }
    return "";
  }
}
registerContentType(RelationAudio, 'asset_audio_relation');

export class RelationHtmlSnippet extends BaseRelation {
  get canBeTeaserImage() {
    return false;
  }
  getImageUrl() {
    return "";
  }
}
registerContentType(RelationHtmlSnippet, 'asset_htmlsnippet_relation');

export class RelationSurvey extends BaseRelation {
  getImageUrl() {
    if (this.context.asset && this.context.asset.teaser) {
      return this.context.asset.teaser.image_url;
    }
  }
}
registerContentType(RelationSurvey, 'asset_survey_relation');

export class RelationQuiz extends BaseRelation {
  getImageUrl() {
    if (this.context.asset && this.context.asset.teaser) {
      return this.context.asset.teaser.image_url;
    }
    return "";
  }
}
registerContentType(RelationQuiz, 'asset_quiz_relation');

// and now for the the asset classes ...

export class Image extends BaseAsset {
  constructor(context) {
    super(context, 'asset_image');
  }

  getImageUrl() {
    return this.context.image_url;
  }
}
registerContentType(Image, 'asset_image');

export class ImageGallery extends BaseAsset {
  constructor(context) {
    super(context, 'asset_image_gallery');
  }
  get canBeTeaserImage() {
    // only galleries with more than one image are eligible to serve as teaser
    if (this.context.images.length > 1) {
      return true;
    }
  }
  getImageUrl(size) {

    let relObj = null;
    if (this.context.images.length > 1 && this.context.images[0]) {
      relObj = getRelationFor(this.context.images[0].asset, this.context.images[0]);
    }
    if (relObj && relObj.canBeTeaserImage) {
      return relObj.getImageUrl(size);
    }

    return "";
  }
}
registerContentType(ImageGallery, 'asset_image_gallery');

// dummy skeleton, RelationVideo does the logic since image_url?process is picked up from relation ...
export class Video extends BaseAsset {
  constructor(context) {
    super(context, 'asset_video');
  }
  getImageUrl() {
    return "";
  }
}
registerContentType(Video, 'asset_video');

// dummy skeleton, RelationAudio does the logic since image_url?process is picked up from relation ...
export class Audio extends BaseAsset {
  constructor(context) {
    super(context, 'asset_audio');
  }
  getImageUrl() {
    return "";
  }
}
registerContentType(Audio, 'asset_audio');

export class HtmlSnippet extends BaseAsset {
  constructor(context) {
    super(context, 'asset_htmlsnippet', false);
  }

  getImageUrl() {
    return "";
  }
}
registerContentType(HtmlSnippet, 'asset_htmlsnippet');

export class Survey extends BaseAsset {
  constructor(context) {
    super(context, 'asset_survey');
  }
  getImageUrl() {
    return "";
  }
}
registerContentType(Survey, 'asset_survey');

export class Quiz extends BaseAsset {
  constructor(context) {
    super(context, 'asset_quiz');
  }
  getImageUrl() {
    return "";
  }
}
registerContentType(Quiz, 'asset_quiz');
