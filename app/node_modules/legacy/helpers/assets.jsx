// contains the Relation and Asset classes stored in the registry
import { registerContentType, getRelationFor } from './registry';
import KalturaImageProxy from 'helpers/kaltura-image-proxy';
import {createImageSrc} from '../../../../common/image';


const KALTURA_CONFIG = {
  cropType: 3,                                // should remain at 3
  partnerId: process.env.KALTURA_ACCOUNT_ID   // from existing config, e.g. 1719221
};


/**
 * base class from which all Assets derive, these usually override constructor and getImageUrl in the derived class
 */
export class BaseAsset {
  constructor(context, contentType) {
    this.context = context;
    this.contentType = contentType;
  }

  get canBeTeaserImage() {
    return false;
  }

  getImageUrl() {
    return '';
  }
}


export class Image extends BaseAsset {
  constructor(context) {
    super(context, 'asset_image');
  }

  get canBeTeaserImage() {
    return true;
  }

  getImageUrl(size) {
    return createImageSrc(this.context.image_url,
                          size.width,
                          size.height,
                          false);
  }
}
registerContentType(Image, 'asset_image');


export class ImageGallery extends BaseAsset {
  constructor(context) {
    super(context, 'asset_image_gallery');
  }

  get canBeTeaserImage() {
    // only galleries with more than one image are eligible to serve as teaser
    if (this.context.images.length > 1) {
      return true;
    }
  }

  getImageUrl(size) {
    let relObj = null;

    let paIdx = this.context.primaryassetindex || 0;
    if (paIdx > this.context.images.length) {
      paIdx = 0;
    }

    if (this.context.images.length > 1 && this.context.images[paIdx]) {
      relObj = getRelationFor(this.context.images[paIdx].asset, this.context.images[paIdx]);
    }
    if (relObj && relObj.canBeTeaserImage) {
      return relObj.getImageUrl(size);
    }

    return "";
  }
}
registerContentType(ImageGallery, 'asset_image_gallery');


export class Video extends BaseAsset {
  constructor(context) {
    super(context, 'asset_video');
  }

  get canBeTeaserImage() {
    return (this.context.still_image && this.context.still_image.asset) ||
           (this.context.kaltura_id && this.context.kaltura_id.length > 0);
  }

  getImageUrl(size) {
    if (this.context.still_image && this.context.still_image.asset) {
      let relObj = getRelationFor(this.context.still_image.asset,
                                  this.context.still_image);
      if (relObj.canBeTeaserImage) {
        return relObj.getImageUrl(size);
      }
    }
    if (this.context.kaltura_id && this.context.kaltura_id.length > 0) {
      var proxy = new KalturaImageProxy(KALTURA_CONFIG.partnerId,
                                        true,
                                        this.context.kaltura_id);
      return proxy.getImageURL(size.width, size.height, true);
    }
    return "";
  }
}
registerContentType(Video, 'asset_video');


export class Audio extends BaseAsset {
  constructor(context) {
    super(context, 'asset_audio');
  }

  get canBeTeaserImage() {
    return this.context.still_image && this.context.still_image.asset;
  }

  getImageUrl(size) {
    if (this.canBeTeaserImage) {
      let relObj = getRelationFor(this.context.still_image.asset,
                                  this.context.still_image);
      if (relObj.canBeTeaserImage) {
        return relObj.getImageUrl(size);
      }
    }
    return "";
  }
}
registerContentType(Audio, 'asset_audio');

export class HtmlSnippet extends BaseAsset {
  constructor(context) {
    super(context, 'asset_htmlsnippet');
  }
}
registerContentType(HtmlSnippet, 'asset_htmlsnippet');

export class Survey extends BaseAsset {
  constructor(context) {
    super(context, 'asset_survey');
  }

  get canBeTeaserImage() {
    return this.context.teaser && this.context.teaser.asset;
  }

  getImageUrl(size) {
    if (this.canBeTeaserImage) {
      let relObj = getRelationFor(this.context.teaser.asset,
                                  this.context.teaser);
      if (relObj.canBeTeaserImage) {
        return relObj.getImageUrl(size);
      }
    }
    return "";
  }
}
registerContentType(Survey, 'asset_survey');

export class Quiz extends BaseAsset {
  constructor(context) {
    super(context, 'asset_quiz');
  }

  get canBeTeaserImage() {
    return this.context.teaser && this.context.teaser.asset;
  }

  getImageUrl(size) {
    if (this.canBeTeaserImage) {
      let relObj = getRelationFor(this.context.teaser.asset,
                                  this.context.teaser);
      if (relObj.canBeTeaserImage) {
        return relObj.getImageUrl(size);
      }
    }
    return "";
  }
}
registerContentType(Quiz, 'asset_quiz');
