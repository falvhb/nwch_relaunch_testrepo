// contains the Relation and Asset classes stored in the registry
import { registerContentType, getRelationFor } from './registry';

/**
 * base class from which all Assets derive, these usually override constructor and getImageUrl in the derived class
 */
export class BaseAsset {
  constructor(context, contentType, canBeTeaserImage=true) {
    this.context = context;
    this.contentType = contentType;
    this._canBeTeaserImage = canBeTeaserImage;
  }

  get canBeTeaserImage() {
    return this._canBeTeaserImage;
  }

  set canBeTeaserImage(val) {
    this._canBeTeaserImage = val;
  }

  getImageUrl() {
    return '';
  }
}


export class Image extends BaseAsset {
  constructor(context) {
    super(context, 'asset_image');
  }

  getImageUrl() {
    return this.context.image_url;
  }
}
registerContentType(Image, 'asset_image');


export class ImageGallery extends BaseAsset {
  constructor(context) {
    super(context, 'asset_image_gallery');
  }

  get canBeTeaserImage() {
    // only galleries with more than one image are eligible to serve as teaser
    if (this.context.images.length > 1) {
      return true;
    }
  }

  getImageUrl(size) {
    let relObj = null;
    if (this.context.images.length > 1 && this.context.images[0]) {
      relObj = getRelationFor(this.context.images[0].asset, this.context.images[0]);
    }
    if (relObj && relObj.canBeTeaserImage) {
      return relObj.getImageUrl(size);
    }

    return "";
  }
}
registerContentType(ImageGallery, 'asset_image_gallery');

// dummy skeleton, RelationVideo does the logic since image_url?process is picked up from relation ...
export class Video extends BaseAsset {
  constructor(context) {
    super(context, 'asset_video');
  }
}
registerContentType(Video, 'asset_video');

// dummy skeleton, RelationAudio does the logic since image_url?process is picked up from relation ...
export class Audio extends BaseAsset {
  constructor(context) {
    super(context, 'asset_audio');
  }
}
registerContentType(Audio, 'asset_audio');

export class HtmlSnippet extends BaseAsset {
  constructor(context) {
    super(context, 'asset_htmlsnippet', false);
  }
}
registerContentType(HtmlSnippet, 'asset_htmlsnippet');

export class Survey extends BaseAsset {
  constructor(context) {
    super(context, 'asset_survey');
  }
}
registerContentType(Survey, 'asset_survey');

export class Quiz extends BaseAsset {
  constructor(context) {
    super(context, 'asset_quiz');
  }
}
registerContentType(Quiz, 'asset_quiz');
