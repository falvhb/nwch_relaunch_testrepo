// contains the Relation and Asset classes stored in the registry
import { registerContentType, getImplementation } from "./registry.jsx";

/**
 * base class from which all Assets derive
 */
export class BaseAsset {
  constructor(context, canBeTeaserImage=true) {
    this.context = context;
    this._canBeTeaserImage = canBeTeaserImage;
  }

  get canBeTeaserImage() {
    return this._canBeTeaserImage;
  }

  set canBeTeaserImage(val) {
    this._canBeTeaserImage = val;
  }

  get imageUrl() {
    return '';
  }
}

/**
 * base class from which all Relations derive
 */
export class BaseRelation {
  constructor(context) {
    this.context = context;
    this._canBeTeaserImage = true;
  }

  // right now, only imageGallery calls the base class implementation
  get imageUrl() {
    return this._getAsset().imageUrl;
  }

  get canBeTeaserImage() {
    //return this._canBeTeaserImage;
    return true;
  }

  set canBeTeaserImage(val) {
    this._canBeTeaserImage = val;
  }

  _getAsset() {
    if (!this._assetImpl) { // lazy impl ...
      // call the actual implementation: in case of imageGallery: images[0]
      this._assetImpl = getImplementation(this.context.asset);
    }
    return this._assetImpl;
  }
}

export class RelationImage extends BaseRelation {
  get imageUrl() {
    return this.context.image_url + '?' + this.context.process;
  }
}
registerContentType(RelationImage, 'asset_image_relation');


export class RelationImageGallery extends BaseRelation {
  // places assets[0] onto the object for now
}
registerContentType(RelationImageGallery, 'asset_image_gallery_relation');


export class RelationVideo extends BaseRelation {
  get imageUrl() {
    return this.context.image_url + '?' + this.context.process;
  }
}
registerContentType(RelationVideo, 'asset_video_relation');

export class RelationAudio extends BaseRelation {
  get imageUrl() {
    return this.context.image_url + '?' + this.context.process;
  }
}
registerContentType(RelationAudio, 'asset_audio_relation');

export class RelationHtmlSnippet extends BaseRelation {
  get canBeTeaserImage() {
    return false;
  }
  get imageUrl() {
    return "";
  }
}
registerContentType(RelationHtmlSnippet, 'asset_htmlsnippet_relation');

export class RelationSurvey extends BaseRelation {
  get imageUrl() {
    if (this.context.asset && this.context.asset.teaser) {
      return this.context.asset.teaser.image_url + '?' + this.context.asset.teaser.process;
    }
  }
}
registerContentType(RelationSurvey, 'asset_survey_relation');

export class RelationQuiz extends BaseRelation {
  get imageUrl() {
    if (this.context.asset && this.context.asset.teaser) {
      return this.context.asset.teaser.image_url + '?' + this.context.asset.teaser.process;
    }
  }
}
registerContentType(RelationQuiz, 'asset_quiz_relation');

// and now for the the asset classes ...

// dummy skeleton, RelationVideo does the logic since the image_url?process is picked up from relation ...
export class Image extends BaseAsset {
  get imageUrl() {
    return this.context.image_url;
  }
}
registerContentType(Image, 'asset_image');

// in use
export class ImageGallery extends BaseAsset {
  get canBeTeaserImage() {
    // only galleries with more than one image are eligible to serve a teaser
    if (this.context.images.length > 1) {
      return true;
    }
  }
  get imageUrl() {
    if (this.context.images.length > 1 && this.context.images[0]) {
      return this.context.images[0].image_url + '?' + this.context.images[0].process;
    }
    return null;
  }
}
registerContentType(ImageGallery, 'asset_image_gallery');

// dummy skeleton, RelationVideo does the logic since image_url?process is picked up from relation ...
export class Video extends BaseAsset {
  get imageUrl() {
    return "";
  }
}
registerContentType(Video, 'asset_video');

// dummy skeleton, RelationAudio does the logic since image_url?process is picked up from relation ...
export class Audio extends BaseAsset {
  get imageUrl() {
    return "";
  }
}
registerContentType(Audio, 'asset_audio');

// dummy skeleton, RelationHtmlSnippet does the logic since image_url?process is picked up from relation ...
export class HtmlSnippet extends BaseAsset {
  constructor(context) {
    super(context, false);
  }

  get imageUrl() {
    return "";
  }
}
registerContentType(Audio, 'asset_audio');

// dummy skeleton, RelationSurvey does the logic since image_url?process is picked up from relation ...
export class Survey extends BaseAsset {
  get imageUrl() {
    return "";
  }
}
registerContentType(Survey, 'asset_survey');

// dummy skeleton, RelationQuiz does the logic since image_url?process is picked up from relation ...

export class Quiz extends BaseAsset {
}
registerContentType(Quiz, 'asset_quiz');
