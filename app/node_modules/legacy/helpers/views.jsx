import getMainAsset from "helpers/get-main-asset.jsx";
import { createImageSrc } from "../../../../common/image.js";
import {formCanonicalUrlPath} from "helpers/get-article-url.jsx";
import "./assets.jsx";
import {getRelationFor, printAll} from "./registry.jsx";

const ASSET_LABELS = {
  asset_video: 'Video',
  asset_audio: 'Audio',
  asset_image_gallery: 'Bilder',
  asset_survey: 'Umfrage',
  asset_quiz: 'Quiz',
  asset_infographic: 'Infografik'
};

//const UGC_BASE_RESSORT_NAME = 'beitrag';
const UGC_RESSORT_NAME = 'leserbeitrag';
const UGC_CLUB_RESSORT_NAME = 'vereinsmeldung';
//const UGC_ANONYMOUS_CREATOR = 'anonym';


export default class View {

  constructor (article) {
    this.article = article;
  }

/*
    def mainAssetLabel(self):
        if self.obj.label:
            return self.obj.label
        if self.isUgcArticle():
            return self.ressort.title
        return ASSET_LABELS.get(self.mainAssetType(), False)
*/

  get mainAssetLabel() {
    const { article } = this;
    if (article.label) {
      return article.label;
    }
    if (this.isUgcArticle) {
      if (article.ressorts && article.ressorts.length > 0) {
        return article.ressorts[0].title;
      }
    }
    return ASSET_LABELS[this.mainAssetType];
  }

/*
    def spitzmarke(self):
      # TODO: remove mainKeyword as soon as migration is finished
      return (INewsArticle(self.context).spitzmarke or
          self.mainKeyword() or
          self.city())
*/

  get mainKeyword() {
    if (this.article.keywords && this.article.keywords.length > 0) {
      return this.article.keywords[0];
    }
    return '';
  }

  get articleCity() {
    if (this.article.cities && this.article.cities.length > 0) {
      return this.article.cities[0];
    }
    return null;
  }

  get city() {
    let city = this.articleCity;
    if (city) {
      return city.name;
    }
    return "";
  }

  get spitzmarke() { // spitzmarke is now context_label
    return this.article.context_label ||
    this.mainKeyword ||
    this.city;
  }

/*
    def title(self):
        return replaceQuotes(
                IDCDescriptiveProperties(self.context).title or u''
                )
*/

  // unit test exists
  get title() {
    return this.article.title || "";
  }

/*
    def isUgcArticle(self):
        return IUGCNewsArticleType.providedBy(self.context)
*/

  // unit test exists
  get isUgcArticle() {
    return this.article.content_type === "ugcnewsarticle";
  }

/*
   def mainAssetType(self):
        asset = self.mainAsset
        if not asset:
            return ''
        elif IGalleryAssetType.providedBy(asset):
            if IGalleryAsset(asset).assets.count() <= 1:
                return ''
        return asset.contentType
*/


  get mainAssetType() {
    let asset = this.mainAsset;

    if (!asset) {
      return "";
    } else if (asset.asset.content_type === "asset_image_gallery") {
      if (asset.asset.images.length <= 1) {
        return "";
      }
    }
    return asset.asset.content_type;
  }

  /*
    @Lazy
    def mainAsset(self):
        return self.teaserAsset(self.obj)
        */

  get mainAsset() {
    return getMainAsset(this.article.assets);
  }

//    @Lazy
//    def providesTeaserCompatibleMainAsset(self):
//        """Check if the main asset is able to provide a teaser image"""
//        mainAsset = self.mainAsset
//        if mainAsset is None:
//            return False
//        isAudioWithImage = (IAudioAssetType.providedBy(mainAsset)
//                            and IMediaAsset(mainAsset).imageAsset is not None
//                           )
//        return (isAudioWithImage
//                or IImageAssetType.providedBy(mainAsset)
//                or IVideoAssetType.providedBy(mainAsset)
//                or ISurveyAssetType.providedBy(mainAsset)
//                or IQuizAssetType.providedBy(mainAsset)
//                or IGalleryAssetType.providedBy(mainAsset)
//                or IHTMLSnippetAssetType.providedBy(mainAsset)
//               )

  get providesTeaserCompatibleMainAsset() {
    return !!getMainAsset(this.article.assets);
  }

/*
    @property
    def ressort(self):
        return IRessort(self.context, None)
*/
  // unit test exists
  get ressort() {
    if (this.article.ressorts && this.article.ressorts.length > 0) {
      return this.article.ressorts[0];
    }
  }

/*
    def mainAssetLabelImg(self):
        if self.ressort is not None:
            if self.ressort.urlpart.lower() == UGC_RESSORT_NAME:
                return 'assetLabelIcon labelIconReader'
            elif self.ressort.urlpart.lower() == UGC_CLUB_RESSORT_NAME:
                return 'assetLabelIcon labelIconClub'
        return False
*/

  // unit test exists
  get mainAssetLabelImg() {
    let ressort = this.ressort;

    if (ressort) {
      if (ressort.urlpart.toLowerCase() === UGC_RESSORT_NAME) {
        return "assetLabelIcon labelIconReader";
      } else if (ressort.urlpart.toLowerCase() === UGC_CLUB_RESSORT_NAME) {
        return "assetLabelIcon labelIconClub";
      }
    }

    return false;
  }


  //def replaceQuotes(text, param=None, options=None):
  //    # works only for non-html
  //    return re.sub(r'["\'](.*?)["\']', ur'\u00ab\1\u00bb', text)


/*
  def anriss(self):
    return replaceQuotes(self.obj.anriss or u'')
*/

  // unit test exists
  get anriss() {
    return this.article.lead || ""; // anriss is now lead ...
  }

/*
    def text(self):
        return self.apply_stoerer(self.obj.text, self.obj.stoerer)
*/

  // unit test exists
  get text() {
    return this.article.text; // most likely not used, @jukart???
  }

/*
      def commentable(self):
        return self.obj.commentable
*/

  // unit test exists
  get commentable() {
    return this.article.commentable;
  }

/*
    def commentCount(self):
        c = None
        if not self.disqusEnabled():
            q = ICommentOrganizer(self.context)
            c = q.find(Comment.state == COMMENT_WORKFLOW_ACCEPTED).count()
        else:
            c = INewsArticle(self.context).disqusCommentCount
        if c > 0:
            return "Kommentare ({0})".format(c)
        return "Kommentare"
*/

// unit test exists
  get commentCount() {
    let c = this.article.comment_count;
    if (c > 0) {
      return `Kommentare ${c}`;
    }
    return "Kommentare";
  }

  /*
  def clear_html(text, param, options):
    return re.sub('<.*?>', '', text)
    */

  // unit tests exist
  clearHtml(text) {
    return text.replace(/<[^>]+>/ig,'');
  }




  // unit tests exist
  get mainTeaserAssetUrl() {
    let assets = this.article.assets
    //printAll();

    //console.log("mainTeaserAssetUrl: assets.length=" + assets.length);
    for (let i = 0; i < assets.length; i++) {
      //console.log("mainTeaserAssetUrl: i=" + i);
      let rel = assets[i]
      // the use of the registry: implementation is up to relation or class
      // initially, all relation objects are registered once on startup calling registerContentType
      // so the logic is moved to the RelationClasses or corresponding classes
      //console.log("mainTeaserAssetUrl: rel=\n", rel);

      let relObj = getRelationFor(rel.asset, rel);

      if (relObj) {
        //console.log('mainTeaserAssetUrl: relObj was created and relObj.url=\n', relObj.url);
      } else {
        //console.log('mainTeaserAssetUrl: WARN: no relObj');
      }

      if (relObj && relObj.canBeTeaserImage) {
        //console.log('yes, relObj.url=\n', relObj.url);
        return relObj.url;
      }
    }

  }

  // unit tests exist
  getTeaserUrl(width, height, letterbox = true) {
    let mainTeaserAssetUrl = this.mainTeaserAssetUrl;
    if (mainTeaserAssetUrl) {
      return createImageSrc(mainTeaserAssetUrl, width, height, letterbox);
    }
    return "";
  }

  // unit tests exist
  getAbsoluteUrl(leadingSlash = true) {
    return formCanonicalUrlPath(this.article, leadingSlash);
  }


}
