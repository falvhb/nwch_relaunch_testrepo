// the View class, mimics existing zope functionality

import {createImageSrc} from '../../../../common/image';
import {formCanonicalUrlPath} from 'helpers/get-article-url';
import './assets';
import './relations';
import {ImageGallery} from './assets';
import {getRelationFor} from './registry';

const ASSET_LABELS = {
  asset_video: 'Video',
  asset_audio: 'Audio',
  asset_image_gallery: 'Bilder',
  asset_survey: 'Umfrage',
  asset_quiz: 'Quiz',
  asset_infographic: 'Infografik'
};

const UGC_RESSORT_NAME = 'leserbeitrag';
const UGC_CLUB_RESSORT_NAME = 'vereinsmeldung';

export default class View {

  constructor (article, size = {width: 220, height: 130}) {
    this.article = article;
    this._teaserSize = size;
  }

  // unit test exists
  get mainKeyword() {
    if (this.article.keywords && this.article.keywords.length > 0) {
      return this.article.keywords[0];
    }
    return '';
  }

  // unit test implicit by get city(), see below
  get articleCity() {
    if (this.article.cities && this.article.cities.length > 0) {
      return this.article.cities[0];
    }
    return null;
  }

  // unit test exists
  get city() {
    let city = this.articleCity;
    if (city) {
      return city.name;
    }
    return "";
  }

  /*
    def spitzmarke(self):
      # TODO: remove mainKeyword as soon as migration is finished
      return (INewsArticle(self.context).spitzmarke or
          self.mainKeyword() or
          self.city())
          */

  // unit test exists
  get spitzmarke() { // spitzmarke is now context_label
    return this.article.context_label ||
    this.mainKeyword ||
    this.city;
  }

  // unit test exists
  get title() {
    return this.article.title || "";
  }

  /*
    def isUgcArticle(self):
        return IUGCNewsArticleType.providedBy(self.context)
        */

  // unit test exists
  get isUgcArticle() {
    return this.article.content_type === "ugcnewsarticle";
  }

  /*
    @property
    def ressort(self):
        return IRessort(self.context, None)
        */

  // unit test exists
  get ressort() {
    if (this.article.ressorts && this.article.ressorts.length > 0) {
      return this.article.ressorts[0];
    }
  }

  /*
  def mainAssetLabelImg(self):
      if self.ressort is not None:
          if self.ressort.urlpart.lower() == UGC_RESSORT_NAME:
              return 'assetLabelIcon labelIconReader'
          elif self.ressort.urlpart.lower() == UGC_CLUB_RESSORT_NAME:
              return 'assetLabelIcon labelIconClub'
      return False
      */

  // unit test exists
  get mainAssetLabelImg() {
    let ressort = this.ressort;

    if (ressort) {
      if (ressort.urlpart.toLowerCase() === UGC_RESSORT_NAME) {
        return "assetLabelIcon labelIconReader";
      } else if (ressort.urlpart.toLowerCase() === UGC_CLUB_RESSORT_NAME) {
        return "assetLabelIcon labelIconClub";
      }
    }

    return false;
  }

  /*
  def replaceQuotes(text, param=None, options=None):
      # works only for non-html
      return re.sub(r'["\'](.*?)["\']', ur'\u00ab\1\u00bb', text)
      */

  /*
  def anriss(self):
    return replaceQuotes(self.obj.anriss or u'')
    */

  // unit test exists
  get anriss() {
    return this.article.lead || ""; // anriss is now lead ...
  }

  /*
  def text(self):
      return self.apply_stoerer(self.obj.text, self.obj.stoerer)
      */

  // unit test exists
  get text() {
    return this.article.text; // most likely not used, @jukart???
  }

  /*
  def commentable(self):
    return self.obj.commentable
    */

  // unit test exists
  get commentable() {
    return this.article.commentable;
  }

  /*
  def commentCount(self):
      c = None
      if not self.disqusEnabled():
          q = ICommentOrganizer(self.context)
          c = q.find(Comment.state == COMMENT_WORKFLOW_ACCEPTED).count()
      else:
          c = INewsArticle(self.context).disqusCommentCount
      if c > 0:
          return "Kommentare ({0})".format(c)
      return "Kommentare"
      */

  // unit test exists
  get commentCount() {
    let cc = this.article.comment_count;
    if (cc > 0) {
      return `Kommentare ${cc}`;
    }
    return "Kommentare";
  }

  /*
  def clear_html(text, param, options):
    return re.sub('<.*?>', '', text)
    */

  // unit tests exist
  clearHtml(text) {
    return text.replace(/<[^>]+>/ig, '');
  }

  // unit tests exist
  getAbsoluteUrl(leadingSlash = true) {
    let temp_path = formCanonicalUrlPath(this.article, leadingSlash);
    if (temp_path) {
      return temp_path.replace(/["']/g, '');
    }
  }

  /*
    def mainAssetLabel(self):
        if self.obj.label:
            return self.obj.label
        if self.isUgcArticle():
            return self.ressort.title
        return ASSET_LABELS.get(self.mainAssetType(), False)
        */

  get mainAssetLabel() {
    const { article } = this;
    if (article.label) {
      return article.label;
    }
    if (this.isUgcArticle && this.ressort) {
      return this.ressort.title;
    }
    return ASSET_LABELS[this.mainAssetType];
  }



  /*
    @Lazy
    def mainAsset(self):
        return self.teaserAsset(self.obj)
        */

  /*get mainAsset() {
    return getMainAsset(this.article.assets);
  }
  */

  // unit tests exist
  get mainTeaserAssetUrl() {
    const mainAssetRelation = this.mainAssetRelation;
    return mainAssetRelation ? mainAssetRelation.getImageUrl(this._teaserSize) : null;
  }

  /*
    def mainAssetType(self):
        asset = self.mainAsset
        if not asset:
            return ''
        elif IGalleryAssetType.providedBy(asset):
            if IGalleryAsset(asset).assets.count() <= 1:
                return ''
        return asset.contentType
        */

  get mainAssetType() {
    let asset = this.mainAsset;
    if (!asset) {
      return "";
    }
    if (asset instanceof ImageGallery) {
      if (asset.imageCount <= 1) {
        return "";
      }
    }
    return asset.contentType;
  }

  /*
    @Lazy
    def mainAsset(self):
        return self.teaserAsset(self.obj)
        */

  get providesTeaserCompatibleMainAsset() {
    return !!this.mainAsset;
  }

  // unit tests exist
  get mainAsset() {
    const mainAssetRelation = this.mainAssetRelation;
    return mainAssetRelation ? mainAssetRelation.asset : null;
  }

  /*get mainAsset() {
    return getMainAsset(this.article.assets);
  }
  */

  // unit tests exist
  getTeaserUrl(letterbox = false) {
    let mainTeaserAssetUrl = this.mainTeaserAssetUrl;
    if (mainTeaserAssetUrl) {
      return createImageSrc(mainTeaserAssetUrl, this._teaserSize.width, this._teaserSize.height, letterbox);
    }
    return "";
  }

  // unit tests exist
  get mainTeaserAssetUrl() {
    const mainAssetRelation = this.mainAssetRelation;
    return mainAssetRelation ? mainAssetRelation.getImageUrl(this._teaserSize) : null;
  }

  // unit tests exist
  get mainAssetRelation() {
    let assets = this.article.assets;

    if (this._relObj) {
      return this._relObj;
    }

    for (let i = 0; i < assets.length; i++) {
      let rel = assets[i];
      // the use of the registry: implementation is up to relation or class
      // initially, all relation objects are registered once on startup calling registerContentType
      // so the logic is moved to the RelationClasses or their corresponding Asset classes
      let relObj = getRelationFor(rel.asset, rel);

      if (relObj && relObj.canBeTeaserImage) {
        this._relObj = relObj;
        return relObj;
      }
    }
  }

  /*
  @Lazy
  def teaserNineColCssClass(self):
      if self.providesTeaserCompatibleMainAsset:
          return '9ColTeaserWithImage'
      return '9ColTeaserNoImage'
      */

  get teaserNineColCssClass() {
    if (this.providesTeaserCompatibleMainAsset) {
      return "9ColTeaserWithImage";
    }
    return "9ColTeaserNoImage";
  }

}
