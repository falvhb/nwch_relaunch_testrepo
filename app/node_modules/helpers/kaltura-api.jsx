/*global JSON:true*/
import axios from 'axios';

export default class KalturaAPI {
  constructor(options) {
    // @TODO:@Richard:
    // Use destructuring of ES6?
    // Checking input: Best practice to check for errors?
    this.setConfiguration(options.domain, options.path, options.ssl);
    this.setAction(options.service, options.action);
    this.setOrderBy(options.orderByKey, options.orderDescending);
    this.setFilter(options.freeText, options.mediaTypeEqual, options.categoriesIdsMatchAnd);
    this.setPager(options.pageIndex, options.pageSize);
    this.setFormat(options.format);
  }

  setConfiguration(domain, path, ssl) {
    this.domain = domain;
    this.path = path;
    this.protocol = (ssl ? 'https://' : 'http://');
  }

  setAction(service, action) {
    this.service = service;
    this.action = action;
  }

  setOrderBy(key, descending) {
    this.orderBy = (descending ? '-' : '+') + key;
  }

  setFilter(freeText, mediaTypeEqual, categoriesIdsMatchAnd) {
    this.freeText = freeText + '*';
    this.mediaTypeEqual = mediaTypeEqual;
    this.categoriesIdsMatchAnd = (categoriesIdsMatchAnd ? categoriesIdsMatchAnd : '');
  }

  setPager(index, size) {
    this.pageIndex = index;
    this.pageSize = size;
  }

  setFormat(format) {
    // 1 for JSON
    this.format = format;
  }

  getURL() {
    this.url = this.protocol
                + this.domain
                + this.path
                + '?action='+this.action
                + '&filter:categoriesIdsMatchAnd='+this.categoriesIdsMatchAnd
                + '&filter:freeText='+this.freeText
                + '&filter:mediaTypeEqual='+this.mediaTypeEqual
                + '&filter:orderBy='+this.orderBy
                + '&format='+this.format
                + '&pager:pageIndex='+this.pageIndex
                + '&pager:pageSize='+this.pageSize
                + '&service='+this.service;
    return this.url;
  }

  getVideos() {
    var url = this.getURL();
    // console.log('url', 'pageIndex=', this.pageIndex, url);
    var self = this;
    return axios.get(url, {
      transformResponse: [function (response) {
        // @TODO:@Richard: How do we handle non JSON responses? Can we throw an error and catch it in component invoking getVideos?
        data = null;
        if (self.isJSONString(response)) {
          var data = JSON.parse(response);
          data = data.objects;
        }
        return data;
      }]
    });
  }

  isJSONString(str) {
    try {
      JSON.parse(str);
    } catch (e) {
      return false;
    }
    return true;
  }

}
