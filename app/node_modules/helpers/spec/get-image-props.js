/* eslint-disable no-unused-expressions */

import _ from 'lodash';

import getImageProps from 'helpers/get-image-props';
import article from 'utils/data/master-article';

import { expect } from 'chai';

describe('Helpers', () => {

  describe('getImageProps', () => {

    let imageFixture, galleryFixture, videoFixture;

    beforeEach(function() {
      imageFixture = _.find(article.article.assets, (chr) => {
        return chr.asset.content_type === 'asset_image';
      });
      galleryFixture = _.find(article.article.assets, (chr) => {
        return chr.asset.content_type === 'asset_image_gallery';
      });
      videoFixture = _.find(article.article.assets, (chr) => {
        return chr.asset.content_type === 'asset_video';
      });
    });

    it('returns an object', () => {
      expect(getImageProps(imageFixture)).to.be.an('object');
    });

    it('object contains source, title and alt', () => {
      let result = getImageProps(imageFixture);
      expect(_.has(result, 'src')).to.be.true;
      expect(_.has(result, 'title')).to.be.true;
      expect(_.has(result, 'alt')).to.be.true;
    });

    it('returns asset alt as a fallback', () => {
      let clone = _.assign({}, imageFixture);
      let alt = clone.description;
      clone.description = null;
      clone.asset.description = alt;
      let result = getImageProps(clone);
      expect(result.alt).to.equal(alt);
    });

    it('returns title when there is no alt', () => {
      let clone = _.assign({}, imageFixture);
      clone.description = null;
      clone.asset.description = null;
      let result = getImageProps(clone);
      expect(result.alt).to.equal(clone.title.trim());
    });

    it('returns title when there is an alt', () => {
      let result = getImageProps(imageFixture);
      expect(result.title).to.contain(imageFixture.title.trim());
    });

    it('returns asset title as a fallback', () => {
      let clone = _.assign({}, imageFixture);
      let title = clone.title.trim();
      clone.title = null;
      clone.asset.title = title;
      let result = getImageProps(clone);
      expect(result.title).to.equal(title);
    });

    it('returns caption as title when there is no alt', () => {
      let clone = _.assign({}, imageFixture);
      clone.description = null;
      let result = getImageProps(clone);
      expect(result.title).to.contain('Â© ');
    });

    it('returns src for all types', () => {
      let imageResult = getImageProps(imageFixture);
      let galleryResult = getImageProps(galleryFixture);
      let videoResult = getImageProps(videoFixture);
      expect(_.has(imageResult, 'src')).to.be.true;
      expect(_.has(galleryResult, 'src')).to.be.true;
      expect(_.has(videoResult, 'src')).to.be.true;
    });

    it('returns first image src for a gallery', () => {
      let firstImage = _.first(galleryFixture.asset.images);
      let result = getImageProps(galleryFixture);
      expect(result.src).to.equal(firstImage.image_url);
    });

    it('returns asset src as a fallback for images', () => {
      let clone = _.assign({}, imageFixture);
      clone.image_url = null;
      let result = getImageProps(clone);
      expect(result.src).to.equal(imageFixture.asset.image_url);
    });

    it('returns asset src as a fallback for galleries', () => {
      let firstImage = _.first(galleryFixture.asset.images);
      let clone = _.assign({}, galleryFixture);
      clone.asset.images[0].image_url = null;
      let result = getImageProps(clone);
      expect(result.src).to.equal(firstImage.asset.image_url);
    });

    it('returns asset src as a fallback for videos', () => {
      let clone = _.assign({}, videoFixture);
      clone.asset.still_image.image_url = null;
      let result = getImageProps(clone);
      expect(result.src).to.equal(videoFixture.asset.still_image.asset.image_url);
    });

    it('returns null when image has no src', () => {
      let clone = _.assign({}, imageFixture);
      clone.image_url = null;
      clone.asset.image_url = null;
      let result = getImageProps(clone);
      expect(result).to.equal(null);
    });

    it('returns null when video has no image', () => {
      let clone = _.assign({}, videoFixture);
      clone.asset = {};
      let result = getImageProps(clone);
      expect(result).to.equal(null);
    });

  });

});
