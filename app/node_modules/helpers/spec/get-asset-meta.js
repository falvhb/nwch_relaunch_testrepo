/* eslint-disable no-unused-expressions */

import _ from 'lodash';

import getAssetMeta from 'helpers/asset/get-meta';
import fixture from './data/sample-image-asset';

import { expect } from 'chai';

describe('Helpers', () => {

  describe('getAssetMeta', () => {

    it('returns an object', () => {
      expect(getAssetMeta(fixture)).to.be.an('object');
    });

    it('returns title correctly', () => {
      let fixtureTitle = fixture.title.trim();
      let result = getAssetMeta(fixture).title;
      expect(result).to.equal(fixtureTitle);
    });

    it('returns asset title if title empty', () => {
      let data = _.assign({}, fixture);
      let fixtureTitle = fixture.asset.title.trim();
      data.title = null;
      let result = getAssetMeta(data).title;
      expect(result).to.equal(fixtureTitle);
    });

    it('returns if title empty', () => {
      let data = _.assign({}, fixture);
      data.title = null;
      data.asset.title = null;
      let result = getAssetMeta(data).title;
      expect(result).to.equal('');
    });

    it('returns description correctly', () => {
      let fixtureDescription = fixture.description;
      let result = getAssetMeta(fixture).description;
      expect(result).to.equal(fixtureDescription);
    });

    it('removes markup from description', () => {
      let data = _.assign({}, fixture);
      let fixtureDescription = fixture.description;
      data.description = '<p>' + fixtureDescription + '<h3></h3></p>';
      let result = getAssetMeta(data).description;
      expect(result).to.equal(fixtureDescription);
    });

    it('returns asset description if description empty', () => {
      let data = _.assign({}, fixture);
      let fixtureDescription = fixture.description;
      data.asset.description = fixtureDescription;
      data.description = null;
      let result = getAssetMeta(data).description;
      expect(result).to.equal(fixtureDescription);
    });

    it('returns if description empty', () => {
      let data = _.assign({}, fixture);
      data.description = null;
      data.asset.description = null;
      let result = getAssetMeta(data).description;
      expect(result).to.equal('');
    });

    it('returns source correctly', () => {
      let result = getAssetMeta(fixture).source;
      expect(result).to.equal('Â© Zur Verfuegung Gestellt');
    });

    it('returns empty if no source', () => {
      let data = _.assign({}, fixture);
      data.asset.source = {};
      let result = getAssetMeta(data).source;
      expect(result).to.equal('');
    });

  });

});
