/* eslint-disable no-unused-expressions */

import _ from 'lodash';

import getAssetMeta from 'helpers/get-asset-meta';
import fixture from './data/sample-image-asset';

import { expect } from 'chai';

describe('Helpers', function() {

  describe('getAssetMeta', function() {

    it('returns an object', function() {
      expect(getAssetMeta(fixture)).to.be.an('object');
    });

    it('returns title correctly', function() {
      let fixtureTitle = fixture.title.trim();
      expect(getAssetMeta(fixture).title).to.equal(fixtureTitle);
    });

    it('returns asset title if title empty', function() {
      let data = _.assign({}, fixture);
      let fixtureTitle = fixture.asset.title.trim();
      data.title = null;
      expect(getAssetMeta(data).title).to.equal(fixtureTitle);
    });

    it('returns if title empty', function() {
      let data = _.assign({}, fixture);
      data.title = null;
      data.asset.title = null;
      expect(getAssetMeta(data).title).to.equal('');
    });

    it('returns description correctly', function() {
      let fixtureDescription = fixture.description;
      expect(getAssetMeta(fixture).description).to.equal(fixtureDescription);
    });

    it('removes markup from description', function() {
      let data = _.assign({}, fixture);
      let fixtureDescription = fixture.description;
      data.description = '<p>' + fixtureDescription + '<h3></h3></p>';
      expect(getAssetMeta(data).description).to.equal(fixtureDescription);
    });

    it('returns asset description if description empty', function() {
      let data = _.assign({}, fixture);
      let fixtureDescription = fixture.description;
      data.asset.description = fixtureDescription;
      data.description = null;
      expect(getAssetMeta(data).description).to.equal(fixtureDescription);
    });

    it('returns if description empty', function() {
      let data = _.assign({}, fixture);
      data.description = null;
      data.asset.description = null;
      expect(getAssetMeta(data).description).to.equal('');
    });

    it('returns source correctly', function() {
      expect(getAssetMeta(fixture).source).to.equal('Â© Zur Verfuegung Gestellt');
    });

    it('returns empty if no source', function() {
      let data = _.assign({}, fixture);
      data.asset.source = {};
      expect(getAssetMeta(data).source).to.equal('');
    });

  });

});
