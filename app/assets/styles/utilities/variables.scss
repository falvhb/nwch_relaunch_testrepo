// -----------------------------------------------------------------------------
// This file contains all application-wide Sass variables.
// -----------------------------------------------------------------------------



// -----------------------------------------------------------------------------
// FONT STACKS
// -----------------------------------------------------------------------------


/// Default font stack for the copy text
/// @type List
/// @group typography
$text-font-stack: 'Publico', 'Georgia', serif;


/// Heading font stack only used on article headlines
/// @type List
/// @group typography
$headline-font-stack: 'Publico Headline', 'Times New Roman', serif;


/// Supporting font stack mostly used for UI elements
/// @type List
/// @group typography
$supporting-font-stack: 'Colfax', 'Helvetica', 'Arial', sans-serif;


/// Supporting font stack mostly used for UI elements
/// @type List
/// @group typography
$code-font-stack: 'Consolas', 'Monaco', 'Courier New', monospace;



// -----------------------------------------------------------------------------
// COLORS
// /!\ Caution! The *... from ... palette* on each color is the color name and
//     the palette it belongs to in the styleguide. Do not change the format.
// -----------------------------------------------------------------------------


/// AZ blue from primary palette
/// This colour is used in the logo and as main brand colour.
/// @group colors
/// @type Color
$blue: #1B4D85;


/// Light blue from primary palette
/// This colour is used to indicate links and interactive elements.
/// @group colors
/// @type Color
$light-blue: #428BDD;


/// Black from primary palette
/// This colour is used for all of the text content on the site, instead of black.
/// @group colors
/// @type Color
$black: #0B0B0B;


/// Orange from secondary palette
/// This colour represents dialogue, opinion and community content.
/// @group colors
/// @type Color
$orange: #FFB64E;


/// Yellow from secondary palette
/// This colour is used for subtle highlights & drawing attention to certain sections and should be used sparingly.
/// @group colors
/// @type Color
$yellow: #FEEF75;


/// Turquoise from secondary palette
/// This colour is used to represent dossier pages.
/// @group colors
/// @type Color
$turquoise: #2CC4A8;


/// Red from secondary palette
/// This colour indicates live events and breaking news.
/// @group colors
/// @type Color
$red: #FF5858;


/// Dark grey from grey palette
/// This colour is for contextual tags, quotes, captions and other small details.
/// @group colors
/// @type Color
$dark-grey: #666666;


/// Medium grey from grey palette
/// This colour is for backgrounds that need to stand out.
/// @group colors
/// @type Color
$medium-grey: #7A7A7A;


/// Light grey from grey palette
/// This colour is used to infer subtle backgrounds on pieces of content.
/// @group colors
/// @type Color
$light-grey: #EDEDED;


/// Very light grey from grey palette
/// This colour is used to infer subtle backgrounds on pieces of content.
/// @group colors
/// @type Color
$very-light-grey: #F8F8F8;



// -----------------------------------------------------------------------------
// BREAKPOINTS AND MEDIA-EXPRESSIONS
// -----------------------------------------------------------------------------


/// Application-wide breakpoints map
/// @type Map
/// @prop {String} key - Name of the breakpoint
/// @prop {Map} value - Breakpoint value expressed in pixels
$breakpoints: (
  'small': 650px,
  'medium': 750px,
  'large': 1150px
);


/// Application-wide static queries map
/// @type Map
/// @prop {String} key - Name of the query
/// @prop {String | List} value - Query value
///   - key is repeated as value if simple query (e.g. `print`)
///   - list is used for *or* conditions (e.g. retina)
$media-expressions: (
  'print': 'print',
  'retina': (
    '(-webkit-min-device-pixel-ratio: 2)',
    '(min-resolution: 192dpi)'
  )
);



// -----------------------------------------------------------------------------
// BREAKPOINTS AND MEDIA-EXPRESSIONS
// -----------------------------------------------------------------------------


/// The width of a störer, hardcoded to match the usual ads we have
/// @type Length
/// @group stoerer
$stoerer-width: 300px;

/// The offset of a störer in the left margin
/// @type Length
/// @group stoerer
$stoerer-offset: ($stoerer-width / 2);

/// The breakpoint at which a störer should be offseted
/// @type Length
/// @group stoerer
$stoerer-breakpoint: (800px + $stoerer-offset);

/// The basic gap for a störer on small screens
/// @type Length
/// @group stoerer
$stoerer-basic-gap: 12px;

/// The gap for floated störers on large screens
/// @type Length
/// @group stoerer
$stoerer-floated-gap: 20px;

/// The basic gap for störers on large screens
/// @type Length
/// @group stoerer
$stoerer-large-gap: 40px;
